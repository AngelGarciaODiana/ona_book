[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"Welcome website book Handbook Graphs Networks People Analytics Keith McNulty. book available bootstrap format plain gitbook format.book progressively written open review. Please file feedback requests content leaving issue book’s Github repo.Many thanks!Last updated: 05 September 2021","code":""},{"path":"everywhere.html","id":"everywhere","chapter":"1 Graphs everywhere!","heading":"1 Graphs everywhere!","text":"ever lucky enough pay visit vibrant Russian city Kaliningrad Baltic coast, ’s likely trip remember. unusual exclave massive Russian Federation, get remainder Russia Kaliningrad land without crossing least two countries. Things landed way, like always , cards dealt history. strategic importance endowed Kaliningrad owing prime coastal position placed center geopolitical ‘tug--war’ saw change hands numerous occasions centuries. end Second World War, Stalin cast eye ruins Europe, considered city far strategically important left hands Eastern-bloc state, — despite physical separation — duly deemed Russia’s sovereign territory.might expect, Kaliningrad named since became part USSR 1946. Prior , stretching back middle ages, known Königsberg — King’s Mountain — named honor King Ottokar II. Steeped glorious tragic history, city rich museums, castles, cathedrals monuments past. mathematicians like , Königsberg perhaps best known simple, unassuming puzzle occupied minds many renaissance intellectual 17th 18th centuries — problem , argued, laid foundations highly connected world live today.city known Königsberg separated two path River Pregel. Pregel breaks towards Baltic sea, two islands form part city. leads city comprised four land masses: two mainland masses either side river (known Altstadt-Loebenicht Vorstadt-Haberberg), two island land masses (Lomse Kneiphof). 1700s, total seven bridges connected land masses1. Figure 1.1 suitably historic map situation. island left Kneiphof island right Lomse. beautiful dress worn lady foreground picture large enough one seven bridges entirely covered , can see six.\nFigure 1.1: Prussian city Königsberg circa 1600\npuzzle went like : possible devise walk set foot four land masses crossing seven bridges ? strong hunch trial error answer — problem prove mathematically. effective techniques yet discovered allow proof.Enter Leonhard Euler — 18th century Swiss mathematician spent majority life St Petersburg Berlin. prolific original thinker, Euler considered many greatest mathematician time. impossible study mathematics even high school without constantly exposed Euler’s work. popularized greek letter \\(\\pi\\) denote Archimedes’ constant ratio circumference diameter circle, formalized letter \\(\\) denote imaginary number \\(\\sqrt{-1}\\) defined exponential constant \\(e\\) known Euler’s number. Living two cities either side Königsberg time problem Seven Bridges, set finding solution. one discovered testament beauty mathematical proof first use concept graph solve mathematical problem.first thing Euler — good mathematician always — strip problem extraneous information reduce minimal form. problem merely requires one set foot land mass. concerned route one takes land mass. Therefore can represent four land masses dots. can draw lines dots represent bridges. , reasoned, leads diagram like Interactive Figure 1.2. picture can drawn infinitely many ways, always four dots connected seven lines configuration. like, move nodes around see mean.\nFigure 1.2: minimal representation Seven Bridges Königsberg problem\nFirst, Euler observed one starts journey certain place crosses seven bridges , must eight total visits places. start place, every time cross bridge, add another place walk. cross seven bridges, must visit eight places (including repeat visits place).Euler looked situation place \\(P\\) connected places odd number bridges. one bridge crossed , place \\(P\\) — either beginning end journey. three bridges crossed , place \\(P\\) visited twice matter started. five bridges, place \\(P\\) visited three times. \\(n\\) bridges, place \\(P\\) visited \\((n+1)/2\\) times.Now Euler calculated many place visits mean total Königsberg. Since Kneiphof five bridges places, crossed Kneiphof visited 3 times. three places three bridges connecting , walk result 2 visits place. Adding , means walk existed four places every bridge used , must nine total place visits. Since contradicts Euler’s earlier observation walk must involve eight place visits, must conclude walk exist.Euler’s proof first time graph like one Interactive Figure 1.2 used solve problem. solution also involved concepts later become critical study graphs. Euler set places vertices nodes graph set bridges edges. proof depends conclusion number edges connected vertex, later became known degree vertex. proof required study walks paths graph. requirement walk use edge became known Euler walk (Eulerian path) various algorithms exist today calculate Euler walks problems constructing DNA sequences fragments2. Little Euler know Pandora’s Box opened.Thinking ahead: know load graph object R Python, try load koenigsberg data set onadata package download internet3 create graph . use software calculate degrees vertices graph. example R, data loaded igraph object, can use igraph::degree() get vector showing degrees vertex. even package called eulerian R function hasEulerianPath() determines whether Euler walk exists given graph.","code":""},{"path":"everywhere.html","id":"graphs-as-mathematical-models","chapter":"1 Graphs everywhere!","heading":"1.1 Graphs as mathematical models","text":"Graphs networks existed since long Euler, probably since beginning time . exist physically, spider’s web, electrical wiring home molecules make universe. Since time Euler, graphs also existed conceptually best way can describe many complex systems, book focus use graphs describe systems related people, groups, organizations similar societal constructs. jump core topic, worth taking moments appreciate fundamental graphs science everyday life discussing examples practical use graphs solve problems.Whenever objects move physically network structure, makes sense graph theory great use solving problems routing optimization. obvious example whenever route planned Google Apple Maps, SatNav system. search driving route given destination, underlying calculation involves streets roads edges intersections vertices. fastest routes calculated based stored properties edges road length, road speed limit live traffic information. underlying graphs updated time edges switched according information road closures4. doesn’t just road networks course. Rail, air forms transport networks make great use graph theory. Maybe sitting train reading book, look around route map ’ll see graph right . Essential public services management sewerage networks example one less glamorous fields graph theory essential operational calculations decisions. sudden cold snap city roads need de-iced, problem get around city efficient way, saving resources minimizing route still covering critical areas sounds like puzzle Euler loved.Nowadays, objects move networks often electronic nature, bytes code electrical currents. National local power grids managed help graph theory. Communications networks, telephone, satellite, cable internet networks nodes connection points junctions receiver points edges can visible form underground undersea cables invisible form signals sent air space.sciences, graphs essential models biological, chemical physical processes phenomena. Chemical Graph Theory (CGT) deals applications graph theory molecular problems. condensed matter physics, graph theory essential quantitatively modeling atomic structures. biology biochemistry, graphs important understanding study spread disease epidemic models, study genomics DNA, neuroscientific modeling brain functioning ecological modeling species migration. computational sciences, huge progress made storing data thanks databases graph-like structure, many latest algorithms used Machine Learning operate graph-like structures like trees neural networks. linguistics, graphs facilitated great advances study natural language study discrete words phrases related . list goes .Arguably, area graphs impacted daily lives recent decades development online communities depend . Social networks like Facebook, Twitter, LinkedIn, Instagram many others use graphs connect people ways fundamentally changed lives livelihoods. Friendships acquaintances happen today people never often never meet physically. Countless relationships, marriages families brought existence. Long lost families separated adoption abandonment found . Job opportunities created filled. Individuals common interests connected irrelevant located. positives negatives rapid paradigm-shifting rise social networking vigorously debated, denied exist without graph theory.","code":""},{"path":"everywhere.html","id":"graph-theory-in-the-analysis-of-people-and-groups","chapter":"1 Graphs everywhere!","heading":"1.2 Graph theory in the analysis of people and groups","text":"social sciences study people groups, increasing prevalence network data ability analyze using graph-theoretic methods opened rich continuously developing veins research encompass academic enterprise settings. Much work done can grouped different study areas.","code":""},{"path":"everywhere.html","id":"the-study-of-connection","chapter":"1 Graphs everywhere!","heading":"1.2.1 The study of connection","text":"organizations, institutions societal groups, connection considered critical facilitator happiness, motivation, productivity progress. psychological concept belongingness, describes human need connect, affiliate accepted others, important element Maslow’s Hierarchy Needs. Empirically, greater social connection associated positive effects mental physical health, cognitive functioning, life expectancy even wound healing (Julianne Holt-Lunstad (2018)). Conversely, lack connection — loneliness — research interest potential negative effects mental wellbeing, productivity workplace performance. meta-analytic review relationship social relationships mortality risk concluded lack social connection carries higher risk premature mortality obesity (J. Holt-Lunstad et al. (2015)). workplace settings, economic, sociology psychology practitioners academics showing increasing amount interest connection affects performance, productivity employee retention. Empirical research demonstrated links friendship work improved work engagement productivity (Rath (2006)), social interaction work (whether work-related otherwise) associated improved outcomes (Olguin et al. (2009)).ability analyse connection workplace society--large become increasingly important move 21st century. variety data represent connection expanding. Connection people can now defined -person interaction, electronic transaction even assumed connection overlaps geographic location work personal activities. Strong analytic techniques necessary support evidence-based practice, measures connection meaningful outcomes researched , even shown meaningful, resulting interventions always expected effects (example, study Feld Carter (1998) demonstrated deliberate attempts increase interracial contact American schools actually ended causing greater racial segregation).","code":""},{"path":"everywhere.html","id":"the-study-of-information-flow","chapter":"1 Graphs everywhere!","heading":"1.2.2 The study of information flow","text":"Communication information people fundamentally transformed digital age. potential reach speed transmission massively enabled technology past two decades. General fascination messages can sent networks date earliest chain letters late 19th century (Solly (2020)), us old enough may remember receiving letters mail asking send message onward specified number individuals, promising generate thousands replies within weeks. Figure 1.3 example one used way generate money Texas 1935.\nFigure 1.3: Chain letter Texas 1935 (credit: Daniel W. VanArsdale)\nstudy propagation messages networks expanded greatly digital age, many purposes ranging studying emergency alert strategies prevention fraudulent activities defense messaging threatens public health course criminal justice. Although area research still infancy, models dissimilar used biology epidemiology employed (example Hafnaoui, Nicolescu, Beltrame (2019)). likelihood messages propagating can depend characteristics network, nature message node propagating (popularity, credibility), receptiveness onward nodes message. term ‘viral’ entered lexicon describe rapid electronic message propagation last decade . effect message propagation development networks also great research interest - example, nature frequency message propagation leads rapid network growth?Research nature mostly currently confined academics working social media data, become increasing interest workplace. increasingly distributed workforce lower levels geographic concentration mean organizations need effectively manage important, urgent time-sensitive communication workforce require greater intelligence messages effectively propagate specific environments.","code":""},{"path":"everywhere.html","id":"the-study-of-community-diversity-and-familiarity","chapter":"1 Graphs everywhere!","heading":"1.2.3 The study of community, diversity and familiarity","text":"Distance network — define precisely later chapters — can representative likely familiarity individuals, allows mathematical models support study community diversity. Algorithms calculating distance diameter network help determine ‘tight’ groups allows measurement inter- intra-group interaction. Community detection algorithms involve graph partitioning help identify ‘pockets’ highly connected individuals large networks. great interest field sociology, also applications areas study common purchasing behaviors among customers, study common interests among academics writers (Lu, Wahlström, Nehorai (2018)).Increasing focus diversity positive influencer organizational outcomes recent years means ability measure distance identify community structures networks high utility, particularly complex organizational structures. Use cases can range highly strategic questions organizational design highly tactical questions meeting attendance group membership. Current trends away physical co-location employees rise virtual organizational structures likely result greater requirements analysis remote electronic interaction order determine whether imposed structures genuinely reflect way people work. Effective use techniques can even valuable co-ordination large professional social events, subgroups can identified maximize intra-group distance order better ensure diverse mix employees professional social activities.","code":""},{"path":"everywhere.html","id":"the-study-of-importance-influence-and-attachment","chapter":"1 Graphs everywhere!","heading":"1.2.4 The study of importance, influence and attachment","text":"concept vertex/node importance centrality fundamental tenet graph theory long time, rise social networks seems turbo-charged relevance research analytics. rise ‘influencer’ highly connected influential member network entered deeply social consciousness past decade, study followership generated forming attachments members networks one rich veins sociological research currently. idea preferential attachment Matthew Effect describes accumulated advantage time, attachment attract yet more5. believed social networks show similar properties scale-free networks obey power law distribution degree vertices/nodes - see Figure 1.46. fact, recent research indicates scale-free networks exist rarely social networks best weakly scale-free (Broido Clauset (2019)).\nFigure 1.4: Power law distribution node degrees scale-free network \\(\\alpha = 2\\), showing small number high degree vertices long tail vertices low degree\ncourse, organization, institution place work can considered social network individuals command greater less attachment according tenure, seniority, skills general popularity. Understanding organizational context can lead insights leadership followership, can help contribute broader work understanding influence followership recruitment attrition. Different types centrality degree, betweenness closeness centrality can imply different roles individuals terms importance overall community.Thinking ahead: know , load graph Zachary’s Karate Club via onadata package downloading edgelist internet7. See can find functions calculate degree centrality, betweenness centrality, closeness centrality eigenvector centrality various individuals network. compare results discover centrality can mean different things depending define .","code":""},{"path":"everywhere.html","id":"graphs-as-data-sources","chapter":"1 Graphs everywhere!","heading":"1.2.5 Graphs as data sources","text":"use cases network analytics mature, organizations seek understand networks better, traditional rectangular-style databases become increasingly challenging work . Consider desire analyze whether two salespeople organization connected serving customer month. Depending data currently stored systems, easily end lot complicated computationally expensive needs . Sales records may need joined customer records may need rejoined back sales data. may need done repeatedly eventually obtain required view data. Traditional rectangular databases stored keep records transactions, connections.Many organizations turning graph databases store data relationship connections allow much faster query calculation whenever unit analysis connection. graph database designed store information connected objects like people organizational units vertices, information relationships edges. databases suit data already comes form graph edgelist information communication interaction, uncommon also transform forms data loaded graph database order query relationships rather transactions data — look examples Chapter 5. Social media engines many knowledge based resources like Wikipedia supported graph databases, sorts databases also becoming commonly found enterprise settings. helped solve high-profile problems. example, International Consortium Investigative Journalists (ICIJ) used graph database load document metadata Panama Papers document leak, stored format metadata exposed various complex networks offshore tax arrangements.topics mentioned come greater lesser degree content book, time time even diversions use cases outside people analytics domain order help illustrate broader applications methods. book intended technical manual work philosophy, coming entire topic point view methodology focusing . said, examples use clearly point motivation analysis methodology can useful practice. progress technical material work examples chapter chapter, expect enthusiastic readers quickly grasp potential application methods work study.","code":""},{"path":"everywhere.html","id":"the-purpose-structure-and-organization-of-this-book","chapter":"1 Graphs everywhere!","heading":"1.3 The purpose, structure and organization of this book","text":"book targeted technical practitioners need thorough grounding storage, visualization analysis network data. requires elementary knowledge R Python programming languages. first foremost R programmer, content book primarily demonstrated R, efforts made ensure Python implementations demonstrated wherever possible, albeit briefly places. Python programmer, recommend open reading sections use R code often help build better understanding work thorough descriptions discussions contained therein. never programmed , included Chapter 2 brief introductory tutorial R programming language, similar introductory chapter previous book (McNulty (2021)) made good work , need look Chapter 2 can proceed past .technical practitioner, book can still useful contains considerable detail concepts, methods use cases related network analytics organizations, gives guidance interpretation network analysis statistics. just need willing tolerate various code blocks appear part technical instruction.Various downloadable data sets used throughout book, cases point sources data outside book interested exploration, particularly large network data. chapters end set discussion questions data exercises strongly encourage reader engage order put learning practice. Often, taking exercises readers discover common pitfalls working graph data structures, better learn pitfalls now find situation higher stakes urgent.chapter one following can considered preliminary. Chapter 3 onwards, book takes following structure:Chapter 3 introduces simple elements graph theory including define graph, various types graphs, vertex edge properties ways graph can described mathematically. proceeds demonstrate create graph objects R Python start working .Chapter 3 introduces simple elements graph theory including define graph, various types graphs, vertex edge properties ways graph can described mathematically. proceeds demonstrate create graph objects R Python start working .Chapter 4 looks various options visualize graphs R Python. goes variety technical options static dynamic visualizations graphs customize appearance graphs various purposes.Chapter 4 looks various options visualize graphs R Python. goes variety technical options static dynamic visualizations graphs customize appearance graphs various purposes.Chapter 5 looks data can transformed used graph structure, often important element making graphs useful analysis. Two important examples used illustrate transform rectangular data edgelist graph scrape document information use graphs.Chapter 5 looks data can transformed used graph structure, often important element making graphs useful analysis. Two important examples used illustrate transform rectangular data edgelist graph scrape document information use graphs.Chapter 6 examines topic paths distance graphs, introduces related concepts graph diameter, demonstrates common methods Dijkstra’s shortest path algorithm.Chapter 6 examines topic paths distance graphs, introduces related concepts graph diameter, demonstrates common methods Dijkstra’s shortest path algorithm.Chapter 7 examines topic vertex importance centrality graphs. discusses different types centrality meaning usefulness network analytics context, shows various methods calculating graphically illustrating centrality graphs.Chapter 7 examines topic vertex importance centrality graphs. discusses different types centrality meaning usefulness network analytics context, shows various methods calculating graphically illustrating centrality graphs.Chapter 8 looks community detection. covers various options identify communities graphs, describe communities illustrate effectively.Chapter 8 looks community detection. covers various options identify communities graphs, describe communities illustrate effectively.Chapter 9 deep dives common statistics used analyzing networks, particular related similarity, assortativity attachment.Chapter 9 deep dives common statistics used analyzing networks, particular related similarity, assortativity attachment.Chapter 10 introduces concept graphs databases provides examples design use graph databases purpose network analytics. can considered extension chapter interested.Chapter 10 introduces concept graphs databases provides examples design use graph databases purpose network analytics. can considered extension chapter interested.Chapter 11 demonstrates advanced visualization options graphs using Javascript D3 library combination work done earlier book. can also considered extension chapter interested.Chapter 11 demonstrates advanced visualization options graphs using Javascript D3 library combination work done earlier book. can also considered extension chapter interested.","code":""},{"path":"r-intro.html","id":"r-intro","chapter":"2 The Basics of the R Programming Language","heading":"2 The Basics of the R Programming Language","text":"work book implemented R statistical programming language , along Python, one two languages use day--day statistical analysis. Sample implementations Python also provided various points book. wish follow method theory without implementations book, need read chapter. However, style book use implementation illustrate theory practice, tolerance many code blocks necessary read onward.wish simply replicate work quickly possible, able avail code block copying feature, appears whenever scroll input code block. Assuming required external packages installed, code blocks transportable immediately usable. parts book used graphics illustrate concept hidden underlying code consider important learning objectives point. Nevertheless want see , one best place go Github repository book.chapter wish learn methods book know use programming language. However, intended full tutorial R. many qualified individuals existing resources better serve purpose—particular recommend Wickham Grolemund (2016). recommended consult resources become comfortable basics R proceeding later chapters book. However, acknowledging many want dive sooner rather later, chapter covers absolute basics R allow uninitiated reader proceed least orientation.","code":""},{"path":"r-intro.html","id":"what-is-r","chapter":"2 The Basics of the R Programming Language","heading":"2.1 What is R?","text":"R programming language originally developed statisticians, recent years capabilities environments used expanded greatly, extensive use nowadays academia public private sectors. many advantages using programming language like R. :completely free open source.faster efficient memory popular graphical user interface analytics tools.facilitates easier replication analysis person person compared many alternatives.large growing global community active users.large rapidly growing universe packages, free provide ability extremely wide range general highly specialized tasks, statistical otherwise.often heated debate tools better non-trivial statistical analysis. personally find R provides widest array resources interested statistical modeling, Python better general-purpose toolkit particularly well kitted machine learning applications.","code":""},{"path":"r-intro.html","id":"how-to-start-using-r","chapter":"2 The Basics of the R Programming Language","heading":"2.2 How to start using R","text":"Just like programming languages, R interpreter receives input returns output. easy use without IDE. IDE Integrated Development Environment, convenient user interface allowing R programmer main tasks including writing running R code, saving files, viewing data plots, integrating code documents many things. far popular IDE R RStudio. example RStudio IDE looks like can seen Figure 2.1.\nFigure 2.1: RStudio IDE\nstart using R, follow steps:Download install latest version R https://www.r-project.org/. Ensure version suits operating system.Download latest version RStudio IDE https://rstudio.com/products/rstudio/ view video page familiarize features.Open RStudio play around.initial stages using R can challenging, mostly due need become familiar R understands, stores processes data. Extensive trial error learning necessity. Perseverance important early stages, well openness seek help others either person via online forums.","code":""},{"path":"r-intro.html","id":"data-in-r","chapter":"2 The Basics of the R Programming Language","heading":"2.3 Data in R","text":"start tasks involving data R, generally want store things create can refer later. Simply calculating something store R. example, simple calculation like can performed easily:However, soon calculation complete, forgotten R result hasn’t assigned anywhere. store something R session, assign name using <- operator. can assign previous calculation object called my_sum, allows access value time.see can comment code simply adding # start line ensure line ignored interpreter.Note assignment object result value displayed. display value, name object must typed, print() command used command wrapped parentheses.","code":"\n3 + 3## [1] 6\n# store the result\nmy_sum <- 3 + 3\n# now I can work with it\nmy_sum + 3## [1] 9\n# show me the value of my_sum\nmy_sum## [1] 6\n# assign my_sum + 3 to new_sum and show its value\n(new_sum <- my_sum + 3)## [1] 9"},{"path":"r-intro.html","id":"data-types","chapter":"2 The Basics of the R Programming Language","heading":"2.3.1 Data types","text":"data R associated type, reflect wide range data R able work . typeof() function can used see type single scalar value. Let’s look common scalar data types.Numeric data can integer form double (decimal) form.Character data text data surrounded single double quotes.Logical data takes form TRUE FALSE.","code":"\n# integers can be signified by adding an 'L' to the end\nmy_integer <- 1L  \nmy_double <- 6.38\ntypeof(my_integer)## [1] \"integer\"\ntypeof(my_double)## [1] \"double\"\nmy_character <- \"THIS IS TEXT\"\ntypeof(my_character)## [1] \"character\"\nmy_logical <- TRUE\ntypeof(my_logical)## [1] \"logical\""},{"path":"r-intro.html","id":"homogeneous-data-structures","chapter":"2 The Basics of the R Programming Language","heading":"2.3.2 Homogeneous data structures","text":"Vectors one-dimensional structures containing data type notated using c(). type vector can also viewed using typeof() function, str() function can used display contents vector type.Categorical data—takes finite number possible values—can stored factor vector make easier perform grouping manipulation.needed, factors can given order.number elements vector can seen using length() function.Simple numeric sequence vectors can created using shorthand notation.try mix data types inside vector, usually result type coercion, one types forced different type ensure homogeneity. Often means vector become character vector.sometimes logical factor types coerced numeric.Matrices two-dimensional data structures type built vector defining number rows columns. Data read matrix columns, starting left moving right. Matrices rarely used non-numeric data types.Arrays n-dimensional data structures data type used extensively R users.","code":"\nmy_double_vector <- c(2.3, 6.8, 4.5, 65, 6)\nstr(my_double_vector)##  num [1:5] 2.3 6.8 4.5 65 6\ncategories <- factor(\n  c(\"A\", \"B\", \"C\", \"A\", \"C\")\n)\nstr(categories)##  Factor w/ 3 levels \"A\",\"B\",\"C\": 1 2 3 1 3\n# character vector \nranking <- c(\"Medium\", \"High\", \"Low\")\nstr(ranking)##  chr [1:3] \"Medium\" \"High\" \"Low\"\n# turn it into an ordered factor\nranking_factors <- ordered(\n  ranking, levels = c(\"Low\", \"Medium\", \"High\")\n)\nstr(ranking_factors)##  Ord.factor w/ 3 levels \"Low\"<\"Medium\"<..: 2 3 1\nlength(categories)## [1] 5\n(my_sequence <- 1:10)##  [1]  1  2  3  4  5  6  7  8  9 10\n# numeric sequence vector\nvec <- 1:5\nstr(vec)##  int [1:5] 1 2 3 4 5\n# create a new vector containing vec and the character \"hello\"\nnew_vec <- c(vec, \"hello\")\n# numeric values have been coerced into their character equivalents\nstr(new_vec)##  chr [1:6] \"1\" \"2\" \"3\" \"4\" \"5\" \"hello\"\n# attempt a mixed logical and numeric\nmix <- c(TRUE, 6)\n# logical has been converted to binary numeric (TRUE = 1)\nstr(mix)##  num [1:2] 1 6\n# try to add a numeric to our previous categories factor vector\nnew_categories <- c(categories, 1)\n# categories have been coerced to background integer representations\nstr(new_categories)##  num [1:6] 1 2 3 1 3 1\n# create a 2x2 matrix with the first four integers\n(m <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4"},{"path":"r-intro.html","id":"heterogeneous-data-structures","chapter":"2 The Basics of the R Programming Language","heading":"2.3.3 Heterogeneous data structures","text":"Lists one-dimensional data structures can take data type.List elements can data type dimension. element can given name.Named list elements can accessed using $.Dataframes used data structure R; effectively named list vectors length, vector column. , dataframe similar nature typical database table spreadsheet.","code":"\nmy_list <- list(6, TRUE, \"hello\")\nstr(my_list)## List of 3\n##  $ : num 6\n##  $ : logi TRUE\n##  $ : chr \"hello\"\nnew_list <- list(\n  scalar = 6, \n  vector = c(\"Hello\", \"Goodbye\"), \n  matrix = matrix(1:4, nrow = 2, ncol = 2)\n)\nstr(new_list)## List of 3\n##  $ scalar: num 6\n##  $ vector: chr [1:2] \"Hello\" \"Goodbye\"\n##  $ matrix: int [1:2, 1:2] 1 2 3 4\nnew_list$matrix##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\n# two vectors of different types but same length\nnames <- c(\"John\", \"Ayesha\")\nages <- c(31, 24)\n# create a dataframe\n(df <- data.frame(names, ages))##    names ages\n## 1   John   31\n## 2 Ayesha   24\n# get types of columns\nstr(df)## 'data.frame':    2 obs. of  2 variables:\n##  $ names: chr  \"John\" \"Ayesha\"\n##  $ ages : num  31 24\n# get dimensions of df\ndim(df)## [1] 2 2"},{"path":"r-intro.html","id":"working-with-dataframes","chapter":"2 The Basics of the R Programming Language","heading":"2.4 Working with dataframes","text":"dataframe common data structure used analysts R, due similarity data tables found databases spreadsheets. work dataframes lot book, let’s get know .","code":""},{"path":"r-intro.html","id":"loading-and-tidying-data-in-dataframes","chapter":"2 The Basics of the R Programming Language","heading":"2.4.1 Loading and tidying data in dataframes","text":"work data R, usually need pull outside source dataframe8. R facilitates numerous ways importing data simple .csv files, Excel files, online sources databases. Let’s load data set use later—chinook_employees data set, contains information employees sales company. read.csv() function can accept URL address file online.might want display entire data set knowing big . can view dimensions, big display, can use head() function display just first rows.can view specific column using $, can use square brackets view specific entry. example wanted see 6th entry LastName column:Alternatively, can use [row, column] index get specific entry dataframe.can take look data types using str().can also see statistical summary column using summary(), tells us various statistics depending type column.Missing data R identified special NA value. confused \"NA\", simply character string. function .na() look values vector dataframe return TRUE FALSE based whether NA . adding using sum() function, take TRUE 1 FALSE 0, effectively provides count missing data.cases, might want remove rows data contain NAs. easiest way use complete.cases() function, identifies rows NAs, can select rows dataframe based condition. Note can overwrite objects name R.can see unique values vector column using unique() function.need change type column dataframe, can use .numeric(), .character(), .logical() .factor() functions. example, given seven unique values FirstName column chinook_employees, may want convert current character form factor.","code":"\n# url of data set \nurl <- \"https://ona-book.org/data/chinook_employees.csv\"\n# load the data set and store it as a dataframe called workfrance_edges\nchinook_employees <- read.csv(url)\ndim(chinook_employees)## [1] 8 4\n# eight rows, lets view first six\nhead(chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 1          1    Andrew    Adams        NA\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n## 6          6   Michael Mitchell         1\nchinook_employees$LastName[6]## [1] \"Mitchell\"\nchinook_employees[4, 3]## [1] \"Park\"\nstr(chinook_employees)## 'data.frame':    8 obs. of  4 variables:\n##  $ EmployeeId: int  1 2 3 4 5 6 7 8\n##  $ FirstName : chr  \"Andrew\" \"Nancy\" \"Jane\" \"Margaret\" ...\n##  $ LastName  : chr  \"Adams\" \"Edwards\" \"Peacock\" \"Park\" ...\n##  $ ReportsTo : int  NA 1 2 2 2 1 6 6\nsummary(chinook_employees)##    EmployeeId    FirstName           LastName           ReportsTo    \n##  Min.   :1.00   Length:8           Length:8           Min.   :1.000  \n##  1st Qu.:2.75   Class :character   Class :character   1st Qu.:1.500  \n##  Median :4.50   Mode  :character   Mode  :character   Median :2.000  \n##  Mean   :4.50                                         Mean   :2.857  \n##  3rd Qu.:6.25                                         3rd Qu.:4.000  \n##  Max.   :8.00                                         Max.   :6.000  \n##                                                       NA's   :1\nsum(is.na(chinook_employees))## [1] 1\n# remove rows containing an NAs\nchinook_employees <- chinook_employees[complete.cases(chinook_employees), ]\n\n# confirm no NAs\nsum(is.na(chinook_employees))## [1] 0\nunique(chinook_employees$FirstName)## [1] \"Nancy\"    \"Jane\"     \"Margaret\" \"Steve\"    \"Michael\"  \"Robert\"   \"Laura\"\nchinook_employees$FirstName <- as.factor(chinook_employees$FirstName)\nstr(chinook_employees)## 'data.frame':    7 obs. of  4 variables:\n##  $ EmployeeId: int  2 3 4 5 6 7 8\n##  $ FirstName : Factor w/ 7 levels \"Jane\",\"Laura\",..: 5 1 3 7 4 6 2\n##  $ LastName  : chr  \"Edwards\" \"Peacock\" \"Park\" \"Johnson\" ...\n##  $ ReportsTo : int  1 2 2 2 1 6 6"},{"path":"r-intro.html","id":"manipulating-dataframes","chapter":"2 The Basics of the R Programming Language","heading":"2.4.2 Manipulating dataframes","text":"Dataframes can subsetted contain rows satisfy specific conditions.Note use ==, used many programming languages, test precise equality. Similarly can select columns based inequalities (> ‘greater ’‍, < ‘less ’‍, >= ‘greater equal ’‍, <= ‘less equal ’‍, != ‘equal ’). example:select specific columns use select argument.Two dataframes column names can combined rows.Two dataframes different column names can combined columns.","code":"\n(chinook_employee_5 <- subset(chinook_employees, subset = EmployeeId == 5))##   EmployeeId FirstName LastName ReportsTo\n## 5          5     Steve  Johnson         2\n(chinook_employees_upto5 <- subset(chinook_employees, \n                                   subset = EmployeeId <= 5))##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n(chinook_employee_names <- subset(chinook_employees, \n                                 select = c(\"FirstName\", \"LastName\")))##   FirstName LastName\n## 2     Nancy  Edwards\n## 3      Jane  Peacock\n## 4  Margaret     Park\n## 5     Steve  Johnson\n## 6   Michael Mitchell\n## 7    Robert     King\n## 8     Laura Callahan\nchinook_employee_7 <- subset(chinook_employees, subset =EmployeeId == 7)\n\n# bind the rows to chinook_employee_5\n(chinook_employee_5and7 = rbind(chinook_employee_5, chinook_employee_7))##   EmployeeId FirstName LastName ReportsTo\n## 5          5     Steve  Johnson         2\n## 7          7    Robert     King         6\nchinook_reporting <- subset(chinook_employees, \n                     select = c(\"EmployeeId\", \"ReportsTo\"))\n\n# bind the columns to chinook_employee_names\n(full_df <- cbind(chinook_reporting, chinook_employee_names))##   EmployeeId ReportsTo FirstName LastName\n## 2          2         1     Nancy  Edwards\n## 3          3         2      Jane  Peacock\n## 4          4         2  Margaret     Park\n## 5          5         2     Steve  Johnson\n## 6          6         1   Michael Mitchell\n## 7          7         6    Robert     King\n## 8          8         6     Laura Callahan"},{"path":"r-intro.html","id":"functions-packages-and-libraries","chapter":"2 The Basics of the R Programming Language","heading":"2.5 Functions, packages and libraries","text":"code far used variety functions. example head(), subset(), rbind(). Functions operations take certain defined inputs return output. Functions exist perform common useful operations.","code":""},{"path":"r-intro.html","id":"using-functions","chapter":"2 The Basics of the R Programming Language","heading":"2.5.1 Using functions","text":"Functions usually take one arguments. Often large number arguments function can take, many optional required specified user. example, function head(), displays first rows dataframe9, one required argument x: name dataframe. second argument optional, n: number rows display. n entered, assumed default value n = 6.running function, can either specify arguments name can enter order without names. enter arguments without naming , R expects arguments entered exactly right order.","code":"\n# see the head of chinook_employees, with the default of six rows\nhead(chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n## 6          6   Michael Mitchell         1\n## 7          7    Robert     King         6\n# see fewer rows - arguments need to be in the right order if not named\nhead(chinook_employees, 3)##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n# or if you don't know the right order, \n# name your arguments and you can put them in any order\nhead(n = 3, x = chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2"},{"path":"r-intro.html","id":"help-with-functions","chapter":"2 The Basics of the R Programming Language","heading":"2.5.2 Help with functions","text":"functions R excellent help documentation. get help head() function, type help(head) ?head. display results Help browser window RStudio. Alternatively can open Help browser window directly RStudio search . example browser results head() Figure 2.2.\nFigure 2.2: Results search head() function RStudio Help browser\nhelp page normally shows following:Description purpose functionUsage examples, can quickly see usedArguments list can see names order argumentsDetails notes considerations useExpected value output (example head() expected return similar object first input x)Examples help orient (sometimes examples can abstract nature helpful users)","code":""},{"path":"r-intro.html","id":"writing-your-own-functions","chapter":"2 The Basics of the R Programming Language","heading":"2.5.3 Writing your own functions","text":"Functions limited come packaged R. Users can write functions perform tasks helpful objectives. Experienced programmers languages subscribe principle called DRY (Don’t Repeat ). Whenever task needs done repeatedly, poor practice write code numerous times. makes sense write function task.example, simple function written generates report dataframe:can test function using chinook_employees data set (remember removed row containing NA value earlier).","code":"\n# create df_report function\ndf_report <- function(df) {\n  paste(\"This dataframe contains\", nrow(df), \"rows and\", \n        ncol(df), \"columns. There are\", sum(is.na(df)), \"NA entries.\")\n}\ndf_report(chinook_employees)## [1] \"This dataframe contains 7 rows and 4 columns. There are 0 NA entries.\""},{"path":"r-intro.html","id":"installing-packages","chapter":"2 The Basics of the R Programming Language","heading":"2.5.4 Installing packages","text":"common functions used far exist base R installation. However, beauty open source languages like R users can write functions resources release others via packages. package additional module can installed easily; makes resources available base R installation. book using functions base R popular useful packages. example, fundamental package use book igraph package constructing analyzing graphs.external package can used, must installed package library using install.packages(). install igraph, type install.packages(\"igraph\") console. send R main internet repository R packages (known CRAN). find right version igraph operating system download install package library. igraph needs packages order work, also install packages.want install one package, put names packages inside character vector—example:installed package, can see functions available calling help , example using help(package = igraph). One package may wish install now onadata package, contains data sets used book. installing loading package, data sets used book loaded R session ready work . , can ignore read.csv() commands later book, download data internet.","code":"\nmy_packages <- c(\"igraph\", \"ggraph\")\ninstall.packages(my_packages)"},{"path":"r-intro.html","id":"using-packages","chapter":"2 The Basics of the R Programming Language","heading":"2.5.5 Using packages","text":"installed package package library, use R session need load using library() function. example, load igraph installing , use library(igraph). Often nothing happen use command, rest assured package loaded can start use functions inside . Sometimes load package series messages display, usually make aware certain things need keep mind using package. Note whenever see library() command book, assumed already installed package command. , library() command fail.package loaded library, can use functions inside . example, degree() function available load igraph package becomes available loaded. sense, functions ‘belong’ packages.Problems can occur load packages contain functions name functions already exist R session. Often messages see loading package alert . R faced situation function exists multiple packages loaded, R always defaults function recently loaded package. may always intended.One way completely avoid issue get habit namespacing functions. namespace, simply use package::function(), safely call degree() igraph, use igraph::degree(). time book function called package outside base R, use namespacing call function. help avoid confusion packages used functions.","code":""},{"path":"r-intro.html","id":"the-pipe-operator","chapter":"2 The Basics of the R Programming Language","heading":"2.5.6 The pipe operator","text":"Even elementary briefing R, difficult ignore pipe operator. pipe operator makes code natural read write reduces typical computing problem many nested operations inside parentheses.example, imagine wanted following two operations one command:Subset chinook_employees LastName values EmployeeId less 5Convert names upper case characters.Rememering already removed rows NA values chinook_employees, one way :nested needs read inside order align instructions. pipe operator |> takes command comes places inside function follows (first unnamed argument). reduces complexity allows follow logic clearly.pipe operator widely used helps make code readable, reduces complexity, helps orient around common ‘grammar’ manipulation data. pipe operator helps structure code clearly around nouns (objects), verbs (functions) adverbs (arguments functions). One developed sets packages R follows principles tidyverse family packages, encourage explore10.","code":"\ntoupper(subset(chinook_employees$LastName, \n               subset = chinook_employees$EmployeeId < 5))## [1] \"EDWARDS\" \"PEACOCK\" \"PARK\"\n# use the pipe operator to lay out the steps more logically\nchinook_employees$LastName |> \n  subset(subset = chinook_employees$EmployeeId < 5) |> \n  toupper() ## [1] \"EDWARDS\" \"PEACOCK\" \"PARK\""},{"path":"r-intro.html","id":"errors-warnings-and-messages","chapter":"2 The Basics of the R Programming Language","heading":"2.6 Errors, warnings and messages","text":"mentioned earlier chapter, getting familiar R can frustrating beginning never programmed . can expect regularly see messages, warnings errors response commands. encourage regard friend rather enemy. tempting take latter approach starting , time hope appreciate wisdom words.Errors serious problems usually result halting code failure return requested output. usually come indication source error, can sometimes easy understand sometimes frustratingly vague abstract. example, easy--understand error :helps see used EmployeeId = 5 condition subset data, used EmployeeId == 5 precise equality.much challenging error understand :first faced error can’t understand, try get frustrated proceed knowledge usually can fixed easily quickly. Often problem much obvious think, , still 99% likelihood others made error can read online. first step take look code see can spot wrong. case, may see used square brackets [] instead parentheses () calling head() function. see wrong, next step ask colleague internet search text error message receive, consult online forums like https://stackoverflow.com. experienced become, easier interpret error messages.Warnings less serious usually alert something might overlooking indicate problem output. many cases can ignore warnings, sometimes important reminder go back edit code. example, may run model doesn’t converge, stop R returning results, also useful know didn’t converge.Messages pieces information may may useful particular point time. Sometimes receive messages load package library. Sometimes messages keep date progress process taking long time execute.","code":"subset(chinook_employees, subset = EmployeeId = 5)Error: unexpected '=' in \"subset(salespeople, subset = sales =\"\nhead[chinook_employees]Error in head[salespeople] : object of type 'closure' is not subsettable"},{"path":"r-intro.html","id":"plotting-and-graphing","chapter":"2 The Basics of the R Programming Language","heading":"2.7 Plotting and graphing","text":"might expect well-developed programming language, numerous ways plot graph information R. exploratory data analysis fairly simple data don’t need worry pretty appearance formatting, built-plot capabilities base R fine. need pretty appearance, precision, color coding even 3D graphics animation, also specialized plotting graphing packages purposes. general working interactively RStudio, graphical output rendered Plots pane, can copy save image.","code":""},{"path":"r-intro.html","id":"plotting-in-base-r","chapter":"2 The Basics of the R Programming Language","heading":"2.7.1 Plotting in base R","text":"simplest plot function base R plot(). performs basic X-Y plotting. example, code generate scatter plot Ozone Temp built-airquality data set R, results displayed Figure 2.3. Note use arguments main, xlab ylab customizing axis labels title plot.\nFigure 2.3: Simple scatterplot Ozone Temp airquality data set\nHistograms data can generated using hist() function. command generate histogram Ozone displayed Figure 2.4. Note use breaks customize bars appear.\nFigure 2.4: Simple histogram Ozone airquality data set\nBox whisker plots excellent ways see distribution variable, can grouped another variable see bivariate patterns. example, command show box whisker plot Ozone grouped Month, output shown Figure 2.5. Note use formula data notation define variable interested want grouped.\nFigure 2.5: Simple box plot Ozone grouped Month airquality data set\namong common plots used data exploration purposes. examples wider range plotting graphing functions available base R, line plots, bar plots varieties may see later book.","code":"\n# scatter plot of ozone against temp\nplot(x = airquality$Temp, y = airquality$Ozone,\n     xlab = \"Temperature (F)\", ylab = \"Ozone\",\n     main = \"Scatterplot of Ozone vs Temperature\")\n# histogram of ozone\nhist(airquality$Ozone, breaks = 10,\n     xlab = \"Ozone levels\", \n     main = \"Histogram of Ozone Levels\")\n# box plot of Ozone by Month\nboxplot(formula = Ozone ~ Month, data = airquality,\n        xlab = \"Month\", ylab = \"Ozone levels\",\n        main = \"Boxplot of Ozone Levels by Month\")"},{"path":"r-intro.html","id":"specialist-plotting-and-graphing-packages","chapter":"2 The Basics of the R Programming Language","heading":"2.7.2 Specialist plotting and graphing packages","text":"far commonly used specialist plotting graphing package R ggplot2. ggplot2 allows flexible construction wide range charts graphs, uses specific command grammar can take getting used . However, learned, ggplot2 can extremely powerful tool. Later book make lot references ggplot2 extension packages like ggraph. great learning resource ggplot2 Wickham (2016). examples recreate plots previous section ggplot2 using layered graphics grammar.start graphing, ggplot() function usually requires data set. can also define aesthetic mappings initial function, associate feature chart element data. aesthetic mappings inherited later commands layering. case, use airquality data set, define x y aesthetics use geom_point() draw scatter plot visual customization. also use theme command obtain preset look chart — case minimal look — customize title axis labels. result Figure 2.6.\nFigure 2.6: Simple scatter plot Ozone Temp airquality data set using ggplot2\ncreate histogram Ozone readings. use similar approach result Figure 2.7.\nFigure 2.7: Simple histogram Ozone airquality data set using ggplot2\nfinally, create box whisker plot using principles, result 2.8.\nFigure 2.8: Simple boxplot Ozone Month airquality data set using ggplot2\n","code":"\nlibrary(ggplot2)\n\n# create scatter of Ozone vs Temp in airquality data set\nggplot(data = airquality, aes(x = Temp, y = Ozone)) +\n  geom_point(color = \"pink\", shape = \"diamond\", size = 3) +\n  theme_minimal() +\n  labs(title = \"Scatterplot of Ozone vs Temperature\",\n       x = \"Temperature (F)\")\n# create histogram of Ozone\nggplot(data = airquality, aes(x = Ozone)) +\n  geom_histogram(bins = 10, fill = \"lightblue\", color = \"pink\") +\n  theme_minimal() + \n  labs(title = \"Histogram of Ozone Levels\",\n       x = \"Ozone levels\", \n       y = \"Frequency\")\n# create boxplot of Ozone by Month\nggplot(data = airquality, aes(x = Month, y = Ozone)) +\n  geom_boxplot(fill = \"lightblue\", color = \"pink\") +\n  theme_minimal() +\n  labs(title = \"Boxplot of Ozone Levels by Month\",\n       y = \"Ozone levels\")"},{"path":"r-intro.html","id":"documenting-your-work-using-r-markdown","chapter":"2 The Basics of the R Programming Language","heading":"2.8 Documenting your work using R Markdown","text":"anyone performing sort analysis using statistical programming language, appropriate documentation reproducibility work essential success longevity. code easily obtained run others, likely limited impact lifetime. Learning create integrated documents contain text code critical providing access code narration work.R Markdown package allows create integrated documents containing formatted text executed code. , opinion, one best resources available currently purpose. entire book created using R Markdown. can start R Markdown document RStudio installing rmarkdown package opening new R Markdown document file, suffix .Rmd.R Markdown documents always start particular heading type called YAML header, contains overall information document creating. Care must taken precise formatting YAML header, sensitive spacing indentation. Usually basic YAML header created RStudio start new .Rmd file. example.output part header numerous options, commonly used html_document, generates document web page, pdf_document, generates document PDF using open source LaTeX software package. wish create PDF documents need version LaTeX installed system. One R package can easily tinytex package. function install_tinytex() package install minimal version LaTeX fine purposes.R Markdown allows build formatted document using many shorthand formatting commands. examples format headings place web links images document:Code can written executed results displayed inline using backticks. example, recalling chinook_employees dataset earlier writinginline display 8 final document11. Entire code blocks can included executed using triple-backticks. following code block:display output:{} wrapping allows specify different languages code chunk. example, wanted run Python code instead R code can use {python}. also allows set options code chunk display separated commas. example, want results code displayed, without code displayed, can use {r, echo = FALSE}.process compiling R Markdown code produce document known ‘knitting.’ create knitted document, simply need click ‘Knit’ button RStudio appears R Markdown code.familiar R Markdown, strongly encourage learn alongside R challenge write practice exercises take book using R Markdown. Useful cheat sheets reference guides R Markdown formatting commands available Cheatsheets section Help menu RStudio. also recommend Xie, Dervieux, Riederer (2020) really thorough instruction reference guide.","code":"---\ntitle: \"My new document\"\nauthor: \"Keith McNulty\"\ndate: \"25/01/2021\"\noutput: html_document\n---# My top heading\nThis section is about this general topic.\n\n## My first sub heading \nTo see more information on this sub-topic visit [here](https://my.web.link).\n\n## My second sub heading\nHere is a nice picture about this sub-topic.\n![](path/to/image)`r nrow(chinook_employees)````{r}\n# show the first three rows of chinook_employees\nhead(chinook_employees, 3)\n```##   EmployeeId FirstName LastName ReportsTo\n## 1          1    Andrew    Adams        NA\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2"},{"path":"r-intro.html","id":"learning-exercises","chapter":"2 The Basics of the R Programming Language","heading":"2.9 Learning exercises","text":"","code":""},{"path":"r-intro.html","id":"discussion-questions","chapter":"2 The Basics of the R Programming Language","heading":"2.9.1 Discussion questions","text":"Describe following data types: numeric, character, logical, factor.vector known homogeneous data structure?Give example heterogeneous data structure R.difference NA \"NA\"?operator used return named elements list named columns dataframe?Describe functions used manipulate dataframes.package install use new package?Describe meant ‘namespacing’ might useful.pipe operator, popular R?difference error warning R?Name simple plotting functions base R.R Markdown, useful someone performing analysis using programming languages?","code":""},{"path":"r-intro.html","id":"data-exercises","chapter":"2 The Basics of the R Programming Language","heading":"2.9.2 Data exercises","text":"Create character vector called my_names contains first, middle last names elements. Calculate length my_names.Create second numeric vector called corresponds my_names. entries position name order full name. Verify length my_names.Create dataframe called names, consists two vectors my_names columns. Calculate dimensions names.Create new dataframe new_names column converted character type. Verify command worked using str().Load chinook_customers data set via onadata package download internet12. Calculate dimensions chinook_customers view first three rows .View statistical summary columns chinook_customers. Determine missing values.View subset chinook_customers values SupportRepId equal 3.Install load package dplyr. Look help filter() function package try use repeat task previous question.Write code find last name customer highest CustomerId SupportRepId equal 4. Count number characters last name.Familiarize two functions filter() pull() dplyr. Use functions try calculation previous question using single unbroken piped command. sure namespace necessary.Create scatter plot using built-mtcars dataset data column named mpg plotted \\(y\\) axis data column named hp plotted \\(x\\) axis.Using mtcars dataset, convert data cyl column factor three levels. Plot histogram count observations three cyl levels.Create box plot mpg grouped cyl.used base plotting functions answer questions 11-13, try answer using ggplot2 package. Experiment different themes colors.Knit answers exercises R Markdown document. Create one version displays code answers, another just displays answers.","code":""},{"path":"working.html","id":"working","chapter":"3 Working With Graphs","heading":"3 Working With Graphs","text":"think graph, usually think diagram dots lines. Indeed, seen Chapter 1 book, concept graph came existence 1700s mathematician tried solve problem diagramatically. makes sense think graphs way, intuitive, easy communicate many cases diagram helps us better address problem solving. However, diagram one way describing graph, particularly scalable. easy draw diagram graph nodes edges like Bridges Königsberg problem, problem involved thousands nodes millions edges? interesting graphs want study complex nature contain many hundreds thousands nodes many edges, diagrams graphs size always useful helping us solve problems.chapter gain basic understanding graphs construct work R Python. introduce general way describing graph mathematically, discuss different types graphs can defined placing conditions general definition. go look different options known graph can described, including edgelists adjacency matrices. Equipped understanding, learn create simple graph objects R Python. Unlike larger examples introduce later chapters, data examples use chapter simple straightforward work . focus make sure basic structures definitions understood proceeding . Readers skip chapter intend fully understand methods procedures introduced later chapters.","code":""},{"path":"working.html","id":"elementary-graph-theory","chapter":"3 Working With Graphs","heading":"3.1 Elementary Graph Theory","text":"way graphs created, stored manipulated data science languages like R Python bears strong resemblance defined studied algebraically. start section general algebraic definition graph proceed look different varieties graphs different ways representing graphs using data.","code":""},{"path":"working.html","id":"graph-def","chapter":"3 Working With Graphs","heading":"3.1.1 General definition of a graph","text":"graph \\(G\\) consists two sets. first set \\(V\\) known vertex set node set. second set \\(E\\) known edge set, consists pairs elements \\(V\\). Given graph made two sets, often notate graph \\(G = (V, E)\\). two vertices appear pair E, vertices said adjacent connected vertices.Let’s use example illustrate definition. Figure 3.1 diagram graph \\(G_{\\mathrm{work}}\\) four vertices representing four people. edge connects two vertices two people worked together.\nFigure 3.1: Four people connected according whether worked together\nvertex set \\(V\\) graph \\(G_{\\mathrm{work}}\\) :\\[\nV = \\{\\mathrm{David}, \\mathrm{Suraya}, \\mathrm{Jane}, \\mathrm{Zubin}\\}\n\\]edge set \\(E\\) graph \\(G_{\\mathrm{work}}\\) must notated pairs elements vertex set \\(V\\). can notate many ways. One example may notate edge set formal set-theoretic notation:alternative notation also used :doesn’t really matter choose notate vertex edge sets long notation contains information required construct graph.Thinking ahead: already know load graphs R Python, might want take look graph object now, see object structured defined around two set structure \\(G = (V, E)\\). example, try create graph data Bridges Königsberg problem using koenigsberg edgelist onadata package downloaded internet https://ona-data.org/data/koenigsberg.csv. Take look vertex set edge set see contain structures discussed .relationship modeling using edges graph \\(G_{\\mathrm{work}}\\) reciprocal nature. David worked Zubin, automatically conclude Zubin worked David. Therefore need direction edges \\(G_{\\mathrm{work}}\\). call graph undirected graph. undirected graph, order nodes pair edge set \\(E\\) relevant. example, \\(\\mathrm{David}\\longleftrightarrow\\mathrm{Zubin}\\) \\(\\mathrm{Zubin}\\longleftrightarrow\\mathrm{David}\\).graph direction important called directed graph. example, let’s consider graph \\(G_{\\mathrm{manage}}\\) vertex set four people edge exists two people first person manager second person, Figure 3.2.\nFigure 3.2: Four people connected according whether one person manages another\nClearly, direction matters graph, therefore may wish notate edge set \\(E\\) \\(G_{\\mathrm{manage}}\\) :\\[\nE = \\{\\mathrm{Suraya}\\longrightarrow\\mathrm{David}, \\mathrm{David}\\longrightarrow\\mathrm{Zubin}, \\mathrm{David}\\longrightarrow\\mathrm{Jane}\\}\n\\]Note still possible directed graph edges point directions. unlikely case \\(G_{\\mathrm{manage}}\\) manager relationship usually operates one direction, imagine another graph \\(G_{\\mathrm{like}}\\) edge exists two people first person listed second person someone like. perfectly possible edges exist directions two vertices graph like . example, may Jane likes Zubin Zubin likes Jane. However, important note graph, \\(\\mathrm{Zubin}\\longrightarrow\\mathrm{Jane}\\) \\(\\mathrm{Jane}\\longrightarrow\\mathrm{Zubin}\\) considered two different edges.","code":""},{"path":"working.html","id":"graph-types","chapter":"3 Working With Graphs","heading":"3.1.2 Types of graphs","text":"Equipped general definition graph, can now define different varieties graph adding allowing certain conditions edges general graph. many varieties, common graph types.multigraph graph multiple edges can occur two vertices. Usually occurs edges defining different kinds relationships. Travel routes common examples multigraphs, edge represents different carrier. example, Figure 3.3 graph flights San Francisco (SFO), Philadelphia (PHL) Tucson (TUS) airports based data set December 2010. graph layered onto map United States. Philadelphia Tucson common route offered one carrier one direction, multiple carriers operating directions Philadelphia San Francisco San Francisco Tucson.\nFigure 3.3: Carrier routes operating three US airports December 2010\nMultigraphs also commonly used individuals entities can related different ways. example, imagine combine \\(G_{\\mathrm{work}}\\) \\(G_{\\mathrm{manage}}\\) graphs Section 3.1.1 one single directed graph depicting ‘worked ’ ‘manages’ relationships. might look like Figure 3.4.\nFigure 3.4: Graph depicting different types relationships individuals\nMany large graphs used practice multigraphs, built capture many different types relationships many different types entities. example, graph organizational network might contain vertices represent individuals, organizational units knowledge areas. Multiple different types relationships exist individuals (‘worked ,’ ‘manages,’ ‘published ’), individuals organizational units (‘member ’ ‘leader ’), individuals knowledge areas (‘affiliated ’ ‘expert ’) sorts possibilities.Pseudographs graphs allow vertices connect . Pseudographs occur certain edges depict relationships can occur vertex. Imagine, example, graph \\(G_{\\mathrm{coffee}}\\) takes four characters \\(G_{\\mathrm{work}}\\) Section 3.1.1 depicts buys coffee . David goes buy Zubin coffee, ’s good chance also buy one process. Thus, can expect following edge set:\\[\nE = \\{\\mathrm{David}\\longrightarrow\\mathrm{Zubin}, \\mathrm{David}\\longrightarrow\\mathrm{David}\\}\n\\]example pseudographs frequently occur might analysis financial transactions. Let’s imagine graph three verticies representing different companies , B C, edge represent bank transfer one company another certain day. company holds multiple bank accounts, graph might look something like Figure 3.5.\nFigure 3.5: Pseudograph representing bank transfers three companies , B C\ncomplete graph graph pairs vertices connected edge. Let’s go back four characters \\(G_\\mathrm{work}\\) Section 3.1.1. may notice one pair characters worked together. Let’s assume return month later update graph, seems Zubin Suraya now worked together. means graph becomes complete graph depicted Figure 3.6.\nFigure 3.6: Updated version \\(G_\\mathrm{work}\\) one additional edge make complete graph\nComplete graphs rare useful practice, since already know relationship exists every pair vertices, lot reason examine graph put practical use. said, field Graph Theory, can important prove certain graphs complete order support important theoretical results.Bipartite graphs graphs two disjoint sets vertices, vertex one set connected vertices set. Imagine add three new individuals \\(G_\\mathrm{work}\\) graph, three individuals work completely different organization four people already graph. new graph \\(G_\\mathrm{new}\\) may look like Figure 3.7, distinct sets vertices representing individuals different organizations.\nFigure 3.7: bipartite graph showing working relationships involving individuals separate organizations B\nExtending idea bipartite graphs, \\(k\\)-partite graphs graphs \\(k\\) disjoined sets vertices, vertex one set connected vertices \\(k - 1\\) sets.Trees can regarded vertices connected edges, trees graphs. example, graph \\(G_\\mathrm{manage}\\) Section 3.1.1 tree displays hierarchical management structure individuals. graph characterized tree needs adhere conditions:undirectedThere exactly one path pair verticesUsually, trees graphs edges represent sort hierarchical nested relationship. Figure 3.8 shows tree graph favorite boy bands, edge indicates vertex member vertex . seems like five magic number great boy band.\nFigure 3.8: Membership exclusive class author’s favourite boy bands can represented tree graph\n","code":""},{"path":"working.html","id":"vertex-edge-prop","chapter":"3 Working With Graphs","heading":"3.1.3 Vertex and Edge Properties","text":"Section 3.1.1 learned graph \\(G = (V, E)\\) consists vertex set \\(V\\) edge set \\(E\\). sets minimum components graph — vertices represent entities graph edges represent relationships entities.can enhance graph provide even richer information entities relationships giving vertices edges properties. vertex property provides specific information vertex edge property provides specific information relationship two vertices.example, let’s return directed graph Figure 3.5, represents bank transfers companies , B, C. graph, know edges transfers took place, know much money involved transfer, currency transfer made. wanted capture information, give edge properties called amt cur store transfer amount currency edge properties. Similarly, don’t know great deal companies represented vertices. Maybe like know located? , can create vertex property called loc store location vertex property.Figure 3.9 shows enhanced graph vertex edge properties added diagramatically.\nFigure 3.9: Graph bank transfers companies , B C additional information stored vertex edge properties\nAlternatively, can notate properties additional sets graph, ensuring entry order respective vertices edges, follows:\\[\n\\begin{aligned}\nG &= (V, E, V_\\mathrm{loc}, E_\\mathrm{cur}, E_\\mathrm{amt}) \\\\\nV &= \\{, B, C\\} \\\\\nE &= \\{\\longrightarrow , \\longrightarrow B, B \\longrightarrow , B \\longrightarrow C\\} \\\\\nV_\\mathrm{loc} &= \\{\\mathrm{USA}, \\mathrm{UK}, \\mathrm{France}\\} \\\\\nE_\\mathrm{cur} &= \\{\\mathrm{USD}, \\mathrm{USD}, \\mathrm{GBP}, \\mathrm{GBP}\\} \\\\\nE_\\mathrm{amt} &= \\{150000, 570000, 230000, 175000\\}\n\\end{aligned}\n\\]Note vertex property set \\(V_\\mathrm{loc}\\) number elements \\(V\\) associated properties appear order vertices \\(V\\). Note also similar size order edge property sets \\(E_\\mathrm{cur}\\) \\(E_\\mathrm{amt}\\). notation system allows us provide information need reliable way number vertex edge properties.Thinking ahead: know , load graph romantic relationships TV Series Mad Men using madmen_edgelist data set onadata package downloading https://ona-book.org/data/madmen_edgelist.csv. Try create graph contains Married edge property try query graph determine relationships marriage relationships.One common edge properties come across edge weight. Weighted edges edges given numeric value represent important construct edge importance connection strength. can often used simplify otherwise complex graphs, frequently used calculations related centrality community. example, returning flights graph, instead creating edge carrier, simplify graph creating one edge per route giving weight according number carriers route. graph look like Figure 3.10.\nFigure 3.10: Simplifying flights graph using weighted edges represent number carriers route. Edge thickness represents weight.\n","code":""},{"path":"working.html","id":"rep-graphs","chapter":"3 Working With Graphs","heading":"3.1.4 Representations of graphs","text":"far chapter seen two common ways representing graph. first, well known way, diagram. second algebraic structure consisting vertex set edge set \\(G = (V, E)\\). discussed beginning chapter, diagrams useful visualizing und understanding simple graphs, less useful storing graph data working large graphs. working graphs field data science, two common sources graph data edgelists adjacency matrices.edgelist edge set \\(E\\) graph \\(G = (V, E)\\). don’t care isolates — , vertices connected vertices — vertex set \\(V\\) can derived directly \\(E\\). means edgelist needed build graph provided happy ignore isolates. ’s common analyst happy ignore isolates often interested connections relationships data. Let’s look example.Recall edge set \\(E\\) graph \\(G_\\mathrm{work} = (V, E)\\) Section 3.1.1:Since definition edge \\(E\\) must pair vertices \\(V\\), since concerned isolates (fact, know don’t exist case), can obtain vertex set \\(V\\) simply listing unique vertices pairs \\(E\\)). Therefore can construct \\(V\\) \\[\nV = \\{\\mathrm{David}, \\mathrm{Suraya}, \\mathrm{Jane}, \\mathrm{Zubin}\\}\n\\]now obtained everything need graph edgelist.Edgelists typically take form two columns data, usually labelled ‘’ ‘.’ Therefore edgelist \\(G_\\mathrm{work}\\) look like Table 3.1.\nTable 3.1: Edgelist \\(G_\\mathrm{work}\\) graph\nThinking ahead: still Bridges Königsberg data loaded graph R Python earlier, able generate edgelist easily. Try find right function use within package choice.adjacency matrix square matrix vertices indexing rows columns, \\((, j)\\)-th entry matrix represents number edges vertex \\(\\) vertex \\(j\\). example, using simple graph \\(G_\\mathrm{work}\\) Section 3.1.1, adjacency matrix look like :\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & 0 & 1 & 1 & 1\\\\\n      \\mathrm{Jane} & 1 & 0 & 1 & 1 \\\\\n      \\mathrm{Zubin} & 1 & 1 & 0 & 0 \\\\\n      \\mathrm{Suraya} & 1 & 1 & 0 & 0 \n\\end{array}\n\\]\nAdjacency matrices also commonly written sparse form, without use zeros. example:\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & . & 1 & 1 & 1\\\\\n      \\mathrm{Jane} & 1 & . & 1 & 1 \\\\\n      \\mathrm{Zubin} & 1 & 1 & . & . \\\\\n      \\mathrm{Suraya} & 1 & 1 & . & . \n\\end{array}\n\\]adjacency matrix undirected graph like \\(G_\\mathrm{work}\\) symmetrical diagonal, since existence \\((,j)\\) edge automatically implies existence \\((j, )\\) edge. However, directed graph may symmetrical adjacency matrix. adjacency matrix \\(G_\\mathrm{manage}\\) graph Section 3.1.1.\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & . & 1 & 1 & .\\\\\n      \\mathrm{Jane} & . & . & . & . \\\\\n      \\mathrm{Zubin} & . & . & . & . \\\\\n      \\mathrm{Suraya} & 1 & . & . & . \n\\end{array}\n\\]graph pseudograph, diagonal entries may greater zero, multigraphs can entries non-negative integer. adjacency matrix flight network graph:\\[\n\\begin{array}{cccc}\n      & \\mathrm{SFO} & \\mathrm{PHL} & \\mathrm{TUS} \\\\\n      \\mathrm{SFO} & . & 4 & 4 \\\\\n      \\mathrm{PHL} & 5 & . & 1  \\\\\n      \\mathrm{TUS} & 2 & . & . \n\\end{array}\n\\]Thinking ahead: , Bridges Königsberg graph loaded R Python, can turn adjacency matrix easily. Try find right function package choice. Note packages like networkx Python, format slightly different called adjacency list.","code":""},{"path":"working.html","id":"creating-graphs-in-r","chapter":"3 Working With Graphs","heading":"3.2 Creating graphs in R","text":"section use examples previous section learn create graph objects R using igraph package, examine structure objects. strong understanding graph objects structured make easier us advanced manipulation calculations involving graphs later book.","code":""},{"path":"working.html","id":"creating-a-graph-from-an-edgelist","chapter":"3 Working With Graphs","heading":"3.2.1 Creating a graph from an edgelist","text":"Let’s start manually creating edgelist \\(G_\\mathrm{work}\\) graph Section 3.1.1 dataframe R. can see edgelist Table 3.1. Remember \\(G_\\mathrm{work}\\) undirected graph, need worry edge direction create edgelist.looks right. Now going load igraph package use function graph_from_edgelist() create undirected graph object edgelist. function expects receive edgelist matrix, need convert gwork_edgelist dataframe matrix use function.now hove \\(G_\\mathrm{work}\\) graph memory. go , let’s take look .Let’s start string UN-- first line output. string describes type graph . letter U denotes undirected graph, N denotes graph named vertices. two properties, discover later, currently present represented dashes --. Next number vertices (4) edges (5), followed two dashes.next line attributes graph listed. case just one attribute name, vertex attribute — denoted (v/c). Finally edges graph given using vertex names. Note direction edges, denoted --.Let’s try thing time directed graph \\(G_\\mathrm{manage}\\) Section 3.1.1.see similar output gwork, except now directed graph, donated D first line, see edges now denoted direction using->.","code":"\n(gwork_edgelist <- data.frame(\n  from = c(\"David\", \"David\", \"David\", \"Jane\", \"Jane\"),\n  to = c(\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\")\n))##    from     to\n## 1 David  Zubin\n## 2 David Suraya\n## 3 David   Jane\n## 4  Jane  Zubin\n## 5  Jane Suraya\nlibrary(igraph)\n\ngwork_edgelist <- as.matrix(gwork_edgelist)\ngwork <- igraph::graph_from_edgelist(el = gwork_edgelist, \n                                     directed = FALSE)\ngwork## IGRAPH 8f1b34b UN-- 4 5 -- \n## + attr: name (v/c)\n## + edges from 8f1b34b (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane\ngmanage_edgelist <- data.frame(\n  from = c(\"Suraya\", \"David\", \"David\"),\n  to = c(\"David\", \"Zubin\", \"Jane\")\n)\n\ngmanage_edgelist <- as.matrix(gmanage_edgelist)\n(gmanage <- igraph::graph_from_edgelist(el = gmanage_edgelist,\n                                       directed = TRUE))## IGRAPH dd163b9 DN-- 4 3 -- \n## + attr: name (v/c)\n## + edges from dd163b9 (vertex names):\n## [1] Suraya->David David ->Zubin David ->Jane"},{"path":"working.html","id":"creating-a-graph-from-an-adjacency-matrix","chapter":"3 Working With Graphs","heading":"3.2.2 Creating a graph from an adjacency matrix","text":"Similarly, can create graph data provided adjacency matrix. Let’s manually create adjacency matrix flights graph Figure 3.3, can use graph_from_adjacency_matrix() function igraph create graph object matrix.see expected directed multigraph 3 vertices 16 edges. wish use create weighted graph Figure 3.10, add weighted = TRUE arguments.now see graph 5 edges see addition W graph type, indicating weighted graph also see new edge property weight.","code":"\n# create 3x3 adjacency matrix\nadj_flights <- matrix(c(0, 5, 2, 4, 0, 0, 4, 1, 0), nrow = 3, ncol = 3)\nrownames(adj_flights) <- c(\"SFO\", \"PHL\", \"TUS\")\ncolnames(adj_flights) <- rownames(adj_flights)\n\n# create multigraph from adjacency matrix\n(flightgraph <- igraph::graph_from_adjacency_matrix(\n  adjmatrix = adj_flights,\n  mode = \"directed\"\n))## IGRAPH 9d8e8e7 DN-- 3 16 -- \n## + attr: name (v/c)\n## + edges from 9d8e8e7 (vertex names):\n##  [1] SFO->PHL SFO->PHL SFO->PHL SFO->PHL SFO->TUS SFO->TUS SFO->TUS SFO->TUS PHL->SFO PHL->SFO PHL->SFO PHL->SFO PHL->SFO\n## [14] PHL->TUS TUS->SFO TUS->SFO\n# create weighted graph \n(flightgraph <- igraph::graph_from_adjacency_matrix(\n  adjmatrix = adj_flights,\n  mode = \"directed\",\n  weighted = TRUE\n))## IGRAPH 4afaa2a DNW- 3 5 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from 4afaa2a (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO"},{"path":"working.html","id":"creating-a-graph-from-a-dataframe","chapter":"3 Working With Graphs","heading":"3.2.3 Creating a graph from a dataframe","text":"noted Section 3.1.4, edgelists usually sufficient descibe graph isolates concern. function graph_from_edgelist() works fine purpose, lacking flexibility graphs contain isolates properties ideally like load creation. However, function graph_from_data_frame() allows create flexible graph directly dataframes containing required data.Let’s create bipartite graph \\(G_\\mathrm{new}\\) Figure 3.7 using function. minimum, function requires dataframe edges, also accept dataframe vertices needed.Playing around: functions section functions igraph package build graphs data, far commonly used ones. typing ?graph_from R console looking functions autocomplete, can see functions build graphs data. Try playing around curious.","code":"\n# edge dataframe\nedge_df <- data.frame(\n  from = c(\"David\", \"David\", \"David\", \"Jane\", \"Jane\", \n           \"Sandra\", \"Sandra\", \"Mae-Li\"),\n  to = c(\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\", \n         \"Mae-Li\", \"Jake\", \"Jake\")\n)\n\n# vertex dataframe\nvertex_df <- data.frame(\n  name = c(\"David\", \"Zubin\", \"Suraya\", \"Jane\", \n           \"Sandra\", \"Mae-Li\", \"Jake\")\n)\n\n# create graph\n(gnew <- igraph::graph_from_data_frame(\n  d = edge_df,\n  directed = FALSE,\n  vertices = vertex_df\n))## IGRAPH 6e6ad8b UN-- 7 8 -- \n## + attr: name (v/c)\n## + edges from 6e6ad8b (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane   Sandra--Mae-Li Sandra--Jake   Mae-Li--Jake"},{"path":"working.html","id":"adding-properties-to-the-vertices-and-edges","chapter":"3 Working With Graphs","heading":"3.2.4 Adding properties to the vertices and edges","text":"Vertex edge properties can added new graph point creation can added progressively existing graph. add properties time creating graph, simply include properties columns edge vertex dataframes graph_from_data_frame() function. Let’s recreate financial transaction graph including edge vertex properties Figure 3.9.see additional edge properties cur amt vertex property loc included graph. codes immediately following properties represent property type data type. can see loc vertex property character type (v/c), cur edge property character type (e/c) amt edge property numeric type (e/n).Playing around: arbitrary number properties can added vertices edges graph. label one properties weight property numeric, change type graph W, weighted graph. Try playing around changing name amt column weight gtransfers.can view vertex edge sets graph using V() E() functions respectively.see specific properties attributes within vertices edges, $ operator can used.Vertex edge properties can written existing graph directly way, providing properties correct length order. example, another way creating weighted flights graph Figure 3.10.see weighted graph created adding weight property edges unweighted graph.bipartite graph can created giving vertices type property according two disjoint sets vertices. Let’s use \\(G_\\mathrm{new}\\) bipartite graph example, generated earlier gnew object. vertex set, first four vertices organization final three organization B.can see graph gnew now final four graph types: B meaning bipartite.Playing around: Hopefully can now see many ways construct graph. Try using graph_from_data_frame() function create gnew bipartite graph point creation.","code":"\n# dataframe of edges and properties \nedge_transfers <- data.frame(\n  from = c(\"A\", \"A\", \"B\", \"B\"),\n  to = c(\"A\", \"B\", \"A\", \"C\"),\n  cur = c(\"USD\", \"USD\", \"GBP\", \"GBP\"),\n  amt = c(150000, 570000, 230000, 175000)\n)\n\n# dataframe of edges and properties \nvertex_transfers <- data.frame(\n  name = c(\"A\", \"B\", \"C\"),\n  loc = c(\"USA\", \"UK\", \"France\")\n)\n\n# create graph\n(gtransfers <- igraph::graph_from_data_frame(\n  d = edge_transfers,\n  directed = TRUE,\n  vertices = vertex_transfers\n))## IGRAPH 91907a8 DN-- 3 4 -- \n## + attr: name (v/c), loc (v/c), cur (e/c), amt (e/n)\n## + edges from 91907a8 (vertex names):\n## [1] A->A A->B B->A B->C\nV(gtransfers)## + 3/3 vertices, named, from 91907a8:\n## [1] A B C\nE(gtransfers)## + 4/4 edges from 91907a8 (vertex names):\n## [1] A->A A->B B->A B->C\nV(gtransfers)$name## [1] \"A\" \"B\" \"C\"\nE(gtransfers)$amt## [1] 150000 570000 230000 175000\n# create unweighted graph from routes edgelist\nedge_routes <- data.frame(\n  from = c(\"SFO\", \"SFO\", \"PHL\", \"PHL\", \"TUS\"),\n  to = c(\"PHL\", \"TUS\", \"SFO\", \"TUS\", \"SFO\")\n) \n\nedge_routes <- as.matrix(edge_routes)\n\nflightsgraph <- igraph::graph_from_edgelist(\n  el = edge_routes,\n  directed = TRUE\n)\n\n# add weights as an edge property\nE(flightsgraph)$weight <- c(4, 4, 5, 1, 2)\n\n# view flightsgraph\nflightsgraph## IGRAPH c711cfb DNW- 3 5 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from c711cfb (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO\nV(gnew)$type = c(rep(\"A\", 4), rep(\"B\", 3))\n\ngnew## IGRAPH 6e6ad8b UN-B 7 8 -- \n## + attr: name (v/c), type (v/c)\n## + edges from 6e6ad8b (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane   Sandra--Mae-Li Sandra--Jake   Mae-Li--Jake"},{"path":"working.html","id":"creating-graphs-in-python","chapter":"3 Working With Graphs","heading":"3.3 Creating graphs in Python","text":"book use networkx package Python create graphs. version igraph package also available Python, networkx contains convenient functions building graphs existing data.","code":""},{"path":"working.html","id":"creating-a-graph-from-an-edgelist-1","chapter":"3 Working With Graphs","heading":"3.3.1 Creating a graph from an edgelist","text":"graph can constructed edgelist Python dict. Let’s create undirected graph \\(G_\\mathrm{work}\\) Section 3.1.1.view edges vertices/nodes, can seen attributes gwork object.graph can also constructed edgelist Pandas DataFrame. default edgelist needs columns source target13.default functions uses Graph() class create undirected graph. Various methods exist check type graph. example:create directed graph \\(G_\\mathrm{manage}\\), use DiGraph() class.","code":"import pandas as pd\nimport networkx as nx\n\n# create edgelist as dict\ngwork_edgelist = dict(\n  David = [\"Zubin\", \"Suraya\", \"Jane\"],\n  Jane = [\"Zubin\", \"Suraya\"]\n)\n\n# create graph dict\ngwork = nx.Graph(gwork_edgelist)# see vertices and edges as lists\nlist(gwork.nodes)## ['David', 'Jane', 'Zubin', 'Suraya']list(gwork.edges)## [('David', 'Zubin'), ('David', 'Suraya'), ('David', 'Jane'), ('Jane', 'Zubin'), ('Jane', 'Suraya')]gwork_edgelist=dict(\n  source=[\"David\", \"David\", \"David\", \"Jane\", \"Jane\"],\n  target=[\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\"]\n)\n\n#create edgelist as Pandas DataFrame\ngwork_edgelist = pd.DataFrame(gwork_edgelist)\n\n# create graph from Pandas DataFrame\ngwork = nx.from_pandas_edgelist(gwork_edgelist)gwork.is_directed()## Falsegwork.is_multigraph()## Falsegmanage_edgelist=dict(\n  David=[\"Zubin\", \"Jane\"],\n  Suraya=[\"David\"]\n)\n\n# create directed graph\ngmanage=nx.DiGraph(gmanage_edgelist)\n\n# check edges\nlist(gmanage.edges)## [('David', 'Zubin'), ('David', 'Jane'), ('Suraya', 'David')]# check directed\ngmanage.is_directed()## True"},{"path":"working.html","id":"python-graph-from-adjacency","chapter":"3 Working With Graphs","heading":"3.3.2 Creating a graph from an adjacency matrix","text":"function from_numpy_matrix() allows construction graph adjacency matrix created using numpy. Let’s construct directed multigraph flight carriers Figure 3.3 way.generate graph single weighted edges Figure 3.10, simply change parallel_edges argument use DiGraph() class. map entries matrix weight edge attribute.","code":"import numpy as np\n\n# create adjacency matrix\nadj_flights = np.reshape((0,4,4,5,0,1,2,0,0), (3,3))\n\n# generate directed multigraph \nmultiflights = nx.from_numpy_matrix(adj_flights, parallel_edges=True, \ncreate_using=nx.MultiDiGraph())\n\n# name nodes\nlabel_mapping = {0: \"SFO\", 1: \"PHL\", 2: \"TUS\"}\nmultiflights = nx.relabel_nodes(multiflights, label_mapping)\n\n# check edges\nlist(multiflights.edges)## [('SFO', 'PHL', 0), ('SFO', 'PHL', 1), ('SFO', 'PHL', 2), ('SFO', 'PHL', 3), ('SFO', 'TUS', 0), ('SFO', 'TUS', 1), ('SFO', 'TUS', 2), ('SFO', 'TUS', 3), ('PHL', 'SFO', 0), ('PHL', 'SFO', 1), ('PHL', 'SFO', 2), ('PHL', 'SFO', 3), ('PHL', 'SFO', 4), ('PHL', 'TUS', 0), ('TUS', 'SFO', 0), ('TUS', 'SFO', 1)]# create with single weighted edges\nmultiflights = nx.from_numpy_matrix(adj_flights, parallel_edges=False, \ncreate_using=nx.DiGraph())\n\n# name nodes\nlabel_mapping = {0: \"SFO\", 1: \"PHL\", 2: \"TUS\"}\nmultiflights = nx.relabel_nodes(multiflights, label_mapping)\n\n# check edges\nlist(multiflights.edges)## [('SFO', 'PHL'), ('SFO', 'TUS'), ('PHL', 'SFO'), ('PHL', 'TUS'), ('TUS', 'SFO')]# check weights of edges\n[multiflights.edges[i]['weight'] for i in list(multiflights.edges)]## [4, 4, 5, 1, 2]"},{"path":"working.html","id":"adding-vertex-and-edge-properties-to-a-graph","chapter":"3 Working With Graphs","heading":"3.3.3 Adding vertex and edge properties to a graph","text":"easiest way add attributes vertices edges use set_node_attributes() set_edge_attributes() functions respectively. Vertex/node attributes must passed dict nodes keys. Let’s build simple financial transactions graph Figure 3.9.Note multiple attributes can set passing dict dicts.may look tedious manual, move adding common properties like node centrality edge weight graphs, find easy set built-functions automatically index output vertices edges. example, already seen Section 3.3.2 function from_numpy_matrix() automatically sets weight according number edges set argument parallel_edges False. Also, edge properties columns Pandas edgelist, can automatically import graph setting edge_attr = True from_pandas_edgelist() function networkx.Playing around: igraph package R, networkx package Python contains whole host ways import data graph. methods outlined likely common, ’s worth taking look functions from_dict_of_dicts() from_dict_of_lists() see available .","code":"# create dict of edgelist\ntransfer_edgelist = dict(\n  A = [\"A\", \"B\"],\n  B = [\"A\", \"C\"]\n)\n\n# create directed graph\ntransfer=nx.DiGraph(transfer_edgelist)\n\n#view vertices\nlist(transfer.nodes)## ['A', 'B', 'C']# add attribute loc to vertices\nloc_attributes = dict(A = \"USA\", B = \"UK\", C = \"France\")\nnx.set_node_attributes(G = transfer, name = \"loc\",\nvalues = loc_attributes)\n\n# check \n[transfer.nodes[i]['loc'] for i in list(transfer.nodes)]## ['USA', 'UK', 'France']#view edges\nlist(transfer.edges)## [('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'C')]# add attributes to edges\ntransfer_attributes = {\n  ('A', 'A'): {\"cur\": \"USD\", \"amt\": 150000}, \n  ('A', 'B'): {\"cur\": \"USD\", \"amt\": 570000},\n  ('B', 'A'): {\"cur\": \"GBP\", \"amt\": 230000}, \n  ('B', 'C'): {\"cur\": \"GBP\", \"amt\": 175000}\n}\n\n# set edge attributes\nnx.set_edge_attributes(G = transfer, values = transfer_attributes)\n\n# check\n[transfer.edges[i]['cur'] for i in list(transfer.edges)]## ['USD', 'USD', 'GBP', 'GBP'][transfer.edges[i]['amt'] for i in list(transfer.edges)]## [150000, 570000, 230000, 175000]"},{"path":"working.html","id":"learning-exercises-1","chapter":"3 Working With Graphs","heading":"3.4 Learning exercises","text":"","code":""},{"path":"working.html","id":"discussion-questions-1","chapter":"3 Working With Graphs","heading":"3.4.1 Discussion questions","text":"Describe two sets make graph.graph vertices edges. statement true? converse statement true?following real-world cases, kind graph best choice: pseudograph, multigraph, \\(k\\)-partite graph tree? Also state whether directed undirected.graph academic collaboration vertices represent people edge represents published paper vertices authors.graph academic collaboration vertices represent people edge represents published paper vertices authors.graph vertex represents soccer player edge exists vertices played team time.graph vertex represents soccer player edge exists vertices played team time.graph vertices geographical cities, countries continents edge exists one vertex geographically located another.graph vertices geographical cities, countries continents edge exists one vertex geographically located another.graph vertices group colleagues edge exists vertex B least one email message sent colleague colleague B.graph vertices group colleagues edge exists vertex B least one email message sent colleague colleague B.graph vertices train stations US, Japan Russia edge exists direct train route exists two vertices.graph vertices train stations US, Japan Russia edge exists direct train route exists two vertices.criteria must graph satisfy called tree?criteria must graph satisfy called tree?Give two different ways construct graph described Question 3.Give two different ways construct graph described Question 3.Can think three things everyday life represented graphs? vertices edges represent? kinds graph best case?Can think three things everyday life represented graphs? vertices edges represent? kinds graph best case?","code":""},{"path":"working.html","id":"data-exercises-1","chapter":"3 Working With Graphs","heading":"3.4.2 Data exercises","text":"Load koenigsberg edgelist onadata package load dataframe internet14. edgelist Bridges Königsberg problem looked Chapter 1. Use software choice following exercises.Create graph object using edgelist. Ensure undirected.exploring graph object just created, determine many vertices edges graph. make sense given original problem tackled Euler?Obtain list names vertices graph.Find function method graph package create adjacency matrix adjacency list graph. Check output see makes sense.Load pizza data set onadata package load dataframe internet15. dataset represents requests made Reddit users thread called Random Acts Pizza ROAP, part larger dataset used research purposes Althoff, Danescu-Niculescu-Mizil, Jurafsky (2014). requester column represents users made requests pizza responder column represents users read request responded request giving pizza16. columns represent request ID data requester time request made.Use appropriate method create graph object using requester responder columns data set.Use information contained graph object determine many pizza requests fulfilled.Determine using information graph whether anyone fulfilled one pizza request.Using appropriate method, add columns pizza data set edge properties.Use edge properties graph object determine request ID largest number requester votes.Use edge properties graph object determine request ID largest number requester subreddits.","code":""},{"path":"viz-graphs.html","id":"viz-graphs","chapter":"4 Visualizing Graphs","heading":"4 Visualizing Graphs","text":"Now learned define store graphs, ’s time take look ways visualizing . noted earlier chapters, visualization important tool can make graphs networks real others. visualizations always effective. Graphs can laid visualized many different ways, effectively communicate inference conclusion analyst inviting others draw phenomenon represented graph.graph made vertices edges, many factors impact graph appears. First, cosmetic matters vertex size, edge thickness, whether vertices edges labelled, colored . Second matters layout — , position vertices relative visualization. example, recall simple four vertex undirected graph \\(G_\\mathrm{work}\\) Section 3.1.1. Figure 4.1 shows two different ways visualizing graph, make different choices vertex size graph layout17.\nFigure 4.1: Two different ways visualizing \\(G_\\mathrm{work}\\) graph\nchoices visualize graph wide varied, covering every single permutation combination cosmetics layouts chapter. Instead, focus learning control common options. equip reader well just work later book, also need visualize graphs create part work study. also cover variety graph visualization programming package options R Python.chapter work relatively famous graph known Zachary’s Karate Club. graph originates piece research karate club social anthropologist Wayne W. Zachary (Zachary (1977)), commonly used example social network many teaching situations today. graph contains 34 vertices representing different individuals actors. karate instructor labelled ‘Mr Hi.’ club administrator labelled ‘John .’ 32 actors labelled Actor 2 thru Actor 33. Zachary studied social interactions members outside club meetings, study conflict arose club eventually led group splitting two - one group forming new club around instructor Mr Hi group dispersing find new clubs give karate completely. graph, edge two vertices means two individuals interacted socially outside club.","code":""},{"path":"viz-graphs.html","id":"visualizing-graphs-in-r","chapter":"4 Visualizing Graphs","heading":"4.1 Visualizing graphs in R","text":"Let’s load graph edgelist R onadata package internet18, check first rows.Now let’s use edgelist create undirected graph object igraph.can see undirected graph 34 named vertices 78 edges.","code":"\n# get edgelist data as dataframe\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\nhead(karate_edgelist)##    from      to\n## 1 Mr Hi Actor 2\n## 2 Mr Hi Actor 3\n## 3 Mr Hi Actor 4\n## 4 Mr Hi Actor 5\n## 5 Mr Hi Actor 6\n## 6 Mr Hi Actor 7\nlibrary(igraph)\n\n(karate <- igraph::graph_from_data_frame(karate_edgelist, \n                                         directed = FALSE))## IGRAPH 20d37be UN-- 34 78 -- \n## + attr: name (v/c)\n## + edges from 20d37be (vertex names):\n##  [1] Mr Hi   --Actor 2  Mr Hi   --Actor 3  Mr Hi   --Actor 4  Mr Hi   --Actor 5  Mr Hi   --Actor 6  Mr Hi   --Actor 7 \n##  [7] Mr Hi   --Actor 8  Mr Hi   --Actor 9  Mr Hi   --Actor 11 Mr Hi   --Actor 12 Mr Hi   --Actor 13 Mr Hi   --Actor 14\n## [13] Mr Hi   --Actor 18 Mr Hi   --Actor 20 Mr Hi   --Actor 22 Mr Hi   --Actor 32 Actor 2 --Actor 3  Actor 2 --Actor 4 \n## [19] Actor 2 --Actor 8  Actor 2 --Actor 14 Actor 2 --Actor 18 Actor 2 --Actor 20 Actor 2 --Actor 22 Actor 2 --Actor 31\n## [25] Actor 3 --Actor 4  Actor 3 --Actor 8  Actor 3 --Actor 9  Actor 3 --Actor 10 Actor 3 --Actor 14 Actor 3 --Actor 28\n## [31] Actor 3 --Actor 29 Actor 3 --Actor 33 Actor 4 --Actor 8  Actor 4 --Actor 13 Actor 4 --Actor 14 Actor 5 --Actor 7 \n## [37] Actor 5 --Actor 11 Actor 6 --Actor 7  Actor 6 --Actor 11 Actor 6 --Actor 17 Actor 7 --Actor 17 Actor 9 --Actor 31\n## [43] Actor 9 --Actor 33 Actor 9 --John A   Actor 10--John A   Actor 14--John A   Actor 15--Actor 33 Actor 15--John A  \n## + ... omitted several edges"},{"path":"viz-graphs.html","id":"native-plotting-igraph","chapter":"4 Visualizing Graphs","heading":"4.1.1 Native plotting in igraph","text":"igraph package allows simple plotting graphs using plot() function. function works instantly igraph object, using default values various arguments. starting point, use default values except layout graph. set layout plot initially random layout, randomly allocate vertices different positions. Figure 4.2 shows default plot karate network.\nFigure 4.2: Basic default plot karate network\nPlaying around: previous code chunk fixes positioning vertices karate graph. setting random seed, can ensure random numbers generated time plot repeatable reproducible. random_layout() function calculates random x y coordinates vertices, use plot() function, assigns coordinates plot. learn layouts later chapter, use technique lot. like, try playing around layouts now. couple examples layout_with_sugiyama() layout_with_dh().Looking Figure 4.2, note labeling vertices somewhat obtrusive unhelpful clarity graph. common problem default graph plotting, large number vertices plot can turn messy cloud overlapping labels.Vertex labels can adjusted via properties vertices. common properties adjusted follows:label: text labellabel.family: font family used (default ‘serif’)label.font: font style, 1 plain (default), 2 bold, 3 italic, 4 bold italic 5 symbol fontlabel.cex: size label textlabel.color: color label textlabel.dist: distance label fron vertex, 0 centered vertex (default) 1 beside vertexlabel.degree: angle label display relative center vertex, radians. default -pi/4Let’s try change vertex labels display Mr Hi John . Let’s also change size, color font family labels. output can seen Figure 4.3\nFigure 4.3: Adjusting label appearance changing vertex properties\nNow cleaned label situation, may wish change appearance vertices. commonly used vertex properties allow :size: size vertexcolor: fill color vertexframe.color: border color vertexshape: shape vertex - multiple shape options supported including circle, square, rectangle noneWe may wish use different vertex shapes colors actors compared Mr Hi John . done, results Figure 4.4.\nFigure 4.4: Adjusting vertex appearance changing vertex properties\nsimilar way, edges can changed adding editing edge properties. common edge properties used change edges igraph plot:color: color edgewidth: width edgearrow.size: size arrow directed edgearrow.width: width arrow directed edgearrow.mode: Whether edges direct forward (>), backward (<) (<>)lty: Line type edges, numerous options including solid, dashed, dotted, dotdash blankcurved: Specifies amount curvature apply edge, zero (default) straight edge, negative numbers bending clockwise positive bending anti-clockwiseNote edges, like vertices, can also label label property various label settings like label.cex label.family. Let’s adjust karate graph blue dashed edges, result 4.5.\nFigure 4.5: Adjusting edge appearance changing edge properties\nPlaying around: Usually, getting graph looking way want takes trial error playing around properties. Try adjusting karate graph using properties listed.","code":"\n# set seed for reproducibility\nset.seed(123)\n\n# create random layout\nl <- layout_randomly(karate)\n\n# plot with random layout\nplot(karate, layout = l)\n# only store a label if Mr Hi or John A\nV(karate)$label <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          V(karate)$name,\n                          \"\")\n\n# change label font color, size and font family \n# (selected font family needs to be installed on system)\nV(karate)$label.color <- \"black\"\nV(karate)$label.cex <- 0.8\nV(karate)$label.family <- \"Lucinda Console\"\n\nplot(karate, layout = l)\n# different colors and shapes for Mr Hi and and John A\nV(karate)$color <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"lightblue\", \n                          \"pink\")\n\nV(karate)$shape <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"square\", \n                          \"circle\")\n\n\nplot(karate, layout = l)\n# change color and linetype of all edges\nE(karate)$color <- \"blue\"\nE(karate)$lty <- \"dashed\"\n\nplot(karate, layout = l)"},{"path":"viz-graphs.html","id":"layouts","chapter":"4 Visualizing Graphs","heading":"4.1.2 Graph layouts","text":"layout graph determines precise position vertices 2-dimensional plane 3-dimensional space. Layouts algorithms calculate vertex positions based properties graph. Different layouts work different purposes, example visually identify communities graph, just make graph look pleasant. Section 4.1.1, used random layout karate graph. Now let’s look common alternative layouts. Layouts used multiple plotting packages, explore using igraph base plotting capabilities .two ways add layout graph igraph. want keep graph object separate layout, can create layout use argument plot() function, like Figure 4.2. Alternatively, can assign layout graph object making property graph. intend stick permanently chosen layout intend experiment. can use add_layout_() function achieve . example, create karate graph grid layout.can see new graph object layout property. Note running add_layout_() graph already layout property default overwrite previous layout unless set argument overwrite = FALSE.well random layout demonstrated Figure 4.2, common shape layouts include as_star(), as_tree(), in_circle(), on_grid() on_sphere(). example, Figure 4.6 shows circle layout karate network, Figure 4.7 shows sphere layout.\nFigure 4.6: Circle layout karate graph\n\nFigure 4.7: Sphere layout karate graph\nThinking ahead: Notice circle sphere layouts position Mr Hi John close . indication layout algorithms established something common two individuals based properties graph. something cover later chapter, want explore ahead, know , calculate centrality measures vertices karate graph — example degree centrality betweenness centrality.Force-directed graph layouts extremely popular, aesthetically pleasing help visualize communities vertices quite effectively, especially graphs low moderate edge-complexity. algorithms emulate physical models like Hooke’s law attract connected vertices together, time applying repelling forces pairs vertices try keep much space possible . calculation iterative process vertex positions recalculated equilibrium reached19. result usually layout connected vertices closer together edge-length approximately equal.Zachary’s Karate Club study, study connection community, can imagine force-directed layout good choice visualization, find case many network graphs study. several different implementations force directed algorithms available. Perhaps popular Fruchterman-Reingold algorithm. Figure 4.8 shows karate network layout generated Fruchterman-Reingold algorithm, can see clear communities karate club oriented around Mr Hi John .\nFigure 4.8: Force-directed layout karate graph according Fruchterman-Reingold algorithm\nKamada-Kawai algorithm GEM algorithm also commonly used force-directed algorithms produce similar types community structures Figures 4.9 4.10 respectively.\nFigure 4.9: Force-directed layout karate graph according Kamada-Kawai algorithm\n\nFigure 4.10: Force-directed layout karate graph according GEM algorithm\nwell force-directed shape-oriented layout algorithms, several alternative approaches layout calculation also available. layout_with_dh() uses simulated annealing algorithm developed nice graph drawing, layout_with_mds() generates vertex coordinates multi-dimensional scaling based shortest path distance (look later chapter). layout_with sugiyama() suitable directed graphs minimizes edge crossings introducing bends edges — multigraph visualization Figure 3.4 generated using Sugiyama layout algorithm.Finally, three layout algorithms suited large graphs many thousands even millions edges. One biggest problems visualizing large graphs potential ‘hairballs’ — , clumps connected nodes dense usefully visualized. layout_with_lgl() uses Large Graph Layout algorithm tries identify clusters vertices position clusters positioning individual vertices minimize chance hairballs, still adhering principles force-directed networks. layout_with_drl() layout_with_graphopt() uses efficient force-directed algorithms scale well large graphs.Playing around: Try laying karate graph using various algorithms observe different appearances. interested experimenting larger graph, enough computing power won’t freeze machine, load wikivote edgelist onadata package, download internet20. network represents votes Wikipedia members members made administrators. Create directed graph object, lay using layout_with_graphopt(). help visualization, remove vertex labels, set node size 0.5 set edge arrow size 0.1. plot , see great example hairball, Figure 4.11.\nFigure 4.11: Example hairball generated trying visualize large network Wikipedia votes administrators\nabsence information layout, plot() function igraph choose appropriate layout using logic determined layout_nicely(). graph already layout attribute, use layout. Otherwise, vertices x y attributes, use vertex co-ordinates. Failing , layout_with_fr() used graph fewer 1,000 vertices, layout_with_drl() used graph 1,000 vertices. Thus, plot defaults form force-directed layout unless graph attributes suggest otherwise.","code":"\n# check whether existing karate graph has a layout property\nkarate$layout## NULL\n# assign grid layout as a graph property\nset.seed(123)\nkarate_grid <- igraph::add_layout_(karate, on_grid())\n\n# check a few lines of the 'layout' property\nhead(karate_grid$layout)##      [,1] [,2]\n## [1,]    0    0\n## [2,]    1    0\n## [3,]    2    0\n## [4,]    3    0\n## [5,]    4    0\n## [6,]    5    0\n# circle layout\nset.seed(123)\ncirc <- layout_in_circle(karate)\nplot(karate, layout = circ)\n# sphere layout\nset.seed(123)\nsph <- layout_on_sphere(karate)\nplot(karate, layout = sph)\n# F-R algorithm\nset.seed(123)\nfr <- layout_with_fr(karate)\nplot(karate, layout = fr)\n## K-K algorithm\nset.seed(123)\nkk <- layout_with_kk(karate)\nplot(karate, layout = kk)\n## GEM algorithm\nset.seed(123)\ngem <- layout_with_gem(karate)\nplot(karate, layout = gem)"},{"path":"viz-graphs.html","id":"plotting-with-ggraph","chapter":"4 Visualizing Graphs","heading":"4.1.3 Plotting with ggraph","text":"ggraph package developed enjoy working general ggplot2 package, popular plotting package R. learn ggplot2 foundational package, Wickham (2016) highly recommended. ggplot2, ggraph provides grammar building graph visualizations. native capabilities igraph suffice R static graph visualizations, ggraph considered additional option prefer use . also integrates well ggplot2 allows layers added graph visualization, greater variety node shapes ability layer networks onto geographic maps relative ease.build elementary graph using ggraph, start igraph object layout, progressively add node edge properties well themes layers required. illustrate, let’s generate relatively basic visualization karate graph using ggraph Figure 4.12. Note customary add edges nodes nodes top layer plot.\nFigure 4.12: Elementary visualization karate graph using ggraph Fruchterman-Reingold algorithm\nparticularly appealing. However, can play properties improve appearance, can move minimal theme remove grey background add title wish, Figure 4.13.\nFigure 4.13: Improved visualization karate graph using node edge geom functions\nLike ggplot2, want associate property nodes edges property plot, can use aesthetic mappings. example, let’s give Mr Hi John property “leader” graph, ask ggraph color nodes property, Figure 4.14.\nFigure 4.14: karate graph leader property used aesthetic\nexample using ggraph, let’s look dataset collected study workplace interactions France 2015 (Génois Barrat (2018)). Load workfrance_edgelist workfrance_vertices data sets onadata package download internet21. study, employees company wore wearable devices triangulate location building, edges defined situation two employees sharing spatial location. edgelist contains columns edges, well mins column representing total minutes spent co-located study22. vertex list contains data department employee ID. create basic visualization using ggraph Figure 4.15.\nFigure 4.15: Connection employees workplace measured spatial co-location\nstands, graph tell us much, couple simple adjustments can change . First, can adjust thickness edges reflect total number minutes spent meeting, seems reasonable measure ‘strength’ ‘weight’ connection. Second, can color code nodes department. result Figure 4.16. can now see clusters highly connected employees mostly driven department.\nFigure 4.16: Connection employees workplace edge thickness weighted minutes spent spatially co-located vertices colored department\nThinking ahead: graph just created Figure 4.16 shows detected community segmentation vertices. ’s relatively clear individuals department likely connected. Community segmentation important topic Organizational Network Analysis study later book. ’s always straightforward identify drivers community networks, learn number community detection algorithms segment graph different community groups. example, Figure 4.17 shows results running Louvain community detection algorithm workfrance graph mins edge weights. can see communities detected strongly aligned departments Figure 4.16.\nFigure 4.17: Clusters employees detected Louvain community detection algorithm. Note cluster similarity communities departments previous graph.\nggraph visualizations can work relatively easily graphics layers, allowing superimpose graph onto co-ordinate systems. Let’s look example work. Load londontube_edgelist londontube_vertices data sets onadata package download internet23. vertex set list London Tube Stations id, name geographical co-ordinates longitude latitude.edge list represents connections stations, along name line official linecolor hex code.can easily create igraph object data use ggraph create visualization using linecolor edge color stations, Figure 4.18.\nFigure 4.18: Random graph visualization London Tube network graph edges colored different lines\n’s great can easily, ’s pretty confusing visualization anyone knows London. Circle Line doesn’t look circular, Picadilly Line seems heading southeast instead northeast. west, Metropolitan Picadilly Lines seem swapped places. course, graph using geographical co-ordinates plot vertices.can change expanding edgelist include latitudes longitudes stations edge, can layer map graph. First, let’s create new longitude latitude columns edgelist, check works.looks like worked. Now can use ggmap package R layer map London top base ggraph layer, use various latitude longitude columns make network geographically accurate, Figure 4.1924.\nFigure 4.19: Geographically accurate London Tube Network\nFigure 4.19 looks like everything right place. kind graphical layering can extremely important inherent co-ordinate system lying behind vertices graph none existing layout algorithms can recreate co-ordinate system.","code":"\nlibrary(igraph)\nlibrary(ggraph)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, directed = FALSE)\n\n# set seed for reproducibility\nset.seed(123)\n\n# visualise using ggraph with fr layout\nggraph(karate, layout = \"fr\") +\n  geom_edge_link() +\n  geom_node_point() \nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.5) + \n  geom_node_point(color = \"blue\", size = 5) +\n  theme_void() + \n  labs(title = \"Zachary's Karate Club Network\")\nV(karate)$leader <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 0)\n\nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.5) + \n  geom_node_point(aes(color = as.factor(leader)), size = 5, show.legend = FALSE) +\n  theme_void() + \n  labs(title = \"Zachary's Karate Club Network\")\n# get edgelist with mins property\nworkfrance_edgelist <- read.csv(\"https://ona-book.org/data/workfrance_edgelist.csv\")\n\n# get vertex set with dept property\nworkfrance_vertices <- read.csv(\"https://ona-book.org/data/workfrance_vertices.csv\")\n\n# create undirected graph object\nworkfrance <- igraph::graph_from_data_frame(\n  d = workfrance_edgelist,\n  vertices = workfrance_vertices,\n  directed = FALSE\n)\n\n# basic visualization\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n  geom_edge_link(color = \"gray\", alpha = 0.2) +\n  geom_node_point(color = \"blue\", size = 5) +\n  theme_void()\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n  geom_edge_link(color = \"gray\", alpha = 0.2, aes(width = mins), \n                 show.legend = FALSE) +\n  geom_node_point(aes(color = dept), size = 5) +\n  theme_void() +\n  labs(title = \"Spatial co-location of employees in a workplace\")\n# download and view london tube vertex data\nlondontube_vertices <- read.csv(\"https://ona-book.org/data/londontube_vertices.csv\")\nhead(londontube_vertices)##   id         name latitude longitude\n## 1  1   Acton Town  51.5028   -0.2801\n## 2  2      Aldgate  51.5143   -0.0755\n## 3  3 Aldgate East  51.5154   -0.0726\n## 4  4   All Saints  51.5107   -0.0130\n## 5  5     Alperton  51.5407   -0.2997\n## 6  7        Angel  51.5322   -0.1058\n# download and view london tube edge data\nlondontube_edgelist <- read.csv(\"https://ona-book.org/data/londontube_edgelist.csv\")\nhead(londontube_edgelist)##   from  to          line linecolor\n## 1   11 163 Bakerloo Line   #AE6017\n## 2   11 212 Bakerloo Line   #AE6017\n## 3   49  87 Bakerloo Line   #AE6017\n## 4   49 197 Bakerloo Line   #AE6017\n## 5   82 163 Bakerloo Line   #AE6017\n## 6   82 193 Bakerloo Line   #AE6017\n# create a set of distinct line names and linecolors to use\nlines <- londontube_edgelist |> \n  dplyr::distinct(line, linecolor)\n\n# create graph object\ntubegraph <- igraph::graph_from_data_frame(d = londontube_edgelist, \n                                           vertices = londontube_vertices,\n                                           directed = FALSE)\n\n# visualize tube graph using linecolors for edge color\nset.seed(123)\nggraph(tubegraph) +\n  geom_node_point(color = \"black\", size = 1) +\n  geom_edge_link(aes(color = line), width = 1) +\n  scale_edge_color_manual(name = \"Line\",\n                          values = lines$linecolor) +\n  theme_void()\n# we reorganize the edgelist to include longitude and latitude for start and end\nnew_edgelist <- londontube_edgelist |> \n  dplyr::inner_join(londontube_vertices |> \n                      dplyr::select(id, latitude, longitude), \n                    by = c(\"from\" = \"id\")) |> \n  dplyr::rename(lat_from = latitude, lon_from = longitude) |> \n  dplyr::inner_join(londontube_vertices |> \n                      dplyr::select(id, latitude, longitude), \n                    by = c(\"to\" = \"id\")) |> \n  dplyr::rename(lat_to = latitude, lon_to = longitude)\n\n# view\nhead(new_edgelist)##   from  to          line linecolor lat_from lon_from  lat_to  lon_to\n## 1   11 163 Bakerloo Line   #AE6017  51.5226  -0.1571 51.5225 -0.1631\n## 2   11 212 Bakerloo Line   #AE6017  51.5226  -0.1571 51.5234 -0.1466\n## 3   49  87 Bakerloo Line   #AE6017  51.5080  -0.1247 51.5074 -0.1223\n## 4   49 197 Bakerloo Line   #AE6017  51.5080  -0.1247 51.5098 -0.1342\n## 5   82 163 Bakerloo Line   #AE6017  51.5199  -0.1679 51.5225 -0.1631\n## 6   82 193 Bakerloo Line   #AE6017  51.5199  -0.1679 51.5154 -0.1755\n# recreate graph object to capture additional edge data\ntubegraph <- igraph::graph_from_data_frame(d = new_edgelist, \n                                           vertices = londontube_vertices,\n                                           directed = FALSE)\n\n# layer a London map\nlibrary(ggmap)\nlondonmap <- get_map(location = \"London, UK\", source = \"google\")\n\nggmap(londonmap, base_layer = ggraph(tubegraph)) +\n  geom_node_point(aes(x = longitude, y = latitude), color = \"black\", size = 1) +\n  geom_edge_link(aes(x = lon_from, y = lat_from,\n                     xend = lon_to, yend = lat_to,\n                     color = line), width = 1) +\n  scale_edge_color_manual(name = \"Line\",\n                          values = lines$linecolor)"},{"path":"viz-graphs.html","id":"interactive-graph-visualization-in-r","chapter":"4 Visualizing Graphs","heading":"4.1.4 Interactive graph visualization in R","text":"seen earlier many large networks complicated make sense visually using static approaches methods already reviewed igraph ggraph. Nevertheless, interactive visualizations networks can useful interest visual exploration particular vertices small sub-networks, even overall network visually complex. touch upon couple commonly used interactive graph visualization packages , use Javascript libraries behind scenes create interactive visualizations.visNetwork simple effective package uses vis.js API create HTML widgets containing interactive graph visualizations. fairly easily use, main function visNetwork() taking dataframe node information dataframe edge information, well optional arguments. columns dataframes expected certain default column names. Vertices/nodes expected least id column can also contain:label: label vertexgroup: group vertex groupsvalue: used determine size vertextitle: used tooltip mouseoverOther columns can included passed specific values/properties visualization, color shape.edge dataframe must contain column, can also contain label, value title customize edges vertices, well properties arrows dashes.Interactive Figure 4.20 simple example visNetwork function work using \\(G_\\mathrm{work}\\) graph Section 3.1.1. Note visLayout() function can used various customizations, including passing random seed variable vis.js ensure result.\nFigure 4.20: Simple visNetwork rendering \\(G_\\mathrm{work}\\) graph\nfact, assuming working igraph objects, easiest way deploy visNetwork use visIgraph() function, takes igraph object restructures behind scenes use vis.js API, even inheriting whatever igraph layout prefer. Let’s recreate karate graph visNetwork, Interactive Figure 4.21.\nFigure 4.21: visNetwork rendering basic karate graph using force-directed layout\nPlaying around: visNetwork package allows take advantage ton features vis.js API, including wide range graph customization, ability make graph editable add selector menus search specific nodes groups nodes. ’s worth experimenting different capabilities. thorough manual can found https://datastorm-open.github.io/visNetwork/. don’t try recreate workfrance graph chapter visNetwork?networkD3 package creates responsive interactive network visualizations using D3 javascript library, beautiful options common network layouts like force-directed chord diagrams.create simple force-directed visualization based edgelist, use simpleNetwork() function. needs simple dataframe default first two columns represent edgelist25. example karate network, result shown Interactive Figure 4.22. Note possible set random seed networkD3.\nFigure 4.22: Simple networkD3 rendering Karate graph\nforceNetwork() function allows greater levels customization visualization. function requires edgelist vertex set specific format. However, can use function igraph_to_networkD3() easily create list containing need igraph object. next example, recreate graph Figure 4.22 put Mr Hi John different group, result shown Interactive Figure 4.23. Note node names appear nodes clicked.\nFigure 4.23: Force-directed networkD3 rendering Karate graph\ntypes D3 network visualizations also available chordNetwork(), sankeyNetwork(), many appropriate data visualization purposes exploration analysis networks. quick example using sankeyNetwork() visualize data flows, load eu_referendum dataset onadata package download internet26. shows statistics voting region area United Kingdom’s 2016 referendum membership European Union. example, calculate Leave Remain votes region visualize using sankeyNetwork(), result shown Interactive Figure 4.24. worth taking look intermediate objects created code can better understand construct Nodes Links dataframes commonly expected networkD3 functions.\nFigure 4.24: Visualization regional vote flows UK’s European Union Referendum 2016 using sankeyNetwork()\nThinking ahead: shown examples section, networkD3 package offers useful, convenient ways non-Javascript programmers make use many great capabilities D3 visualization library. See https://christophergandrud.github.io/networkD3/ examples. However, package’s customization potential limited. can program D3, scope exists create amazing interactive graph visualizations, limitless customization potential. advanced chapters book look example visualize network characters TV show Friends coding natively Javascript.","code":"\nlibrary(visNetwork)\n\nnodes <- data.frame(\nid = 1:4,\nlabel = c(\"David\", \"Zubin\", \"Suraya\", \"Jane\")\n)\n\nedges <- data.frame(\n  from = c(1, 1, 1, 4, 4),\n  to = c(2, 3, 4, 2, 3)\n)\n\nvisNetwork(nodes, edges) |> \n  visLayout(randomSeed = 123)\nlibrary(igraph)\nlibrary(ggraph)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, directed = FALSE)\n\n# different colors and shapes for Mr Hi and and John A\nV(karate)$color <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"lightblue\", \n                          \"pink\")\n\nV(karate)$shape <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"square\", \n                          \"circle\")\n\n# visualize from igraph\nvisNetwork::visIgraph(karate, layout = \"layout_with_fr\") |> \n  visLayout(randomSeed = 123)\nlibrary(networkD3)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n  \n# visualize\nnetworkD3::simpleNetwork(karate_edgelist)\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create igraph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, directed = FALSE)\n\n# give Mr Hi and John A a different group\nV(karate)$group <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 2)\n\n# translate to networkD3 - creates a list with links and nodes dfs\n# links have a source and target column and group if requested \nnetd3_list <- networkD3::igraph_to_networkD3(karate, \n                                             group = V(karate)$group)\n\n# visualize\nnetworkD3::forceNetwork(\n  Links = netd3_list$links,\n  Nodes = netd3_list$nodes,\n  NodeID = \"name\",\n  Source = \"source\",\n  Target = \"target\",\n  Group = \"group\"\n)\nlibrary(dplyr)\nlibrary(networkD3)\nlibrary(tidyr)\n\n# get data\neu_referendum <- read.csv(\"https://ona-book.org/data/eu_referendum.csv\")\n\n# aggregate by region\nresults <- eu_referendum |>  \n  dplyr::group_by(Region) |> \n  dplyr::summarise(Remain = sum(Remain), Leave = sum(Leave)) |> \n  tidyr::pivot_longer( -Region, names_to = \"result\", values_to = \"votes\")\n\n# create unique regions, \"Leave\" and \"Remain\" for nodes dataframe\nregions <- unique(results$Region)\nnodes <- data.frame(node = c(0:13), \n                  name = c(regions, \"Leave\", \"Remain\"))\n\n#create edges/links dataframe\nresults <- results |> \n  dplyr::inner_join(nodes, by = c(\"Region\" = \"name\")) |> \n  dplyr::inner_join(nodes, by = c(\"result\" = \"name\"))\n\nlinks <- results[ , c(\"node.x\", \"node.y\", \"votes\")]\ncolnames(links) <- c(\"source\", \"target\", \"value\")\n\n# visualize using sankeyNetwork\nnetworkD3::sankeyNetwork(\n  Links = links, Nodes = nodes, Source = 'source', Target = 'target', \n  Value = 'value', NodeID = 'name', units = 'votes'\n)"},{"path":"viz-graphs.html","id":"visualizing-graphs-in-python","chapter":"4 Visualizing Graphs","heading":"4.2 Visualizing graphs in Python","text":"look two approaches graph visualization Python. First look static graph plotting via networkx matplotlib packages. look interactive plotting via pyvis packages. previous section work Zachary’s Karate Club demonstrate visualization options. Let’s load create graph object now.","code":"import pandas as pd\nimport networkx as nx\n\n# get edgelist as Pandas DataFrame\nkarate_edgelist = pd.read_csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph from Pandas DataFrame\nkarate = nx.from_pandas_edgelist(karate_edgelist, \nsource = 'from', target = 'to')"},{"path":"viz-graphs.html","id":"static-visualizations-using-networkx-and-matplotlib","chapter":"4 Visualizing Graphs","heading":"4.2.1 Static visualizations using networkx and matplotlib","text":"draw() function networkx provides basic visualization graph using matplotlib using force-directed “spring” layout, can seen Figure 4.25. Remember also set seed ensure reproducibility visualization.\nFigure 4.25: Basic static visualization Karate network\ndraw_networkx() function much wider range options customizing appearance graphs. example, can change color specific nodes edges, label specific nodes others, Figure 4.26.\nFigure 4.26: Static visualization Karate network adjustments color labeling\nlimited selection layouts available can applied static visualization. example, apply circular layout, output Figure 4.27.\nFigure 4.27: Static visualization Karate network circular layout\napply Kamada-Kawai force-directed layout, output Figure 4.28. Note layout algorithms like Kamada-Kawai make use scipy package therefore need installed Python environment.\nFigure 4.28: Static visualization Karate network Kamada-Kawai force-directed layout\nPlaying around: visual capabilities networkx Python limited igraph ggraph R, still range ways customize visualization. Try making changes visualizations shown section trying different layouts looking range arguments can adjusted draw_networkx() function. can look details https://networkx.org/documentation/stable/reference/drawing.html.","code":"import numpy as np\nfrom matplotlib import pyplot as plt\n\n# set seed for reproducibility\nnp.random.seed(123)\n\nfig = nx.draw(karate)\nplt.show()# set seed for reproducibility\nnp.random.seed(123)\n\n# create dict with labels only for Mr Hi and John A\nnode = list(karate.nodes)\nlabels = [i if i == \"Mr Hi\" or i == \"John A\" else \"\" for i in karate.nodes]\nnodelabels = dict(zip(node, labels))\n\n# create color list\ncolors = [\"lightblue\" if i == \"Mr Hi\" or i == \"John A\" else \"pink\" \nfor i in karate.nodes]\n\nnx.draw_networkx(karate, labels = nodelabels, node_color = colors, \nedge_color = \"grey\")\nplt.show()# set seed for reproducibility\nnp.random.seed(123)\n\n# circular layout\nnx.draw_circular(karate, labels = nodelabels, node_color = colors, \nedge_color = \"grey\")\nplt.show()# set seed for reproducibility\nnp.random.seed(123)\n\n# circular layout\nnx.draw_kamada_kawai(karate, labels = nodelabels, node_color = colors, \nedge_color = \"grey\")\nplt.show()"},{"path":"viz-graphs.html","id":"dynamic-visualization-using-networkx-and-pyvis","chapter":"4 Visualizing Graphs","heading":"4.2.2 Dynamic visualization using networkx and pyvis","text":"Similar visNetwork package R, pyvis package provides API allowing creation dynamic graphs using vis.js Javascript library. mostly creating graph objects using networkx, easiest way use pyvis take advantage networkx integration.visualize networkx graph using pyvis, start creating Network() class use from_nx() method import networkx object. show() method render dynamic plot.pyvis expects specific names visual properties nodes edges, example color size. named properties added nodes edges Dicts networkx object, passed pyvis.Playing around: Different UI controls can added directly onto pyvis visualizations using show_buttons() method allowing experiment directly graph’s look feel. example, can add buttons experiment physics force-directed layout, node edge properties. can useful experimenting options. can learn tutorial pages https://pyvis.readthedocs.io/en/latest/.","code":"from pyvis.network import Network\n\n# create pyvis Network object\nnet = Network(height = \"500px\", width = \"600px\", notebook = True)\n\n# import karate graph\nnet.from_nx(karate)\nnet.show('out1.html')# adjust colors\nfor i in karate.nodes:\n  karate.nodes[i]['size'] = 20 if i == \"Mr Hi\" or i == \"John A\" else 10\n  karate.nodes[i]['color'] = \"lightblue\" if i == \"Mr Hi\" or i == \"John A\" else \"pink\" \n\n# create edge color\nfor i in karate.edges:\n  karate.edges[i]['color'] = \"grey\"\n  \n# create pyvis Network object\nnet = Network(height = \"500px\", width = \"600px\", notebook = True)\n  \n# import from networkx to pyvis and display\nnet.from_nx(karate)\nnet.show('out2.html')"},{"path":"viz-graphs.html","id":"learning-exercises-2","chapter":"4 Visualizing Graphs","heading":"4.3 Learning exercises","text":"","code":""},{"path":"viz-graphs.html","id":"discussion-questions-2","chapter":"4 Visualizing Graphs","heading":"4.3.1 Discussion questions","text":"visualization important consideration studying graphs?Describe ways graph visualization can adjusted reflect different characteristics vertices. example, might represent ‘important’ vertices visually?Describe similar adjustments made edges.Describe likely challenges large graph visualizations may make harder draw conclusions .difference static dynamic visualization. ways might dynamic visualization overcome challenges associated static large graph visualizations?Choose favorite programming language list package options visualize graphs language.package option listed, describe kinds graphs package best suited .Describe meant graph layout.List layout options available packages selected Questions 6 7.visualize graph twice using layout, outputs may look different. can done control ?","code":""},{"path":"viz-graphs.html","id":"data-exercises-2","chapter":"4 Visualizing Graphs","heading":"4.3.2 Data exercises","text":"Load madmen_vertices madmen_edges data sets onadata package download internet27. represents network characters TV show Mad Men two characters connected edge involved romantic relationship together.Create graph object data sets.Create basic visualization network using one methods chapter.Adjust visualization distinguish Male Female characters.Adjust visualization highlight six main characters.Adjust visualization differentiate relationships characters married married.Experiment different layouts. one prefer ?Now load schoolfriends_vertices schoolfriends_edgelist data sets onadata package download internet28. data set represents friendships reported schoolchildren high school Marseille, France 2013. vertex set provides ID, class gender child, edgelist two types relationship. first type reported friendship ID reported ID friend. second type known Facebook friendship two IDs.Create two different graph objects — one reported friendship Facebook friendship. one graph object different ?Create basic visualization graphs using method choice. Try create versions graphs contain isolates (nodes connected others) contain isolates.Experiment different layouts visualization. one prefer ? see potential communities graphs? type friendship appears ‘selective’ opinion?Adjust visualizations differentiate vertices gender. type relationship likely gender-agnostic opinion? Try question class differentiation.","code":""},{"path":"restructuring-data.html","id":"restructuring-data","chapter":"5 Restructuring Data For Use in Graphs","heading":"5 Restructuring Data For Use in Graphs","text":"far learned define visualize graphs allow us work gain basic insights . made really big assumption . assumed data need create graph always available exactly form need . Usually edgelist set dataframes edges vertices. reality, certain types data exist form default. Typically, electronic communication data often — though always — ‘’ ‘’ structure communication works many underlying systems like email, calendar communication networks already built databases graph-like structure.reality, lot problems may want apply graph theory, data exist way makes easy create graph . cases need transform data existing shape graph-friendly shape — set vertices edges.two important considerations transforming data graph-friendly structure. considerations depend problem trying solve graph, follows:entities interested connecting? vertices graph. single entitiy type like set people, multiple entity types, connecting people organizational units. Complex graphs graph databases multiple entity types.entities interested connecting? vertices graph. single entitiy type like set people, multiple entity types, connecting people organizational units. Complex graphs graph databases multiple entity types.define relationship vertices. edges graph. , can multiple relationship types, ‘reports ’ ‘works ,’ depending complex graph needs .define relationship vertices. edges graph. , can multiple relationship types, ‘reports ’ ‘works ,’ depending complex graph needs .addition fundamental considerations, also questions design construct graph. often one option can model entities relationships interested . example, imagine two types relationships ‘works ’ means two people worked together project ‘located ’ means two people based location. One option modeling single graph single entity type (people) connected edges ‘relationship type’ property. Another option several entity types — individuals, projects locations — vertices, connect individuals projects locations using single edge type means ‘member .’ first option relationships modeled directly, second modeled indirectly. may work equally well problem solved graph, one choice may useful efficient another.able go sorts transformations requires technical data design skills judgment. ‘one size fits ’ solution. transformations required go depends great deal context purpose work. Nevertheless, chapter demonstrate two examples reflect common situations data needs transformed graph-unfriendly graph-friendly structure. Working examples illustrate simple design process follow help demonstrate typical data transformation methods applied common situations.first example, study situation data exists traditional rectangular tables, need transform order understand connections understand directly tables . extremely common practice many organizations perform sorts transformations order populate graph databases traditional data sources. second example, study extract information documents way helps us understand connections entities documents. another common situation strong applications general, particular potential fields law crime investigation. examples demonstrated detail using R, last section chapter provide guidance performing similar transformations using Python.","code":""},{"path":"restructuring-data.html","id":"transforming-data-in-rectangular-tables-for-use-in-graphs","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.1 Transforming data in rectangular tables for use in graphs","text":"example going use simplified tables Chinook database - open source database contains records customers, employees transactions music sales company. working four simplified tables database can load onadata package now download internet follows:","code":"\n# download chinook database tables\nchinook_employees <- read.csv(\"https://ona-book.org/data/chinook_employees.csv\")\nchinook_customers <- read.csv(\"https://ona-book.org/data/chinook_customers.csv\")\nchinook_invoices <- read.csv(\"https://ona-book.org/data/chinook_invoices.csv\")\nchinook_items <- read.csv(\"https://ona-book.org/data/chinook_items.csv\")\n\n# set a seed for later visualizations\nset.seed(123)"},{"path":"restructuring-data.html","id":"creating-a-simple-graph-of-the-chinook-management-hierarchy","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.1.1 Creating a simple graph of the Chinook management hierarchy","text":"First, let’s take look simple example graph already exists explicitly one data tables. Let’s take look rows chinook_employees data set.can see straight away can easily create graph management relationships using table. graph, single entity type (employee) vertices management relationship (‘manager ’) edges. simplicity. let’s use first names vertex names. joining data , using EmployeeId = ReportsTo, can create two columns first names management relationship.can see FirstName.x column manager column Firstname.y column column edgelist. also remove rows edge.Now can create directed igraph object using ‘manager ’ relationship.now directed graph named vertices, easy plot. Let’s use ggplot dendrogram (tree) layout, Figure 5.1.\nFigure 5.1: Management hierarchy Chinook tree (dendrogram)\n","code":"\nhead(chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 1          1    Andrew    Adams        NA\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n## 6          6   Michael Mitchell         1\n# load dplyr for tidy manipulation in this chapter\nlibrary(dplyr)\n\n# create edgelist\n(orgchart_edgelist1 <- chinook_employees |> \n  dplyr::inner_join(chinook_employees, by = c(\"EmployeeId\" = \"ReportsTo\")))##   EmployeeId FirstName.x LastName.x ReportsTo EmployeeId.y FirstName.y LastName.y\n## 1          1      Andrew      Adams        NA            2       Nancy    Edwards\n## 2          1      Andrew      Adams        NA            6     Michael   Mitchell\n## 3          2       Nancy    Edwards         1            3        Jane    Peacock\n## 4          2       Nancy    Edwards         1            4    Margaret       Park\n## 5          2       Nancy    Edwards         1            5       Steve    Johnson\n## 6          6     Michael   Mitchell         1            7      Robert       King\n## 7          6     Michael   Mitchell         1            8       Laura   Callahan\n(orgchart_edgelist2 <- orgchart_edgelist1 |> \n  dplyr::select(from = FirstName.x, to = FirstName.y)) |> \n  dplyr::filter(!is.na(from) & !is.na(to))##      from       to\n## 1  Andrew    Nancy\n## 2  Andrew  Michael\n## 3   Nancy     Jane\n## 4   Nancy Margaret\n## 5   Nancy    Steve\n## 6 Michael   Robert\n## 7 Michael    Laura\nlibrary(igraph)\n\n# create orgchart graph\n(orgchart <- igraph::graph_from_data_frame(\n  d = orgchart_edgelist2\n))## IGRAPH 8b37079 DN-- 8 7 -- \n## + attr: name (v/c)\n## + edges from 8b37079 (vertex names):\n## [1] Andrew ->Nancy    Andrew ->Michael  Nancy  ->Jane     Nancy  ->Margaret Nancy  ->Steve    Michael->Robert  \n## [7] Michael->Laura\nlibrary(ggraph)\n\n# create management structure as dendrogram (tree)\nggraph(orgchart, layout = 'dendrogram') + \n  geom_edge_elbow() +\n  geom_node_label(aes(label = name), fill = \"lightblue\") +\n  theme_void()"},{"path":"restructuring-data.html","id":"connecting-customers-through-sales-reps","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.1.2 Connecting customers through sales reps","text":"Let’s now try build graph based slightly complex definition connection. going connect Chinook’s customers based whether share support rep. First, let’s take look customers table.see SupportRepId field corresponds EmployeeId field chinook_employees table. can join tables get edgelist customers support rep. Let’s also create full names better reference.Now option creating two types graphs. First create graph data , using CustomerName RepName edgelist, relationship ‘customer .’ Let’s create graph, view Figure 5.2. see tripartite graph hub--spoke shape.\nFigure 5.2: Graph Chinook customers connected sales reps\nRecall original objective connect customers support rep. possible use graph indirectly, applying logic customers connected path graph. However may wish ignore support reps completely graph make direct connections customers share support rep. need joining previous cust_reps dataframe.join dataframe back chinook_customers dataframe, can get customer customer connections via common support rep follows:Now interested creating pseudograph customers connected , remove rows Customer1 Customer2 .Now network edgelist can work , RepName available use edge property. Note relationships appear directions dataset, can take care choosing represent undirected graph. Let’s build visualize graph, 5.3. see tripartite graph consisting three complete subgraphs edges color coded support rep.\nFigure 5.3: Customer customer network Chinook based customers sharing sales rep\nThinking ahead: Recall Section 3.1.2 complete graph graph every pair vertices connected edge. Can see follows shape graph Figure 5.2 transform data produce Figure 5.3, expect produce complete subgraphs? Can also see visually dense complete subgraphs ? look measurement density graphs later, complete graph always density 1.","code":"\nhead(chinook_customers)##   CustomerId FirstName    LastName SupportRepId\n## 1          1      Luís   Gonçalves            3\n## 2          2    Leonie      Köhler            5\n## 3          3  François    Tremblay            3\n## 4          4     Bjørn      Hansen            4\n## 5          5 František Wichterlová            4\n## 6          6    Helena        Holý            5\n# create customer to support rep edgelist\ncust_reps <- chinook_customers |> \n  dplyr::inner_join(chinook_employees, by = c(\"SupportRepId\" = \"EmployeeId\")) |> \n  dplyr::mutate(\n    CustomerName = paste(FirstName.x, LastName.x),\n    RepName = paste(FirstName.y, LastName.y)\n  ) |> \n  dplyr::select(RepName, CustomerName, SupportRepId)\n\nhead(cust_reps)##         RepName          CustomerName SupportRepId\n## 1  Jane Peacock        Luís Gonçalves            3\n## 2 Steve Johnson         Leonie Köhler            5\n## 3  Jane Peacock     François Tremblay            3\n## 4 Margaret Park          Bjørn Hansen            4\n## 5 Margaret Park František Wichterlová            4\n## 6 Steve Johnson           Helena Holý            5\n# create igraph\ncust_rep_graph <- igraph::graph_from_data_frame(\n  d = cust_reps\n)\n\n# create customer and rep property for vertices\nV(cust_rep_graph)$Type <- ifelse(\n  V(cust_rep_graph)$name %in% cust_reps$RepName,\n  \"Rep\",\n  \"Customer\"\n)\n\n# visualize with color and name aesthetic\nggraph(cust_rep_graph, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.3) +\n  geom_node_label(aes(color = Type, label = name), size = 2) +\n  theme_void()\ncust_cust <- cust_reps |> \n  dplyr::inner_join(chinook_customers, by = \"SupportRepId\") |> \n  dplyr::mutate(Customer1 = CustomerName,\n                Customer2 = paste(FirstName, LastName)) |> \n  dplyr::select(Customer1, Customer2, RepName)\n\nhead(cust_cust)##        Customer1         Customer2      RepName\n## 1 Luís Gonçalves    Luís Gonçalves Jane Peacock\n## 2 Luís Gonçalves François Tremblay Jane Peacock\n## 3 Luís Gonçalves   Roberto Almeida Jane Peacock\n## 4 Luís Gonçalves Jennifer Peterson Jane Peacock\n## 5 Luís Gonçalves   Michelle Brooks Jane Peacock\n## 6 Luís Gonçalves         Tim Goyer Jane Peacock\ncustomer_network_edgelist <- cust_cust |> \n  dplyr::filter(\n    Customer1 != Customer2\n  ) \n\nhead(customer_network_edgelist)##        Customer1         Customer2      RepName\n## 1 Luís Gonçalves François Tremblay Jane Peacock\n## 2 Luís Gonçalves   Roberto Almeida Jane Peacock\n## 3 Luís Gonçalves Jennifer Peterson Jane Peacock\n## 4 Luís Gonçalves   Michelle Brooks Jane Peacock\n## 5 Luís Gonçalves         Tim Goyer Jane Peacock\n## 6 Luís Gonçalves     Frank Ralston Jane Peacock\n# create igraph object\ncustomer_network <- igraph::graph_from_data_frame(\n  d = customer_network_edgelist,\n  directed = FALSE\n)\n\n# visualize\nggraph(customer_network) +\n  geom_edge_link(aes(color = RepName), alpha = 0.3) +\n  geom_node_point(color = \"lightblue\", size = 6) +\n  theme_void()"},{"path":"restructuring-data.html","id":"common-purchases","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.1.3 Connecting customers through common purchases","text":"illustrate layer complexity reshaping data use graphs, let’s imagine want connect customers basis purchasing common products. may wish set parameters relationship - example connection might based minimum number common products purchased, give us flexibility around definition connection.need use three tables - chinook_customers, chinook_invoices chinook_items. associate given customer purchased item, need join three tables together. Let’s take quick look latter two.can regard TrackId item, using couple joins can quickly match customers items. possible customers may purchased item numerous times, interested work just need distinct customer track pairings.Similar previous example, can now use create undirected network two vertex entities: customer item.big network. Let’s visualize simply, Figure 5.4.\nFigure 5.4: Network connecting customers via items purchased\ncan see looking graph large number items one customer purchased. Therefore items seem extraneous information particular use case. interested items , can instead create connections customers directly. similar way previous problem, can join cust_item table connect customers based common item purchases, remove links customer.issue data set count every instance common item purchase twice, customers opposite orders, double counting. need group pairs customers irrelevant order ensure don’t double items.worked see table cust_cust_itemjoin twice many rows cust_item_network.looks good. now can count many common items pair customers purchased.ready construct graph, Items edge property. can visualize edge color code indicating many common items purchased, Figure 5.5.\nFigure 5.5: Chinook customer customer network based common item purchases\nwish, can restrict definition connection. example, may define ‘purchased least two items common,’ Figure 5.6. can use subgraph() function igraph , result reveals bipartite graph looks quite symmetrical, indicating appears two independent groups customers overlap purchasing behavior.\nFigure 5.6: Chinook customer customer network based least two common items purchased\n","code":"\nhead(chinook_invoices, 3)##   InvoiceId CustomerId\n## 1         1          2\n## 2         2          4\n## 3         3          8\nhead(chinook_items, 3)##   InvoiceId TrackId\n## 1         1       2\n## 2         1       4\n## 3         2       6\ncust_item <- chinook_customers |> \n  dplyr::inner_join(chinook_invoices) |> \n  dplyr::inner_join(chinook_items) |> \n  dplyr::mutate(CustName = paste(FirstName, LastName)) |> \n  dplyr::select(CustName, TrackId) |> \n  dplyr::distinct()\n\nhead(cust_item, 3)##         CustName TrackId\n## 1 Luís Gonçalves    3247\n## 2 Luís Gonçalves    3248\n## 3 Luís Gonçalves     447\n# initiate graph object\ncustomer_item_network <- igraph::graph_from_data_frame(\n  d = cust_item,\n  directed = FALSE\n)\n\n# create vertex type\nV(customer_item_network)$Type <- ifelse(\n  V(customer_item_network)$name %in% cust_item$TrackId,\n  \"Item\",\n  \"Customer\"\n)\nggraph(customer_item_network, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.3) +\n  geom_node_point(aes(color = Type), size = 2) +\n  theme_void()\ncust_cust_itemjoin <- cust_item |> \n  dplyr::inner_join(cust_item, by = \"TrackId\") |> \n  dplyr::select(CustName1 = CustName.x, CustName2 = CustName.y, TrackId) |> \n  dplyr::filter(CustName1 != CustName2)\n\nhead(cust_cust_itemjoin)##        CustName1          CustName2 TrackId\n## 1 Luís Gonçalves     Edward Francis     449\n## 2 Luís Gonçalves Richard Cunningham    1157\n## 3 Luís Gonçalves Richard Cunningham    1169\n## 4 Luís Gonçalves      Astrid Gruber    2991\n## 5 Luís Gonçalves         Emma Jones     280\n## 6 Luís Gonçalves         Emma Jones     298\ncust_item_network <- cust_cust_itemjoin |> \n  dplyr::group_by(Cust1 = pmin(CustName1, CustName2), Cust2 = pmax(CustName1, CustName2)) %>%\n  summarise(TrackId = unique(TrackId), .groups = 'drop')\n\nhead(cust_item_network)## # A tibble: 6 × 3\n##   Cust1          Cust2           TrackId\n##   <chr>          <chr>             <int>\n## 1 Aaron Mitchell Alexandre Rocha    2054\n## 2 Aaron Mitchell Bjørn Hansen       1626\n## 3 Aaron Mitchell Enrique Muñoz      2027\n## 4 Aaron Mitchell Hugh O'Reilly      2018\n## 5 Aaron Mitchell Niklas Schröder     857\n## 6 Aaron Mitchell Phil Hughes        1822\nnrow(cust_cust_itemjoin)/nrow(cust_item_network)## [1] 2\ncust_item_network <- cust_item_network |> \n  dplyr::count(Cust1, Cust2, name = \"Items\") \n\nhead(cust_item_network)## # A tibble: 6 × 3\n##   Cust1          Cust2           Items\n##   <chr>          <chr>           <int>\n## 1 Aaron Mitchell Alexandre Rocha     1\n## 2 Aaron Mitchell Bjørn Hansen        1\n## 3 Aaron Mitchell Enrique Muñoz       1\n## 4 Aaron Mitchell Hugh O'Reilly       1\n## 5 Aaron Mitchell Niklas Schröder     1\n## 6 Aaron Mitchell Phil Hughes         1\n# create undirected graph\ncusttocust_network <- igraph::graph_from_data_frame(\n  d = cust_item_network,\n  directed = FALSE\n)\n\n# visualize with edges color coded by no of items\nggraph(custtocust_network) +\n  geom_edge_link(aes(color = ordered(Items)), alpha = 0.5) +\n  geom_node_point(color = \"lightblue\", size = 6) +\n  labs(edge_color = \"# of Common Items\") +\n  theme_void()\n# select edges that have Item value of at least 2\nedges <- E(custtocust_network)[E(custtocust_network)$Items >= 2]\n\n# create subgraph using these edges\ntwo_item_graph <- igraph::subgraph.edges(custtocust_network, eids = edges)\n\n# visualise\nggraph(two_item_graph) +\n  geom_edge_link(color = \"grey\", alpha = 0.5) +\n  geom_node_point(color = \"lightblue\", size = 6) +\n  theme_void()"},{"path":"restructuring-data.html","id":"approaches-using-python","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.1.4 Approaches using Python","text":"illustrate similar approaches Python, redo work Section 5.1.3 using Python. First download various datasets.Now join three tables together, create FullName variable ensure don’t duplicate relationships:Now can create graph connections customers items visualize Figure 5.7.\nFigure 5.7: Visualization Chinook customer--item network\nNow create customer--customer network based common item purchases, joins data set, remove connections customer.Now can drop duplicates based TrackId, count items pair customers, final edgelist:Now ready create visualize customer--customer network, Figure 5.8.\nFigure 5.8: Visualization Chinook customer--customer network based common item purchases\nwish restrict connections two common item purchases, can create subgraph based number items, Figure 5.9.\nFigure 5.9: Visualization Chinook customer--customer network based least two item purchases\n","code":"import pandas as pd\nimport numpy as np\n\n# download chinook database tables\nchinook_customers = pd.read_csv(\"https://ona-book.org/data/chinook_customers.csv\")\nchinook_invoices = pd.read_csv(\"https://ona-book.org/data/chinook_invoices.csv\")\nchinook_items = pd.read_csv(\"https://ona-book.org/data/chinook_items.csv\")\n\n# set a seed for later visualizations\nnp.random.seed(123)joined_tables = pd.merge(\n  chinook_customers,\n  chinook_invoices\n)\n\njoined_tables = pd.merge(joined_tables, chinook_items)\n\njoined_tables['FullName'] = joined_tables['FirstName'] + ' ' + \\\njoined_tables['LastName']\n\ncust_item_table = joined_tables[['FullName', 'TrackId']].drop_duplicates()\ncust_item_table.head()##          FullName  TrackId\n## 0  Luís Gonçalves     3247\n## 1  Luís Gonçalves     3248\n## 2  Luís Gonçalves      447\n## 3  Luís Gonçalves      449\n## 4  Luís Gonçalves      451import networkx as nx\nfrom matplotlib import pyplot as plt\n\n# create networkx object\ncust_item_network = nx.from_pandas_edgelist(cust_item_table,\nsource = \"FullName\", target = \"TrackId\")\n\n# color items differently to customers\ncolors = [\"red\" if i in cust_item_table['FullName'].values else \"green\"\nfor i in cust_item_network.nodes]\n\n# visualize\nnx.draw_networkx(cust_item_network, node_color = colors, node_size = 2,\nedge_color = \"grey\", with_labels = False)\nplt.show()cust_cust_table = pd.merge(cust_item_table, cust_item_table,\non = \"TrackId\")\n\ncust_cust_table.rename(\n  columns={'FullName_x' :'CustName1', 'FullName_y' :'CustName2'},\n  inplace=True\n)\n\ncust_cust_table = cust_cust_table[\n  ~(cust_cust_table['CustName1'] == cust_cust_table['CustName2'])\n]\n\ncust_cust_table.head()##              CustName1  TrackId           CustName2\n## 4       Luís Gonçalves      449      Edward Francis\n## 5       Edward Francis      449      Luís Gonçalves\n## 11      Luís Gonçalves     1157  Richard Cunningham\n## 12  Richard Cunningham     1157      Luís Gonçalves\n## 17      Luís Gonçalves     1169  Richard Cunninghamcust_cust_table = cust_cust_table.drop_duplicates('TrackId')\n\ncust_cust_table = cust_cust_table.groupby(['CustName1', 'CustName2'], \nas_index = False).TrackId.nunique()\ncust_cust_table.rename(columns = {'TrackId': 'Items'}, inplace = True)\n\ncust_cust_table.head()##          CustName1        CustName2  Items\n## 0   Aaron Mitchell    Enrique Muñoz      1\n## 1   Aaron Mitchell    Hugh O'Reilly      1\n## 2   Aaron Mitchell  Niklas Schröder      1\n## 3   Aaron Mitchell      Phil Hughes      1\n## 4  Alexandre Rocha   Aaron Mitchell      1# create networkx object\ncust_cust_network = nx.from_pandas_edgelist(cust_cust_table,\nsource = \"CustName1\", target = \"CustName2\", edge_attr = True)\n\n\n# visualize\nnx.draw_networkx(cust_cust_network, node_color = \"lightblue\",\nedge_color = \"grey\", with_labels = False)\nplt.show()# get edges with items >= 2\ntwoitem_edges = [i for i in list(cust_cust_network.edges) if \ncust_cust_network.edges[i]['Items'] >= 2]\n\n# create subgraph\ntwoitem_network = cust_cust_network.edge_subgraph(twoitem_edges) \n\n# visualize in K-K layout\nlayout = nx.kamada_kawai_layout(twoitem_network)\nnx.draw_networkx(twoitem_network, node_color = \"lightblue\",\nedge_color = \"grey\", with_labels = False, pos = layout)\nplt.show()"},{"path":"restructuring-data.html","id":"doc-transform","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.2 Transforming data from documents for use in graphs","text":"second example, look extract information sits semi-structured documents convert graph-like shape allow us understand relationships interest us. Semi-structured documents documents certain expected format can reliably identify important actors entities. legal contracts, financial statements types structured forms. extracting entities documents, can identify important relationships , co-publishing, financial transactions contractual obligations.illustrate show extract information TV script way can determine characters spoken scene together, use information create network TV characters. use episode script hit TV comedy show Friends. full set scripts episodes Friends can found online https://fangj.github.io/friends/, later book working substantial network characters entire series. exercise, however, keep simple just focus character network first episode. script first episode can found https://fangj.github.io/friends/season/0101.html.","code":""},{"path":"restructuring-data.html","id":"scraping-the-character-and-scene-data","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.2.1 Scraping the character and scene data","text":"First look obtain list numbered scenes characters scene, ‘scraping’ details online script. help us use rvest R package, designed scraping information web pages.Let’s take look web code Season 1 Episode 1. can opening script webpage Google Chrome pressing CMD+Option+C (Ctrl+Shift+C Windows) open Elements Console can view HTML code page side--side page .One things can see immediately words precede colon interest us. fact, character names say something scene. also see lines contain string “Scene:” pretty reliable indicators scene boundaries.first thing get HTML code list vector nodes represent different pieces formatting text document. Since contain separated lines spoken character, really helpful us work . let’s download HTML code break nodes nice tidy vector script content.generated names character vector contains lot different split parts script, importantly contains lines script, example:Now, generate something useful task, need create vector contains word ‘New Scene’ line represents beginning scene, name character line represents something spoken character. best format want .first thing need swap text string containing “Scene:” string “New Scene.” can quite simply using ifelse() nodes vector, use grepl() identify entries nodes contain string “Scene:”worked nicely. Now, might also noticed , dialogue purposes, character names precede colon beginning line. might nice way extract names characters speaking parts scene (although might give us things preceded colons script also, can deal later).use regular expression syntax (regex) tell R looking anything beginning line preceding colon. use lookahead regex string follows: ^[-Za-z ]+(?=:).Let’s look string make sure know means. ^[-Za-z ]+ component means ‘find sub-string alphabetic text length including spaces beginning string.’ part parentheses (?=:) known lookahead — means look ahead sub-string text find situations colon next character. therefore instructing R find string alphabetic text start line precedes colon return . use R package stringr function str_extract() regex syntax, go every entry nodes vector transform just first string text found colon. string found return NA value. great us know , purpose dialogue, characters names always start nodes, certainly won’t miss just take first instance line. also, safety, mess scene breaks put vector.working, cleaning . example, want get rid NA values. also see take look ‘character’ called ‘’ probably network. can also see phrases like ‘Written ’ dialogue characters, strings containing \" \" involves combinations characters. can create special commands remove instances phrases29.Let’s assume cleaning done nice vector contains either names characters speaking lines episode “New Scene” indicate crossing scene boundary. now just need convert vector simple dataframe two columns scene character. already character lists, really just need iterate nodes vector entry, count number previous occurrences “New Scene” add one.can finalize dataframe putting two vectors together removing repeated characters scene. can also correct situations script starts New Scene can consistently format character names title case, account different case typing.","code":"\n# loading rvest also loads the xml2 package\nlibrary(rvest)\n\nurl_string <- \"https://fangj.github.io/friends/season/0101.html\"\n\nnodes <- xml2::read_html(url_string) %>% \n      xml2::as_list() %>% \n      unlist()\n\nhead(nodes)##                                                          html.head.title \n##  \"The One Where Monica Gets a New Roomate (The Pilot-The Uncut Version)\" \n##                                                               html.body1 \n##                                                                   \"\\n\\n\" \n##                                                             html.body.h1 \n## \"The One Where Monica Gets a New Roommate (The Pilot-The Uncut Version)\" \n##                                                               html.body3 \n##                                                                   \"\\n\\n\" \n##                                                           html.body.font \n##                                                                   \"\\n\\n\" \n##                                                         html.body.font.p \n##                               \"Written by: Marta Kauffman & David Crane\"\nnodes[16]##                                                       html.body.font.p \n## \"[Scene: Central Perk, Chandler, Joey, Phoebe, and Monica are there.]\"\n# swap lines containing the string 'Scene:' with 'New Scene' \nnodes_newscene <- ifelse(grepl(\"Scene:\", nodes), \"New Scene\", nodes)\n\n# check that there are at least a few 'New Scene' entries now\nsum(nodes_newscene == \"New Scene\")## [1] 15\nlibrary(stringr)\n\n# outside of 'New Scene' tags extract anything before : in every line \nnodes_char <- ifelse(nodes_newscene != \"New Scene\", \n                     stringr::str_extract(nodes_newscene, \"^[A-Za-z ]+(?=:)\"), \n                     nodes_newscene)\n\n# check a sample\nset.seed(123)\nnodes_char[sample(30)]##  [1] NA           NA           NA           NA           NA           \"Monica\"     NA           NA           NA          \n## [10] NA           NA           \"Chandler\"   NA           NA           NA           NA           NA           NA          \n## [19] NA           NA           NA           NA           NA           \"Joey\"       \"Phoebe\"     NA           \"New Scene\" \n## [28] NA           NA           \"Written by\"\n# remove NAs\nnodes_char_clean1 <- nodes_char[!is.na(nodes_char)] \n\n# remove entries with \"all\", \" and \" or \"by\" irrelevant of the case\nnodes_char_clean2 <- nodes_char_clean1[\n  !grepl(\"all| and |by\", tolower(nodes_char_clean1))\n] \n\n# check \nnodes_char_clean2[sample(20)]##  [1] \"Chandler\"  \"Monica\"    \"Chandler\"  \"Monica\"    \"Phoebe\"    \"Joey\"      \"Phoebe\"    \"Joey\"      \"Monica\"    \"Monica\"   \n## [11] \"Chandler\"  \"Chandler\"  \"New Scene\" \"Ross\"      \"Joey\"      \"Chandler\"  \"Joey\"      \"Chandler\"  \"Phoebe\"    \"Chandler\"\n# number each scene by counting previous \"New Scene\" entries and adding 1\nscene_count <- c()\n\nfor (i in 1:length(nodes_char_clean2)) {\n  scene_count[i] <- sum(grepl(\"New Scene\", nodes_char_clean2[1:i])) + 1\n}\nlibrary(dplyr)\n\nresults <- data.frame(scene = scene_count, character = nodes_char_clean2) %>% \n    dplyr::filter(character != \"New Scene\") %>% \n    dplyr::distinct(scene, character) %>% \n    dplyr::mutate(\n      scene = scene - min(scene) + 1, # set first scene number to 1\n      character = character %>% \n        tolower() %>% \n        tools::toTitleCase()\n    ) # title case\n\n# check the first ten rows\nhead(results, 10)##    scene character\n## 1      1    Monica\n## 2      1      Joey\n## 3      1  Chandler\n## 4      1    Phoebe\n## 5      1      Ross\n## 6      1    Rachel\n## 7      1  Waitress\n## 8      2    Monica\n## 9      2  Chandler\n## 10     2      Ross"},{"path":"restructuring-data.html","id":"creating-an-edgelist-from-the-scraped-data","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.2.2 Creating an edgelist from the scraped data","text":"Now scraped data characters spoken numbered scene, can now try build edgelist characters based whether spoken scene. can also consider adding weight edge based number scenes characters spoken., need generate set unique pairs list characters scene. illustrate, let’s look characters Scene 11:unique pairs scene formed starting first character list pairing follow, starting second pairing follows, final pair formed second--last last elements list. Scene 11 unique pairs :Rachel pairs: Rachel-Chandler, Rachel-Joey, Rachel-Monica, Rachel-PaulChandler pairs: Chandler-Joey, Chandler-Monica, Chandler-PaulJoey pairs: Joey-Monica, Joey-PaulMonica pairs: Monica-PaulSo write function called unique_pairs() accepts character vector arbitrary length forms pairs progressively way. can apply function every scene.Now let’s test new function Scene 11 characters:looks right. Now can easily generate edgelist episode applying new function scene.looks like worked. Now can just count number times distinct pair occurs order get edge weights (making sure ignore order characters).can now use edgelist create undirected network graph first episode Friends. First create igraph object visualize using edge thickness based weights, Figure 5.10.\nFigure 5.10: Visualization network characters Episode 1 Friends, based characters speaking scene together\n","code":"\n(scene11_chars <- results |> \n  dplyr::filter(scene == 11) |> \n  dplyr::pull(character))## [1] \"Rachel\"   \"Chandler\" \"Joey\"     \"Monica\"   \"Paul\"\nunique_pairs <- function(char_vector = NULL) {\n  # ensure unique entries\n  vector <- as.character(unique(char_vector))\n  # create from-to column dataframe\n  df <- data.frame(char1 = character(), \n                   char2 = character(), \n                   stringsAsFactors = FALSE)\n  # iterate over each entry to form pairs\n  if (length(vector) > 1) {\n    for (i in 1:(length(vector) - 1)) {\n      char1 <- rep(vector[i], length(vector) - i) \n      char2 <- vector[(i + 1): length(vector)] \n      \n      df <- df %>% \n        dplyr::bind_rows(\n          data.frame(char1 = char1, \n                     char2 = char2, \n                     stringsAsFactors = FALSE) \n        )\n    }\n  }\n  #return result\n  df\n}\nunique_pairs(scene11_chars)##       char1    char2\n## 1    Rachel Chandler\n## 2    Rachel     Joey\n## 3    Rachel   Monica\n## 4    Rachel     Paul\n## 5  Chandler     Joey\n## 6  Chandler   Monica\n## 7  Chandler     Paul\n## 8      Joey   Monica\n## 9      Joey     Paul\n## 10   Monica     Paul\n# run unique_pairs by scene\nfriends_ep101 <- results |> \n  dplyr::group_by(scene) |> \n  dplyr::summarise(unique_pairs(character)) |> \n  dplyr::ungroup()\n\n# check\nhead(friends_ep101)## # A tibble: 6 × 3\n##   scene char1  char2   \n##   <dbl> <chr>  <chr>   \n## 1     1 Monica Joey    \n## 2     1 Monica Chandler\n## 3     1 Monica Phoebe  \n## 4     1 Monica Ross    \n## 5     1 Monica Rachel  \n## 6     1 Monica Waitress\n# create weight as count of scenes \nfriends_ep101_edgelist <- friends_ep101 |> \n  dplyr::select(-scene) |> \n  dplyr::mutate(from = pmin(char1, char2), to = pmax(char1, char2)) |> \n  dplyr::count(from, to, name = \"weight\")\n\n# check\nhead(friends_ep101_edgelist)## # A tibble: 6 × 3\n##   from     to       weight\n##   <chr>    <chr>     <int>\n## 1 Chandler Customer      1\n## 2 Chandler Joey          8\n## 3 Chandler Monica        6\n## 4 Chandler Paul          2\n## 5 Chandler Phoebe        5\n## 6 Chandler Rachel        6\n# create igraph object\nfriends_ep1_network <- igraph::graph_from_data_frame(\n  d = friends_ep101_edgelist,\n  directed = FALSE\n)\n\n# visualize\nggraph(friends_ep1_network) +\n  geom_edge_link(aes(edge_width = weight), color = \"grey\", alpha = 0.5,\n                 show.legend = FALSE) +\n  geom_node_label(aes(label = name), color = \"blue\") +\n  theme_void()"},{"path":"restructuring-data.html","id":"approaches-in-python","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.2.3 Approaches in Python","text":"repeat work Section 5.2 Python, use BeautifulSoup package scrape web script first episode Friends.object friends_ep1 contains HTML code script web page. Now need look string Scene: replace string <b>New Scene:<\/b>. clear soon put replacement string bold HTML tags.Now know viewing web page inspecting HTML code characters’ names speaking scenes inside bold strong HTML tags, firstly lets get everything bold strong tags document, let’s match alphabetic string (including spaces) prior colon using regular expression syntax. include New Scene tags created last step.looks promising - new need get rid ‘’ entries entries containing ’ ’.Now ready organize characters scene. First scene count, create dataframe obtain unique character lists scene.Now need create function find unique pairs inside scene character list. ’s one way :looks right. Now need apply every scene gather results one DataFrame.Now can order across rows alphabetically count occurrences unique character pair get edge weights.need create visualize graph Episode 1 Friends, can seen Figure 5.11 edge thickness determined edge weight.\nFigure 5.11: Graph Friends character network Episode 1 edge width indicating number shared scenes\n","code":"import requests\nfrom bs4 import BeautifulSoup\n\nurl=\"https://fangj.github.io/friends/season/0101.html\"\nscript = requests.get(url)\n\n# parse the html of the page\nfriends_ep1 = BeautifulSoup(script.text, \"html.parser\")originalString = \"Scene:\"\nreplaceString = \"<b>New Scene:<\/b>\"\nfriends_ep1_replace = BeautifulSoup(str(friends_ep1).replace(originalString, \nreplaceString))# use re (regular expressions) package\nimport re\n\n# find everything in bold tags with alpha preceding a colon\nsearchstring = re.compile(\"^[A-Za-z ]+(?=:)\")\nfriends_ep1_bold = friends_ep1_replace.find_all(['b', 'strong'], \ntext = searchstring)\n\n# extract the text and remove colons\nfriends_ep1_list = [friends_ep1_bold[i].text.replace(':', '') \nfor i in range(0, len(friends_ep1_bold) - 1)]\n\n# check unique values returned\nset(friends_ep1_list)## {'Frannie', 'Phoebe', 'Monica', 'Priest on TV', 'Chandler', 'Rachel', 'Paul', 'Monica ', 'All', 'Joey', 'New Scene', 'Waitress', 'Ross and Rachel', 'Customer', 'Chandler ', 'Ross'}friends_ep1_list2=[entry.strip() for entry in friends_ep1_list \nif \"All\" not in entry and \" and \" not in entry]\n\nset(friends_ep1_list2)## {'Frannie', 'Phoebe', 'Monica', 'Priest on TV', 'Chandler', 'Rachel', 'Paul', 'Joey', 'New Scene', 'Waitress', 'Customer', 'Ross'}import pandas as pd\n\n# number each scene by counting previous \"New Scene\" entries and adding 1\nscene_count = []\n\nfor i in range(0,len(friends_ep1_list2)):\n  scene_count.append(friends_ep1_list2[0:i+1].count(\"New Scene\"))\n  \n# create a pandas dataframe\ndf = {'scene': scene_count, 'character': friends_ep1_list2}\nscenes_df = pd.DataFrame(df)\n\n# remove New Scene rows\nscenes_df = scenes_df[scenes_df.character != \"New Scene\"]\n\n# get unique characters by scene\nscenes = scenes_df.groupby('scene')['character'].unique()\n\n# check\nscenes.head()## scene\n## 1    [Monica, Joey, Chandler, Phoebe, Ross, Rachel,...\n## 2    [Monica, Chandler, Ross, Rachel, Phoebe, Joey,...\n## 3                                             [Phoebe]\n## 4                               [Ross, Joey, Chandler]\n## 5                                       [Monica, Paul]\n## Name: character, dtype: objectimport numpy as np \n\n# define function\ndef unique_pairs(chars: object) -> pd.DataFrame:\n  # start with uniques\n  characters = np.unique(chars)\n  # create from-to list dataframe\n  char1 = []\n  char2 = []\n  df = pd.DataFrame({'char1': char1, 'char2': char2})\n  # iterate over each entry to form pairs\n  if len(characters) > 1:\n    for i in range(0, len(characters) - 1):\n      char1 = [characters[i]] * (len(characters) - i - 1)\n      char2 = [characters[i] for i in range(i + 1, len(characters))]\n      # append to dataframe\n      df2 = pd.DataFrame({'char1': char1, 'char2': char2})\n      df = df.append(df2, ignore_index = True)\n  return df\n\n# test on scene 11\nunique_pairs(scenes[11])##       char1   char2\n## 0  Chandler    Joey\n## 1  Chandler  Monica\n## 2  Chandler    Paul\n## 3  Chandler  Rachel\n## 4      Joey  Monica\n## 5      Joey    Paul\n## 6      Joey  Rachel\n## 7    Monica    Paul\n## 8    Monica  Rachel\n## 9      Paul  Rachel# start DataFrame\nchar1 = []\nchar2 = []\n\nedgelist_df = pd.DataFrame({'char1': char1, 'char2': char2})\n\nfor scene in scenes:\n  df = unique_pairs(scene)\n  edgelist_df = edgelist_df.append(df, ignore_index = True)# sort each row alphabetically\nedgelist_df = edgelist_df.sort_values(by = ['char1', 'char2'])\n\n# count by unique pair\nedgelist = edgelist_df.groupby(['char1', 'char2']).\\\napply(len).to_frame(\"weight\").reset_index()\n\n# check\nedgelist.head()##       char1     char2  weight\n## 0  Chandler  Customer       1\n## 1  Chandler      Joey       8\n## 2  Chandler    Monica       6\n## 3  Chandler      Paul       2\n## 4  Chandler    Phoebe       5import networkx as nx\nfrom matplotlib import pyplot as plt\n\n# create networkx object\nfriends_ep1_network = nx.from_pandas_edgelist(edgelist,\nsource = \"char1\", target = \"char2\", edge_attr=True)\n\n# visualize with edge weight as edge width\nnp.random.seed(123)\nweights = list(nx.get_edge_attributes(friends_ep1_network, 'weight').values())\nnx.draw_networkx(friends_ep1_network, node_color = \"lightblue\", node_size = 60,\nedge_color = \"grey\", with_labels = True, width = np.array(weights))\nplt.show()"},{"path":"restructuring-data.html","id":"learning-exercises-3","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.3 Learning exercises","text":"","code":""},{"path":"restructuring-data.html","id":"discussion-questions-3","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.3.1 Discussion questions","text":"kinds data sources likely already exist graph-friendly form? ?two important things define intend transform data graph-friendly structure?Imagine working global Law firm database three tables. One table lists employee location details including office home address. second table includes details clients employee working specialty areas focus client. third table lists education history employee including school major/subject area. List different ways can think turn data graph.Pick one two answers Question 3 write two options structure graph . one option, consider graph employees vertices. consider graph least two different entity types vertices.Considering answers Question 4, might edges defined options? edges properties?\nexamples Questions 6-10, discuss ways information extracted, reshaped loaded graph order serve useful analytic purpose.Loyalty card data retail company showing detailed information customer visits purchases.Data calendars large number company employees.Data automatic number plate scanning police cameras major roads large city.Data addresses deliveries made courier company.Electronic files legal contracts different organizations deliver specified services specified prices.","code":""},{"path":"restructuring-data.html","id":"data-exercises-3","chapter":"5 Restructuring Data For Use in Graphs","heading":"5.3.2 Data exercises","text":"Load park_reviews dataset onadata package download internet30. data contains reviews collection Yelp users dog parks Phoenix, Arizona area.Create edgelist vertex set allows build graph showing parks users entity types. Include stars rating edge property ensure entity types distinguishable data.Use edgelist vertex set create graph object edge vertex properties.Visualize graph way differentiates users parks. Use visualization point users reviewed numerous dog parks.Generate subgraph consisting edges stars rating 5. Repeat visualization subgraph. Use identify frequently 5-star rated park. user reviewed one park 5-star rated?Go webpage containing script Season 1 Episode 2 Friends https://fangj.github.io/friends/season/0102.html.Repeat steps Section 5.2 scrape webpage obtain list scenes characters speaking scene. Watch additional cleaning might necessary script compared Episode 1 script.Use methods Section 5.2, including unique_pairs() function, create edgelist character network Episode 2 edge weight based number scenes characters spoke .Create graph Episode 2 visualize graph.Combine edgelist Episodes 1 2 adding weights character pair, create visualize new graph combines episodes.Extension:. Try wrap previous methods function creates edgelist arbitrary Friends episode found https://fangj.github.io/friends/. Add additional cleaning commands unexpected formatting might see different scripts.Extension:. Try run function Season 1 episodes Friends use results create visualize graph character network entire first season.","code":""},{"path":"paths-distance.html","id":"paths-distance","chapter":"6 Paths and Distance in Graphs","heading":"6 Paths and Distance in Graphs","text":"course earlier chapters, learned transform data graph-friendly structures create visualize graphs, started see concepts emerge informally now start formally describe support means mathematical definition measurement. example, seen vertices can connected directly indirectly vertices means single edge series edges. seen visually can greater ‘distance’ vertices graphs compared others, cases possible get one vertex another means.process moving vertex vertex graph known graph traversal. Graph traversal extremely important topic underlies sort graph search algorithm. Graph search algorithms, turn, foundational determining optimal shortest path given pair vertices, set shortest paths given vertex vertices. Shortest paths important definition distance diameter networks. Distance diameter useful intuitive measurements frequently used understanding ‘closeness’ ‘familiarity’ vertices overall network, determining different degrees influence vertices.chapter progressively look concepts, reader good understanding meaning derived, delve convenient functions R Python can calculate paths, distance diameter. , towards end chapter, look short case study puts concepts use analysis moderately large complex network.early work chapter use graph call \\(G_{14}\\), shown Figure 6.1. graph contains fourteen vertices labelled 1 thru 14, vertices connected least one vertex network. known connected graph.\nFigure 6.1: \\(G_{14}\\) graph\n","code":""},{"path":"paths-distance.html","id":"theory-of-traversal-and-distance-in-graphs","chapter":"6 Paths and Distance in Graphs","heading":"6.1 Theory of traversal and distance in graphs","text":"","code":""},{"path":"paths-distance.html","id":"traversal","chapter":"6 Paths and Distance in Graphs","heading":"6.1.1 Paths and graph traversal","text":"Given two vertices \\(\\) \\(B\\) graph \\(G\\), path \\(\\) \\(B\\) series edges \\(G\\) begin \\(\\) end \\(B\\). example, \\(G_{14}\\) graph, following examples paths Vertex 9 Vertex 4:\\(9 \\longrightarrow 8 \\longrightarrow 4\\)\\(9 \\longrightarrow 7 \\longrightarrow 4\\)\\(9 \\longrightarrow 7 \\longrightarrow 8 \\longrightarrow 4\\)\\(9 \\longrightarrow 8 \\longrightarrow 7 \\longrightarrow 4\\)\\(9 \\longrightarrow 7 \\longrightarrow 6 \\longrightarrow 4\\)\\(9 \\longrightarrow 8 \\longrightarrow 7 \\longrightarrow 6 \\longrightarrow 4\\)\\(9 \\longrightarrow 7 \\longrightarrow 8 \\longrightarrow 7 \\longrightarrow 4\\)acyclic path path vertex repeated. except last path acyclic paths Vertex 9 Vertex 4 \\(G_{14}\\). general, interested efficient paths vertices, interested acyclic paths graph. acyclic condition also ensures number paths two vertices graph finite. refer path now , always mean acyclic path unless say otherwise.Playing around: Let’s reminisce Chapter 1 studied Bridges Königsberg problem. may recall Eulerian Path Euler Walk path visits every vertex graph least uses every edge graph exactly . Consider subgraphs \\(G_{14}\\) taking subsets vertices edges connect . many vertices largest subgraph can form \\(G_{14}\\) contains Eulerian Path? R user, consider using eulerian package verify answer.order determine whether path exists two vertices \\(\\) \\(B\\) graph, need able search graph possible routes across edges graph starting Vertex \\(\\) ending Vertex \\(B\\), passing vertices necessary. Let’s take example \\(G_{14}\\) graph. Let’s say want determine path exists Vertex 9 Vertex 5. human looks simple graph like , visually obvious path exists. However, mentioned earlier chapters, complex graphs visualized simply one, computer programs human. going need systematic programmable way searching graph path Vertex 9 Vertex 5.One option traverse graph using breadth-first approach. means search immediate neighbors Vertex 9, search immediate neighbors immediate neighbors, either eventually find Vertex 5 covered vertices concluded possible path Vertex 5. simple breadth-first algorithm achieve :immediate neighbors Vertex 9 Vertices 7, 8, 10 13. found Vertex 5, mark Vertex 9 neighbor vertices searched.unsearched immediate neighbors Vertices 7, 8, 10 13 Vertices 4, 6, 11, 12 14. still found Vertex 5, add vertices list vertices searched.unsearched immediate neighbors Vertices 4, 6, 11, 12 14 Vertices 1, 2, 3 5. found Vertex 5 therefore path exists Vertex 9 Vertex 5.Alternatively, traverse graph using depth-first approach. means choose neighboring vertex Vertex 9, find neighboring vertex neighboring vertex, keep going find unsearched neighboring vertices. happens, move back vertex look unsearched neighboring vertex. find one, repeat process. , move back another vertex either find Vertex 5 searched vertices conclude path Vertex 5 exist. simple depth-first algorithm achieve :select Vertex 10 immediate neighbor Vertex 9 mark Vertex 9 10 searched.select Vertex 11 unsearched immediate neighbor Vertex 10 mark searched.select Vertex 12 unsearched immediate neighbor Vertex 11 mark searched.find unsearched immediate neighbor Vertex 12. move back Vertex 11.find unsearched immediate neighbor Vertex 11. move back Vertex 10.find unsearched immediate neighbor Vertex 10. move back Vertex 9.select Vertex 8 unsearched immediate neighbor Vertex 9.select Vertex 4 unsearched immediate neighbor Vertex 8.select Vertex 3 unsearched immediate neighbor Vertex 4.find unsearched immediate neighbor Vertex 3. move back Vertex 4.select Vertex 5 unsearched immediate neighbor Vertex 4. found Vertex 5 therefore path exists Vertex 9 Vertex 5.appears breadth-first approach quicker computationally efficient depth-first approach, really depends specifics search. Breadth first searches like stay close starting node, gradually increase search radius. Depth-first searches like ‘run away come back.’ \\(G_{14}\\) example , network small nodes within short path Vertex 9, breadth-first search usually find target vertex quickly compared depth-first search, whose speed depend choice route takes. However, target nodes ‘far away’ network, depth-first approaches can efficient. average, however, computation time complexity search types similar31.Thinking ahead: Consider smallest number edges need traversed get Vertex 9 Vertex 5 \\(G_{14}\\) graph. Work think , try use depth-first search move Vertex 9 Vertex 5 different ways. depth-first search always return path smallest number edges? ? breadth-first search?","code":""},{"path":"paths-distance.html","id":"path-length-and-distance","chapter":"6 Paths and Distance in Graphs","heading":"6.1.2 Path length and distance","text":"path vertex \\(\\) vertex \\(B\\) graph, length path sum weights edges traversed path. graph edge weight property, weight every edge assumed equal 1. Therefore unweighted graph, length path number edges traversed path.Looking (acyclic) paths Vertex 9 Vertex 4 \\(G_{14}\\) enumerated Section 6.1.1, can see two paths length 2, three length 3, one length 4. Now let’s look new graph \\(G_{14W}\\) weighted edges Figure 6.2.\nFigure 6.2: \\(G_{14W}\\) weighted graph\nlist acyclic paths Vertex 9 Vertex 4 lengths follows:\\(9 \\longrightarrow 8 \\longrightarrow 4\\) (Length 5)\\(9 \\longrightarrow 7 \\longrightarrow 4\\) (Length 5)\\(9 \\longrightarrow 7 \\longrightarrow 8 \\longrightarrow 4\\) (Length 7)\\(9 \\longrightarrow 8 \\longrightarrow 7 \\longrightarrow 4\\) (Length 5)\\(9 \\longrightarrow 7 \\longrightarrow 6 \\longrightarrow 4\\) (Length 6)\\(9 \\longrightarrow 8 \\longrightarrow 7 \\longrightarrow 6 \\longrightarrow 4\\) (Length 6)distance vertices \\(\\) \\(B\\) - sometimes notated \\(d(, B)\\) - length shortest path \\(\\) \\(B\\). Note requirement unique shortest path, shortest path traversed one way graph. unweighted graph \\(G_{14}\\) distance Vertex 9 Vertex 4 2. weighted graph \\(G_{14W}\\) distance Vertex 9 Vertex 4 5. path exists \\(\\) \\(B\\) distance called ‘infinite’ denoted \\(\\infty\\) convention.\\(\\) \\(B\\) vertices undirected graph, \\(d(, B) = d(B, )\\). However, may true directed graph.Distance extremely important concept graphs many practical applications. physical networks like road rail networks, distance meant quite literally greater distances vertices usually translating greater time taken travel vertices. social networks distance can relate ‘familiarity’ ‘commonality’ two individuals. Greater distance individuals network usually implies lower likelihood individuals know real life, lower likelihood information given one individual find way individuals. graphs represent knowledge interests individuals (‘likes’ social networks knowledge graphs), greater distance individual topic, event product usually implies individual less likely interested topic, event product. utility graph distance measures fields like transport, communications, marketing sociology therefore quite obvious.","code":""},{"path":"paths-distance.html","id":"shortest-path-algorithms","chapter":"6 Paths and Distance in Graphs","heading":"6.1.3 Shortest path algorithms","text":"Due importance distance graphs, various algorithms developed calculate shortest paths. algorithms — Dijkstra’s algorithm Bellman-Ford algorithm — focus single source shortest path, calculates shortest path given vertex vertices graph. Others — Johnson’s algorithm Floyd-Warshall algorithm — focus pairs shortest path problem calculate shortest path pair vertices graph. Special algorithms also developed facilitate fast calculation shortest path specific pair vertices, * algorithm.Dijkstra’s algorithm perhaps well-known (established) shortest path algorithm, easiest explain. Let’s take look algorithm works using unweighted \\(G_{14}\\) graph illustrative example. Dijkstra’s algorithm accepts single initial vertex calculates distance vertex vertices graph. Let’s use Vertex 9 initial vertex. Dijkstra’s algorithm operates series iterative steps follows:assign tentative distance Node 9 zero, Node 9 nodes \\(\\infty\\). mark Node 9 searched.Move neighbors Vertex 9, calculate length path Node 9 neighbours update tentative distance length. case give tentative distance 1 vertices 7, 8, 10 13. Mark vertices searched.Go vertices 7, 8, 10 13 turn, marking one current proceed. current vertex, calculate length shortest path Node 9 unsearched neighbors current vertex pass current vertex. length smaller existing tentative distance, update tentative distance length. move Vertex 7 first, see two unsearched neighbours: vertices 4 6. distance Vertex 9 vertices passing Vertex 7 2, less \\(\\infty\\), update tentative distances Vertex 9 vertices 4 6 2.similar fashion update tentative distances Vertex 9 vertices 11, 12, 14 2.mark vertices 4, 6, 11, 12 14 searched move vertices repeat process neighbors. way update tentative distance Vertex 9 vertices 1, 2, 3 5 3. mark vertices 1, 2, 3 5 searched.now searched vertices graph, tentative distances vertex 9 vertices now assigned final distances.Playing around: Try repeat process Dijkstra’s algorithm weighted graph \\(G_{14W}\\). vertex shortest distance Vertex 9 vertex longest distance?Single source shortest path algorithms like Dijkstra’s algorithm can used solve pairs distance problem simply repeating algorithm vertex graph. large graphs, however, can inefficient, explains alternative algorithms developed pairs problem32.","code":""},{"path":"paths-distance.html","id":"graph-diameter-and-density","chapter":"6 Paths and Distance in Graphs","heading":"6.1.4 Graph diameter and density","text":"diameter graph \\(G\\) maximum distance pair vertices \\(G\\). Alternatively stated, longest shortest path vertices \\(G\\). graph connected graph, definition diameter infinite. Diameter usually useful measure connected graphs, studying connected subgraphs larger graphs.diameter social network intuitive measure overall ‘closeness’ individuals network. Networks smaller diameters can often considered ‘close-knit’ communities. However, care needs taken interpreting diameter network, particularly given measures may better representative close-knit community . Common alternative metrics used assess overall network ‘closeness’ include:Average distance pairs verticesThe density network, defined number edges divided total possible number edges simple graph33. complete graph, example, density 1.Consider two graphs Figure 6.3. first graph, diameter 5 second diameter 4. However, average distance vertices first graph 2.38 second graph 2.49. graphs density 0.2. Therefore, measure regard first graph ‘closer,’ another regard second graph closer, third measure regard .\nFigure 6.3: Two graphs illustrating closeness can measured different ways\nPlaying around: Graph distance diameter great interest everyday life. may know theory six degrees separation, suggests entire world connected graph diameter 6. Several industry-specific case studies arisen research just fun. first 1969 paper two psychologists (Travers Milgram (1969)), used experiment chain letters determine average distance people population Nebraska Massachusetts 6.2. 2011 study Facebook graph (Ugander et al. (2011)) determined Facebook member network almost fully connected 99.91% vertices connected subgraph, average distance vertices 4.7. entertainment industry, Bacon number used denote distance individual actor Kevin Bacon, based participation movie TV production. academia, Erdös number used denote distance individual mathematician Paul Erdös. Bacon Erdös arisen central points highly active disciplines result high centrality network. look centrality next chapter, interested can find Bacon number actor visiting https://oracleofbacon.org/.","code":""},{"path":"paths-distance.html","id":"calculating-paths-distance-diameter-and-density-in-r","chapter":"6 Paths and Distance in Graphs","heading":"6.2 Calculating Paths, Distance, Diameter and Density in R","text":"Thanks packages like igraph R, much easier calculate path, distance density metrics understand theory behind . section illustrate various functions can used easily calculate metrics. begin, let’s create graphs \\(G_{14}\\) \\(G_{14W}\\) previous section downloading g14_edgelist dataset onadata package downloading internet34.Let’s start creating weighted \\(G_{14W}\\) graph previous section.all_simple_paths() function igraph returns paths specified vertex, expects least igraph object vertex name vertex arguments. argument specifies vertex, function return paths vertex. Otherwise return list containing paths specified vertex vertices. Note functions expect vertex name character string.see agrees manual calculations Section 6.1.1, whether edges weighted. function easy use case undirected graphs. using digraphs, additional argument called mode, specifying direction paths seeking. , , total accepted values argument.all_shortest_paths() function performs task previous function restricts output paths shortest length. function returns list objects, paths can found res element list.Note function returned shortest path according edge weights. ignore edge weights, simply set weights = NA. equivalent calculating shortest paths unweighted \\(G_{14}\\) graph.","code":"\n# download the edgelist\ng14_edgelist <- read.csv(\"https://ona-book.org/data/g14_edgelist.csv\")\n\n# view head\nhead(g14_edgelist)##   from to weight\n## 1    9 10      4\n## 2   10 11      1\n## 3   11 12      1\n## 4   10 12      1\n## 5    9 13      3\n## 6   13 14      2\n# create weighted graph\n(g14w <- igraph::graph_from_data_frame(g14_edgelist, directed = FALSE))## IGRAPH b02b985 UNW- 14 18 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from b02b985 (vertex names):\n##  [1] 9 --10 10--11 11--12 10--12 9 --13 13--14 9 --8  9 --7  8 --7  4 --6  4 --7  8 --4  6 --7  4 --1  4 --2  4 --3  4 --5 \n## [18] 1 --2\nigraph::all_simple_paths(g14w, from = \"9\", to = \"4\")## [[1]]\n## + 3/14 vertices, named, from b02b985:\n## [1] 9 8 4\n## \n## [[2]]\n## + 4/14 vertices, named, from b02b985:\n## [1] 9 8 7 4\n## \n## [[3]]\n## + 5/14 vertices, named, from b02b985:\n## [1] 9 8 7 6 4\n## \n## [[4]]\n## + 4/14 vertices, named, from b02b985:\n## [1] 9 7 8 4\n## \n## [[5]]\n## + 3/14 vertices, named, from b02b985:\n## [1] 9 7 4\n## \n## [[6]]\n## + 4/14 vertices, named, from b02b985:\n## [1] 9 7 6 4\nshortest_9to4 <- igraph::all_shortest_paths(g14w, from = \"9\", to = \"4\")\nshortest_9to4$res## [[1]]\n## + 3/14 vertices, named, from b02b985:\n## [1] 9 8 4\n## \n## [[2]]\n## + 3/14 vertices, named, from b02b985:\n## [1] 9 7 4\n## \n## [[3]]\n## + 4/14 vertices, named, from b02b985:\n## [1] 9 8 7 4\nshortest_9to4_uw <- igraph::all_shortest_paths(g14w, from = \"9\", to = \"4\", weights = NA)\nshortest_9to4_uw$res## [[1]]\n## + 3/14 vertices, named, from b02b985:\n## [1] 9 7 4\n## \n## [[2]]\n## + 3/14 vertices, named, from b02b985:\n## [1] 9 8 4"},{"path":"vertex-importance.html","id":"vertex-importance","chapter":"7 Vertex Importance and Centrality","heading":"7 Vertex Importance and Centrality","text":"","code":""},{"path":"community.html","id":"community","chapter":"8 Segmentation and Community","heading":"8 Segmentation and Community","text":"","code":""},{"path":"similarity.html","id":"similarity","chapter":"9 Commonality and Assortativity","heading":"9 Commonality and Assortativity","text":"","code":""},{"path":"databases.html","id":"databases","chapter":"10 Graphs as Databases","heading":"10 Graphs as Databases","text":"","code":""},{"path":"advanced-viz.html","id":"advanced-viz","chapter":"11 Advanced Network Visualization","heading":"11 Advanced Network Visualization","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
