[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"","code":"\n## placeholder"},{"path":"graphs-everywhere.html","id":"graphs-everywhere","chapter":"1 Graphs everywhere!","heading":"1 Graphs everywhere!","text":"","code":""},{"path":"working.html","id":"working","chapter":"2 Working With Graphs","heading":"2 Working With Graphs","text":"think graph, usually think diagram dots lines. Indeed, seen introduction book, concept graph came existence 1600s mathematician tried solve problem diagramatically. makes sense think graphs way, intuitive, easy communicate many cases diagram helps us better address problem solving. However, diagram one way describing graph, particularly scalable. easy draw diagram graph nodes edges like Bridges Königsberg problem, problem involved thousands nodes millions edges? interesting graphs want study complex nature contain many hundreds thousands nodes many edges, diagrams graphs size always useful helping us solve problems.chapter gain basic understanding graphs construct work R Python. introduce general way describing graph mathematically, discuss different types graphs can defined placing conditions general definition. go look different options known graph can described, including edgelists adjacency matrices. Equipped understanding, learn create simple graph objects R Python. Unlike larger examples introduce later chapters, data examples use chapter simple straightforward work . focus make sure basic structures definitions understood proceeding . Readers skip chapter intend fully understand methods procedures introduced later chapters.","code":""},{"path":"working.html","id":"elementary-graph-theory","chapter":"2 Working With Graphs","heading":"2.1 Elementary Graph Theory","text":"way graphs created, stored manipulated data science languages like R Python bears strong resemblance defined studied algebraically. start section general algebraic definition graph proceed look different varieties graphs different ways representing graphs using data.","code":""},{"path":"working.html","id":"graph-def","chapter":"2 Working With Graphs","heading":"2.1.1 General definition of a graph","text":"graph \\(G\\) consists two sets. first set \\(V\\) known vertex set node set. second set \\(E\\) known edge set, consists pairs elements \\(V\\). Given graph made two sets, often notate graph \\(G = (V, E)\\). two vertices appear pair E, vertices said adjacent connected vertices.Let’s use example illustrate definition. Figure 2.1 diagram graph \\(G_{\\mathrm{work}}\\) four vertices representing four people. edge connects two vertices two people worked together.\nFigure 2.1: Four people connected according whether worked together\nvertex set \\(V\\) graph \\(G_{\\mathrm{work}}\\) :\\[\nV = \\{\\mathrm{David}, \\mathrm{Suraya}, \\mathrm{Jane}, \\mathrm{Zubin}\\}\n\\]edge set \\(E\\) graph \\(G_{\\mathrm{work}}\\) must notated pairs elements vertex set \\(V\\). can notate many ways. One example may notate edge set formal set-theoretic notation:alternative notation also used :doesn’t really matter choose notate vertex edge sets long notation contains information required construct graph.Thinking ahead: already know load graphs R Python, might want take look graph object now, see object structured defined around two set structure \\(G = (V, E)\\). example R, igraph igraphdata packages installed loaded, use data(Koenigsberg) load data Bridges Königsberg graph. Now take look vertex set using V(Koenigsberg) edge set using E(Koenigsberg).relationship modeling using edges graph \\(G_{\\mathrm{work}}\\) undirected. David worked Zubin, automatically conclude Zubin worked David. Therefore need direction edges \\(G_{\\mathrm{work}}\\). call graph undirected graph. undirected graph, order nodes pair edge set \\(E\\) relevant. example, \\(\\mathrm{David}\\longleftrightarrow\\mathrm{Zubin}\\) \\(\\mathrm{Zubin}\\longleftrightarrow\\mathrm{David}\\).graph direction important called directed graph. example, let’s consider graph \\(G_{\\mathrm{manage}}\\) group four people edge exists two people first person manager second person, Figure 2.2.\nFigure 2.2: Four people connected according whether one person manages another\nClearly, direction matters graph, therefore may wish notate edge set \\(E\\) \\(G_{\\mathrm{manage}}\\) :\\[\nE = \\{\\mathrm{Suraya}\\longrightarrow\\mathrm{David}, \\mathrm{David}\\longrightarrow\\mathrm{Zubin}, \\mathrm{David}\\longrightarrow\\mathrm{Jane}\\}\n\\]Note still possible directed graph edges point directions. unlikely case \\(G_{\\mathrm{manage}}\\) manager relationship usually operates one direction, imagine another graph \\(G_{\\mathrm{like}}\\) edge exists two people first person listed second person someone like. perfectly possible edges exist directions two vertices graph like . example, may Jane likes Zubin Zubin likes Jane. However, important note graph, \\(\\mathrm{Zubin}\\longrightarrow\\mathrm{Jane}\\) \\(\\mathrm{Jane}\\longrightarrow\\mathrm{Zubin}\\) considered two different edges.Thinking ahead: load directed graph R Python, see edges notated differently undirected graph. example, using igraph igraphdata R, load UKfaculty graph using data(UKfaculty). Now look edges using E(UKfaculty) compare see Koenigsberg graph. See difference?","code":""},{"path":"working.html","id":"graph-types","chapter":"2 Working With Graphs","heading":"2.1.2 Types of graphs","text":"Equipped general definition graph, can now define different varieties graph adding allowing certain conditions edges general graph. many varieties, common graph types.multigraph graph multiple edges can occur two vertices. Usually occurs edges defining different kinds relationships. Travel routes common examples multigraphs, edge represents different carrier. example, Figure 2.3 graph flights San Francisco (SFO), Philadelphia (PHL) Tucson (TUS) airports based data set December 2010. graph layered onto map United States. Philadelphia Tucson common route offered one carrier one direction, multiple carriers operating directions Philadelphia San Francisco San Francisco Tucson.\nFigure 2.3: Carrier routes operating three US airports December 2010\nMultigraphs also commonly used individuals entities can related different ways. example, imagine combine \\(G_{\\mathrm{work}}\\) \\(G_{\\mathrm{manage}}\\) graphs Section 2.1.1 one single directed graph depicting ‘worked ’ ‘manages’ relationships. might look like Figure 2.4.\nFigure 2.4: Graph depicting different types relationships individuals\nMany large graphs used practice multigraphs, built capture many different types relationships many different types entities. example, graph organizational network might contain vertices represent individuals, organizational units knowledge areas. Multiple different types relationships exist individuals (‘worked ,’ ‘manages,’ ‘published ’), individuals organizational units (‘member ’ ‘leader ’), individuals knowledge areas (‘affiliated ’ ‘expert ’) sorts possibilities.Pseudographs graphs allow vertices connect . Pseudographs occur certain edges depict relationships can occur vertex. Imagine, example, graph \\(G_{\\mathrm{coffee}}\\) takes four characters \\(G_{\\mathrm{work}}\\) Section 2.1.1 depicts buys coffee . David goes buy Zubin coffee, ’s good chance also buy one process. Thus, can expect following edge set:\\[\nE = \\{\\mathrm{David}\\longrightarrow\\mathrm{Zubin}, \\mathrm{David}\\longrightarrow\\mathrm{David}\\}\n\\]example pseudographs frequently occur might analysis financial transactions. Let’s imagine graph three verticies representing different companies , B C, edge represent bank transfer one company another certain day. company holds multiple bank accounts, graph might look something like Figure 2.5.\nFigure 2.5: Pseudograph representing bank transfers three companies , B C\ncomplete graph graph pairs vertices connected edge. Let’s go back four characters \\(G_\\mathrm{work}\\) Section 2.1.1. may notice one pair characters worked together. Let’s assume return month later update graph, seems Zubin Suraya now worked together. means graph becomes complete graph depicted Figure 2.6.\nFigure 2.6: Updated version \\(G_\\mathrm{work}\\) one additional edge make complete graph\nComplete graphs rare useful practice, since already know relationship exists every pair vertices, lot reason examine graph put practical use. said, field Graph Theory, can important prove certain graphs complete order support important theoretical results proving important theorems.Bipartite graphs graphs two disjoint sets vertices, vertex one set connected vertices othe set. Imagine add three new individuals \\(G_\\mathrm{work}\\) graph, three individuals work completely different organization four people already graph. new graph \\(G_\\mathrm{new}\\) may look like Figure 2.7, distinct sets vertices representing individuals different organizations.\nFigure 2.7: bipartite graph showing working relationships involving individuals separate organizations B\nExtending idea bipartite graphs, \\(k\\)-partite graphs graphs \\(k\\) disjoined sets vertices, vertex one set connected vertices \\(k - 1\\) sets.Trees can regarded vertices connected edges, trees graphs. example, graph \\(G_\\mathrm{manage}\\) Section 2.1.1 tree displays hierarchical management structure individuals. graph characterized tree needs adhere conditions:undirectedThere exactly one path pair verticesUsually, trees graphs edges represent sort hierarchical nested relationship. Figure 2.8 shows tree graph favorite boy bands, edge indicates vertex member vertex . seems like five magic number great boy band.\nFigure 2.8: Membership exclusive class author’s favourite boy bands can represented tree graph\n","code":""},{"path":"working.html","id":"vertex-edge-prop","chapter":"2 Working With Graphs","heading":"2.1.3 Vertex and Edge Properties","text":"Section 2.1.1 learned graph \\(G = (V, E)\\) consists vertex set \\(V\\) edge set \\(E\\). sets minimum components graph — vertices represent entities graph edges represent relationships entities.can enhance graph provide even richer information entities relationships giving vertices edges properties. vertex property provides specific information vertex edge property provides specific information relationship two vertices.example, let’s return directed graph Figure 2.5, represents bank transfers companies , B, C. graph, know edges transfers took place, know much money involved transfer, currency transfer made. wanted capture information, give edge properties called ‘amt’ ‘cur’ store transfer amount currency edge properties. Similarly, don’t know great deal companies represented vertices. Maybe like know located? , can create vertex property called ‘loc’ store location vertex property.Figure 2.9 shows enhanced graph vertex edge properties added diagramatically.\nFigure 2.9: Graph bank transfers companies , B C additional information stored vertex edge properties\nAlternatively, can notate properties additional sets graph, ensuring entry order respective vertices edges, follows:\\[\n\\begin{aligned}\nG &= (V, E, V_\\mathrm{loc}, E_\\mathrm{cur}, E_\\mathrm{amt}) \\\\\nV &= \\{, B, C\\} \\\\\nE &= \\{\\longrightarrow , \\longrightarrow B, B \\longrightarrow , B \\longrightarrow C\\} \\\\\nV_\\mathrm{loc} &= \\{\\mathrm{USA}, \\mathrm{UK}, \\mathrm{France}\\} \\\\\nE_\\mathrm{cur} &= \\{\\mathrm{USD}, \\mathrm{USD}, \\mathrm{GBP}, \\mathrm{GBP}\\} \\\\\nE_\\mathrm{amt} &= \\{150000, 570000, 230000, 175000\\}\n\\end{aligned}\n\\]Note vertex property set \\(V_\\mathrm{loc}\\) number elements \\(V\\) associated properties appear order vertices \\(V\\). Note also similar size order edge property sets \\(E_\\mathrm{cur}\\) \\(E_\\mathrm{amt}\\). notation system allows us provide information need reliable way number vertex edge properties.Thinking ahead: Go look Bridges Königsberg graph using data(Koenigsberg) R. typing summary(Koenigsberg) see edge vertex properties, listed attr. Vertex properties listed v/c edge properties listed e/c. example, edges - bridges - names can access typing E(Koenigsberg)$name. Hopefully ’ll see seven bridges.One common edge properties come across edge weight. Weighted edges edges given numeric value represent important construct edge importance connection strength. can often used simplify otherwise complex graphs, frequently used calculations related centrality community. example, returning flights graph, instead creating edge carrier, simplify graph creating one edge per route giving weight according number carriers route. graph look like Figure 2.10.\nFigure 2.10: Simplifying flights graph using weighted edges represent number carriers route. Edge thickness represents weight.\n","code":""},{"path":"working.html","id":"rep-graphs","chapter":"2 Working With Graphs","heading":"2.1.4 Representations of graphs","text":"far chapter seen two common ways representing graph. first, well known way, diagram. second algebraic structure consisting vertex set edge set \\(G = (V, E)\\). discussed beginning chapter, diagrams useful visualizing und understanding simple graphs, less useful storing graph data working large graphs. working graphs field data science, two common sources graph data edgelists adjacency matrices.edgelist edge set \\(E\\) graph \\(G = (V, E)\\). don’t care singletons — , vertices connected vertices — vertex set \\(V\\) can derived directly \\(E\\). means edgelist needed build graph provided happy ignore singletons. ’s common analyst happy ignore singletons often interested connections relationships data. Let’s look example.Recall edge set \\(E\\) graph \\(G_\\mathrm{work} = (V, E)\\) Section 2.1.1:Since definition edge \\(E\\) must pair vertices \\(V\\), since concerned singletons (fact, know don’t exist case), can obtain vertex set \\(V\\) simply listing unique vertices pairs \\(E\\)). Therefore can construct \\(V\\) \\[\nV = \\{\\mathrm{David}, \\mathrm{Suraya}, \\mathrm{Jane}, \\mathrm{Zubin}\\}\n\\]now obtained everything need graph edgelist.Edgelists typically take form two columns data, usually labelled ‘’ ‘.’ Therefore edgelist \\(G_\\mathrm{work}\\) look like Table 2.1.\nTable 2.1: Edgelist \\(G_\\mathrm{work}\\) graph\nThinking ahead: Bridges Königsberg graph loaded R, can turn edgelist easily. Try igraph::as_edgelist(Koenigsberg) see get expected output.adjacency matrix square matrix vertices indexing rows columns, \\((, j)\\)-th entry matrix represents number edges vertex \\(\\) vertex \\(j\\). example, using simple graph \\(G_\\mathrm{work}\\) Section 2.1.1, adjacency matrix look like :\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & 0 & 1 & 1 & 1\\\\\n      \\mathrm{Jane} & 1 & 0 & 1 & 1 \\\\\n      \\mathrm{Zubin} & 1 & 1 & 0 & 0 \\\\\n      \\mathrm{Suraya} & 1 & 1 & 0 & 0 \n\\end{array}\n\\]\nAdjacency matrices also commonly written sparse form, without use zeros. example:\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & . & 1 & 1 & 1\\\\\n      \\mathrm{Jane} & 1 & . & 1 & 1 \\\\\n      \\mathrm{Zubin} & 1 & 1 & . & . \\\\\n      \\mathrm{Suraya} & 1 & 1 & . & . \n\\end{array}\n\\]adjacency matrix undirected graph like \\(G_\\mathrm{work}\\) symmetrical diagonal, since existence \\((,j)\\) edge automatically implies existence \\((j, )\\) edge. However, directed graph may symmetrical adjacency matrix. adjacency matrix \\(G_\\mathrm{manage}\\) graph Section 2.1.1.\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & . & 1 & 1 & .\\\\\n      \\mathrm{Jane} & . & . & . & . \\\\\n      \\mathrm{Zubin} & . & . & . & . \\\\\n      \\mathrm{Suraya} & 1 & . & . & . \n\\end{array}\n\\]graph pseudograph, diagonal entries may greater zero, multigraphs can entries non-negative integer. adjacency matrix flight network graph:\\[\n\\begin{array}{cccc}\n      & \\mathrm{SFO} & \\mathrm{PHL} & \\mathrm{TUS} \\\\\n      \\mathrm{SFO} & . & 4 & 4 \\\\\n      \\mathrm{PHL} & 5 & . & 1  \\\\\n      \\mathrm{TUS} & 2 & . & . \n\\end{array}\n\\]Thinking ahead: , Bridges Königsberg graph loaded R, can turn adjacency matrix easily. Try igraph::as_adjacency_matrix(Koenigsberg). Note sparse form output matrix. Now try USairports graph ’d like see larger adjacency matrix.","code":""},{"path":"working.html","id":"creating-graphs-in-r","chapter":"2 Working With Graphs","heading":"2.2 Creating graphs in R","text":"section use examples previous section learn create graph objects R using igraph package, examine structure objects. strong understanding graph objects structured make easier us advanced manipulation calculations involving graphs later book.","code":""},{"path":"working.html","id":"creating-a-graph-from-an-edgelist","chapter":"2 Working With Graphs","heading":"2.2.1 Creating a graph from an edgelist","text":"Let’s start manually creating edgelist \\(G_\\mathrm{work}\\) graph Section 2.1.1 dataframe R. can see edgelist Table 2.1. Remember \\(G_\\mathrm{work}\\) undirected graph, need worry edge direction create edgelist.looks right. Now going load igraph package use function graph_from_edgelist() create undirected graph object edgelist. function expects receive edgelist matrix, need convert gwork_edgelist dataframe matrix use function.now hove \\(G_\\mathrm{work}\\) graph memory. go , let’s take look .Let’s start string UN-- first line output. string describes type graph . letter U denotes undirected graph, N denotes graph named vertices. two properties, discover later, currently present represented dashes --. Next number vertices (4) edges (5), followed two dashes.next line attributes graph listed. case just one attribute name, vertex attribute — denoted (v/c). Finally edges graph given using vertex names. Note direction edges, denoted --.Let’s try thing time directed graph \\(G_\\mathrm{manage}\\) Section 2.1.1.see similar output gwork, except now directed graph, donated D first line, see edges now denoted direction using->.","code":"\n(gwork_edgelist <- data.frame(\n  from = c(\"David\", \"David\", \"David\", \"Jane\", \"Jane\"),\n  to = c(\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\")\n))##    from     to\n## 1 David  Zubin\n## 2 David Suraya\n## 3 David   Jane\n## 4  Jane  Zubin\n## 5  Jane Suraya\nlibrary(igraph)\n\ngwork_edgelist <- as.matrix(gwork_edgelist)\ngwork <- igraph::graph_from_edgelist(el = gwork_edgelist, \n                                     directed = FALSE)\ngwork## IGRAPH 0bb0a5d UN-- 4 5 -- \n## + attr: name (v/c)\n## + edges from 0bb0a5d (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane\ngmanage_edgelist <- data.frame(\n  from = c(\"Suraya\", \"David\", \"David\"),\n  to = c(\"David\", \"Zubin\", \"Jane\")\n)\n\ngmanage_edgelist <- as.matrix(gmanage_edgelist)\n(gmanage <- igraph::graph_from_edgelist(el = gmanage_edgelist,\n                                       directed = TRUE))## IGRAPH ad54980 DN-- 4 3 -- \n## + attr: name (v/c)\n## + edges from ad54980 (vertex names):\n## [1] Suraya->David David ->Zubin David ->Jane"},{"path":"working.html","id":"creating-a-graph-from-an-adjacency-matrix","chapter":"2 Working With Graphs","heading":"2.2.2 Creating a graph from an adjacency matrix","text":"Similarly, can create graph data provided adjacency matrix. Let’s manually create adjacency matrix flights graph Figure 2.3, can use graph_from_adjacency_matrix() function igraph create graph object matrix.see expected directed multigraph 3 vertices 4 edges. wish use create weighted graph Figure 2.10, add weighted = TRUE arguments.now see graph 5 edges see addition W graph type, indicating weighted graph also see new edge property weight.","code":"\n# create 3x3 adjacency matrix\nadj_flights <- matrix(c(0, 5, 2, 4, 0, 0, 4, 1, 0), nrow = 3, ncol = 3)\nrownames(adj_flights) <- c(\"SFO\", \"PHL\", \"TUS\")\ncolnames(adj_flights) <- rownames(adj_flights)\n\n# create multigraph from adjacency matrix\n(flightgraph <- igraph::graph_from_adjacency_matrix(\n  adjmatrix = adj_flights,\n  mode = \"directed\"\n))## IGRAPH c2787da DN-- 3 16 -- \n## + attr: name (v/c)\n## + edges from c2787da (vertex names):\n##  [1] SFO->PHL SFO->PHL SFO->PHL SFO->PHL SFO->TUS SFO->TUS SFO->TUS SFO->TUS PHL->SFO PHL->SFO PHL->SFO PHL->SFO PHL->SFO\n## [14] PHL->TUS TUS->SFO TUS->SFO\n# create weighted graph \n(flightgraph <- igraph::graph_from_adjacency_matrix(\n  adjmatrix = adj_flights,\n  mode = \"directed\",\n  weighted = TRUE\n))## IGRAPH d324a30 DNW- 3 5 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from d324a30 (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO"},{"path":"working.html","id":"creating-a-graph-from-a-dataframe","chapter":"2 Working With Graphs","heading":"2.2.3 Creating a graph from a dataframe","text":"noted Section 2.1.4, edgelists usually sufficient descibe graph singletons concern. function graph_from_edgelist() works fine purpose, lacking flexibility graphs contain singletons properties ideally like load creation. However, function graph_from_data_frame() allows create flexible graph directly dataframes containing required data.Let’s create bipartite graph \\(G_\\mathrm{new}\\) Figure 2.7 using function. minimum, function requires dataframe edges, also accept dataframe vertices needed.Playing around: functions section functions igraph package builds graphs data, far commonly used ones. typing ?graph_from R console looking functions autocomplete, can see functions build graphs data. Try playing around curious.","code":"\n# edge dataframe\nedge_df <- data.frame(\n  from = c(\"David\", \"David\", \"David\", \"Jane\", \"Jane\", \n           \"Sandra\", \"Sandra\", \"Mae-Li\"),\n  to = c(\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\", \n         \"Mae-Li\", \"Jake\", \"Jake\")\n)\n\n# vertex dataframe\nvertex_df <- data.frame(\n  name = c(\"David\", \"Zubin\", \"Suraya\", \"Jane\", \n           \"Sandra\", \"Mae-Li\", \"Jake\")\n)\n\n# create graph\n(gnew <- igraph::graph_from_data_frame(\n  d = edge_df,\n  directed = FALSE,\n  vertices = vertex_df\n))## IGRAPH 87d51bb UN-- 7 8 -- \n## + attr: name (v/c)\n## + edges from 87d51bb (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane   Sandra--Mae-Li Sandra--Jake   Mae-Li--Jake"},{"path":"working.html","id":"adding-properties-to-the-vertices-and-edges","chapter":"2 Working With Graphs","heading":"2.2.4 Adding properties to the vertices and edges","text":"Vertex edge properties can added new graph point creation can added progressively existing graph. add properties time creating graph, simply include properties columns edge vertex dataframes create_graph_from_data_frame() function. Let’s recreate financial transaction graph including edge vertex properties Figure 2.9.see additional edge properties cur amt vertex property loc included graph. codes immediately following properties represent property type data type. can see loc vertex property character type (v/c), cur edge property character type (e/c) amt edge property numeric type (e/n).Playing around: arbitrary number properties can added vertices edges graph. label one properties weight property numeric, change type graph W, weighted graph. Try playing around changing name amt column weight gtransfers.can view vertex edge sets graph using V() E() functions respectively.see specific properties attributes within vertices edges, $ operator can used.Vertex edge properties can written existing graph directly way, providing properties correct length order. example, another way creating weighted flights graph Figure 2.10.see weighted graph created adding weight property edges unweighted graph.bipartite graph can created giving vertices type property according two disjoint sets vertices. Let’s use \\(G_\\mathrm{new}\\) bipartite graph example, generated earlier gnew object. vertex set, first four vertices organization final three organization B.can see graph gnew now final four graph types: B meaning bipartite.Playing around: Hopefully can now see many ways construct graph. Try using graph_from_data_frame() function create gnew bipartite graph point creation.","code":"\n# dataframe of edges and properties \nedge_transfers <- data.frame(\n  from = c(\"A\", \"A\", \"B\", \"B\"),\n  to = c(\"A\", \"B\", \"A\", \"C\"),\n  cur = c(\"USD\", \"USD\", \"GBP\", \"GBP\"),\n  amt = c(150000, 570000, 230000, 175000)\n)\n\n# dataframe of edges and properties \nvertex_transfers <- data.frame(\n  name = c(\"A\", \"B\", \"C\"),\n  loc = c(\"USA\", \"UK\", \"France\")\n)\n\n# create graph\n(gtransfers <- igraph::graph_from_data_frame(\n  d = edge_transfers,\n  directed = TRUE,\n  vertices = vertex_transfers\n))## IGRAPH 4201a10 DN-- 3 4 -- \n## + attr: name (v/c), loc (v/c), cur (e/c), amt (e/n)\n## + edges from 4201a10 (vertex names):\n## [1] A->A A->B B->A B->C\nV(gtransfers)## + 3/3 vertices, named, from 4201a10:\n## [1] A B C\nE(gtransfers)## + 4/4 edges from 4201a10 (vertex names):\n## [1] A->A A->B B->A B->C\nV(gtransfers)$name## [1] \"A\" \"B\" \"C\"\nE(gtransfers)$amt## [1] 150000 570000 230000 175000\n# create unweighted graph from routes edgelist\nedge_routes <- data.frame(\n  from = c(\"SFO\", \"SFO\", \"PHL\", \"PHL\", \"TUS\"),\n  to = c(\"PHL\", \"TUS\", \"SFO\", \"TUS\", \"SFO\")\n) \n\nedge_routes <- as.matrix(edge_routes)\n\nflightsgraph <- igraph::graph_from_edgelist(\n  el = edge_routes,\n  directed = TRUE\n)\n\n# add weights as an edge property\nE(flightsgraph)$weight <- c(4, 4, 5, 1, 2)\n\n# view flightsgraph\nflightsgraph## IGRAPH 9741c19 DNW- 3 5 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from 9741c19 (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO\nV(gnew)$type = c(rep(\"A\", 4), rep(\"B\", 3))\n\ngnew## IGRAPH 87d51bb UN-B 7 8 -- \n## + attr: name (v/c), type (v/c)\n## + edges from 87d51bb (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane   Sandra--Mae-Li Sandra--Jake   Mae-Li--Jake"},{"path":"working.html","id":"creating-graphs-in-python","chapter":"2 Working With Graphs","heading":"2.3 Creating graphs in Python","text":"book use networkx package Python create graphs. version igraph package also available Python, networkx contains convenient functions building graphs existing data.","code":""},{"path":"working.html","id":"creating-a-graph-from-an-edgelist-1","chapter":"2 Working With Graphs","heading":"2.3.1 Creating a graph from an edgelist","text":"graph can constructed edgelist Python dict. Let’s create undirected graph \\(G_\\mathrm{work}\\) Section 2.1.1.view edges vertices/nodes, can seen attributes gwork object.graph can also constructed edgelist Pandas DataFrame. default edgelist needs columns source target1.default functions uses Graph() class create undirected graph. Various methods exist check type graph. example:create directed graph \\(G_\\mathrm{manage}\\), use DiGraph() class.","code":"import pandas as pd\nimport networkx as nx\n\n# create edgelist as dict\ngwork_edgelist = dict(\n  David = [\"Zubin\", \"Suraya\", \"Jane\"],\n  Jane = [\"Zubin\", \"Suraya\"]\n)\n\n# create graph dict\ngwork = nx.Graph(gwork_edgelist)# see vertices and edges as lists\nlist(gwork.nodes)## ['David', 'Jane', 'Zubin', 'Suraya']list(gwork.edges)## [('David', 'Zubin'), ('David', 'Suraya'), ('David', 'Jane'), ('Jane', 'Zubin'), ('Jane', 'Suraya')]gwork_edgelist=dict(\n  source=[\"David\", \"David\", \"David\", \"Jane\", \"Jane\"],\n  target=[\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\"]\n)\n\n#create edgelist as Pandas DataFrame\ngwork_edgelist = pd.DataFrame(gwork_edgelist)\n\n# create graph from Pandas DataFrame\ngwork = nx.from_pandas_edgelist(gwork_edgelist)gwork.is_directed()## Falsegwork.is_multigraph()## Falsegmanage_edgelist=dict(\n  David=[\"Zubin\", \"Jane\"],\n  Suraya=[\"David\"]\n)\n\n# create directed graph\ngmanage=nx.DiGraph(gmanage_edgelist)\n\n# check edges\nlist(gmanage.edges)\n\n# check directed## [('David', 'Zubin'), ('David', 'Jane'), ('Suraya', 'David')]gmanage.is_directed()## True"},{"path":"working.html","id":"python-graph-from-adjacency","chapter":"2 Working With Graphs","heading":"2.3.2 Creating a graph from an adjacency matrix","text":"function from_numpy_matrix() allows construction graph adjacency matrix created using numpy. Let’s construct directed multigraph flight carriers Figure 2.3 way.generate graph single weighted edges Figure 2.10, simply change parallel_edges argument use DiGraph() class. map entries matrix weight edge attribute.","code":"import numpy as np\n\n# create adjacency matrix\nadj_flights = np.reshape((0,4,4,5,0,1,2,0,0), (3,3))\n\n# generate directed multigraph \nmultiflights = nx.from_numpy_matrix(adj_flights, parallel_edges=True, \ncreate_using=nx.MultiDiGraph())\n\n# name nodes\nlabel_mapping = {0: \"SFO\", 1: \"PHL\", 2: \"TUS\"}\nmultiflights = nx.relabel_nodes(multiflights, label_mapping)\n\n# check edges\nlist(multiflights.edges)## [('SFO', 'PHL', 0), ('SFO', 'PHL', 1), ('SFO', 'PHL', 2), ('SFO', 'PHL', 3), ('SFO', 'TUS', 0), ('SFO', 'TUS', 1), ('SFO', 'TUS', 2), ('SFO', 'TUS', 3), ('PHL', 'SFO', 0), ('PHL', 'SFO', 1), ('PHL', 'SFO', 2), ('PHL', 'SFO', 3), ('PHL', 'SFO', 4), ('PHL', 'TUS', 0), ('TUS', 'SFO', 0), ('TUS', 'SFO', 1)]# create with single weighted edges\nmultiflights = nx.from_numpy_matrix(adj_flights, parallel_edges=False, \ncreate_using=nx.DiGraph())\n\n# name nodes\nlabel_mapping = {0: \"SFO\", 1: \"PHL\", 2: \"TUS\"}\nmultiflights = nx.relabel_nodes(multiflights, label_mapping)\n\n# check edges\nlist(multiflights.edges)\n\n# check weights of edges## [('SFO', 'PHL'), ('SFO', 'TUS'), ('PHL', 'SFO'), ('PHL', 'TUS'), ('TUS', 'SFO')][multiflights.edges[i]['weight'] for i in list(multiflights.edges)]## [4, 4, 5, 1, 2]"},{"path":"working.html","id":"adding-vertex-and-edge-properties-to-a-graph","chapter":"2 Working With Graphs","heading":"2.3.3 Adding vertex and edge properties to a graph","text":"easiest way add attributes vertices edges use set_node_attributes() set_edge_attributes() functions respectively. Vertex/node attributes must passed dict nodes keys. Let’s build simple financial transactions graph Figure 2.9.Note multiple attributes can set passing dict dicts.may look tedious manual, move adding common properties like node centrality edge weight graphs, find easy set built-functions automatically index output vertices edges. example, already seen Section 2.3.2 function from_numpy_matrix() automatically sets weight according number edges set argument parallel_edges False.Playing around: igraph package R, networkx package Python contains whole host ways import data graph. methods outlined likely common, ’s worth taking look functions from_dict_of_dicts() from_dict_of_lists() see available .","code":"# create dict of edgelist\ntransfer_edgelist = dict(\n  A = [\"A\", \"B\"],\n  B = [\"A\", \"C\"]\n)\n\n# create directed graph\ntransfer=nx.DiGraph(transfer_edgelist)\n\n#view vertices\nlist(transfer.nodes)\n\n# add attribute loc to vertices## ['A', 'B', 'C']loc_attributes = dict(A = \"USA\", B = \"UK\", C = \"France\")\nnx.set_node_attributes(G = transfer, name = \"loc\",\nvalues = loc_attributes)\n\n# check \n[transfer.nodes[i]['loc'] for i in list(transfer.nodes)]## ['USA', 'UK', 'France']#view edges\nlist(transfer.edges)\n\n# add attributes to edges## [('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'C')]transfer_attributes = {\n  ('A', 'A'): {\"cur\": \"USD\", \"amt\": 150000}, \n  ('A', 'B'): {\"cur\": \"USD\", \"amt\": 570000},\n  ('B', 'A'): {\"cur\": \"GBP\", \"amt\": 230000}, \n  ('B', 'C'): {\"cur\": \"GBP\", \"amt\": 175000}\n}\n\n# set edge attributes\nnx.set_edge_attributes(G = transfer, values = transfer_attributes)\n\n# check\n[transfer.edges[i]['cur'] for i in list(transfer.edges)]## ['USD', 'USD', 'GBP', 'GBP'][transfer.edges[i]['amt'] for i in list(transfer.edges)]## [150000, 570000, 230000, 175000]"},{"path":"working.html","id":"learning-exercises","chapter":"2 Working With Graphs","heading":"2.4 Learning exercises","text":"","code":""},{"path":"working.html","id":"discussion-questions","chapter":"2 Working With Graphs","heading":"2.4.1 Discussion questions","text":"Describe two sets make graph.graph vertices edges. statement true? converse statement true?following real-world cases, kind graph best choice: pseudograph, multigraph, \\(k\\)-partite graph tree? Also state whether directed undirected.graph academic collaboration vertices represent people edge represents published paper vertices authors.graph academic collaboration vertices represent people edge represents published paper vertices authors.graph vertex represents soccer player edge exists vertices played team time.graph vertex represents soccer player edge exists vertices played team time.graph vertices geographical cities, countries continents edge exists one vertex geographically located another.graph vertices geographical cities, countries continents edge exists one vertex geographically located another.graph vertices group colleagues edge exists vertex B least one email message sent colleague colleague B.graph vertices group colleagues edge exists vertex B least one email message sent colleague colleague B.graph vertices train stations US, Japan Russia edge exists direct train route exists two vertices.graph vertices train stations US, Japan Russia edge exists direct train route exists two vertices.criteria must graph satisfy called tree?criteria must graph satisfy called tree?Give two different ways construct graph described Question 3.Give two different ways construct graph described Question 3.Can think three things everyday life represented graphs? vertices edges represent? kinds graph best case?Can think three things everyday life represented graphs? vertices edges represent? kinds graph best case?","code":""},{"path":"working.html","id":"data-exercises","chapter":"2 Working With Graphs","heading":"2.4.2 Data exercises","text":"Load koenigsberg edgelist onadata package load dataframe internet2. edgelist Bridges Königsberg problem looked …Create graph object using edgelist. Ensure undirected.exploring graph object just created, determine many vertices edges graph. make sense given original problem tackled Euler?Obtain list names vertices graph.Find function method graph package create adjacency matrix graph. Check output see makes sense.Load pizza data set onadata package load dataframe internet3. dataset represents requests made Reddit users thread called Random Acts Pizza (ROAP), part larger dataset used research purposes4. column represents users made requests pizza column represents users responded request giving pizza5. columns represent request ID data requester time request made.Use appropriate method create graph object using columns data set.Use information contained graph object determine many pizza requests fulfilled.Determine using information graph whether anyone fulfilled one pizza request.Using appropriate method, add columns pizza data set edge properties.Use edge properties graph object determine request ID largest number requester votes.Use edge properties graph object determine request ID largest number requester subreddits.","code":""},{"path":"viz-graphs.html","id":"viz-graphs","chapter":"3 Visualizing Graphs","heading":"3 Visualizing Graphs","text":"Now learned define store graphs, ’s time take look ways visualizing . noted earlier chapters, visualization important tool can make graphs networks real others. visualizations always effective. Graphs can laid visualized many different ways, effectively communicate inference conclusion analyst inviting others draw phenomenon represented graph.graph made vertices edges, many factors impact graph appears. First, cosmetic matters vertex size, edge thickness, whether vertices edges labelled, colored . Second matters layout — , position vertices relative visualization. example, recall simple four vertex undirected graph \\(G_\\mathrm{work}\\) Section 2.1.1. Figure 3.1 shows two different ways visualizing graph, make different choices vertex size graph layout6.\nFigure 3.1: Two different ways visualizing \\(G_\\mathrm{work}\\) graph\nchoices visualize graph wide varied, covering every single permutation combination cosmetics layouts chapter. Instead, focus learning control common options. equip reader well just work later book, also need visualize graphs create part work study. also cover variety graph visualization programming package options R, Python afield.chapter work relatively famous graph known Zachary’s karate club. graph originates piece research karate club social anthropologist Wayne W. Zachary 1970s (Zachary (1977)), commonly used example social network many teaching situations today. graph contains 34 vertices representing different individuals actors. karate instructor labelled ‘Mr Hi.’ club administrator labelled ‘John .’ 32 actors labelled Actor 2 thru Actor 33. Zachary studied social interactions members outside club meetings, study conflict arose club eventually led group splitting two - one group forming new club around instructor Mr Hi group dispersing find new clubs give karate completely. graph, edge two vertices means two individuals interacted socially outside club.","code":""},{"path":"viz-graphs.html","id":"visualizing-graphs-in-r","chapter":"3 Visualizing Graphs","heading":"3.1 Visualizing graphs in R","text":"Let’s load graph edgelist R onadata package internet7, check first rows.Now let’s use edgelist create undirected graph object igraph.can see undirected graph 34 named vertices 78 edges.","code":"\n# get edgelist data as dataframe\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\nhead(karate_edgelist)##    from      to\n## 1 Mr Hi Actor 2\n## 2 Mr Hi Actor 3\n## 3 Mr Hi Actor 4\n## 4 Mr Hi Actor 5\n## 5 Mr Hi Actor 6\n## 6 Mr Hi Actor 7\nlibrary(igraph)\n\n(karate <- igraph::graph_from_data_frame(karate_edgelist, \n                                         directed = FALSE))## IGRAPH 495416b UN-- 34 78 -- \n## + attr: name (v/c)\n## + edges from 495416b (vertex names):\n##  [1] Mr Hi   --Actor 2  Mr Hi   --Actor 3  Mr Hi   --Actor 4  Mr Hi   --Actor 5  Mr Hi   --Actor 6  Mr Hi   --Actor 7 \n##  [7] Mr Hi   --Actor 8  Mr Hi   --Actor 9  Mr Hi   --Actor 11 Mr Hi   --Actor 12 Mr Hi   --Actor 13 Mr Hi   --Actor 14\n## [13] Mr Hi   --Actor 18 Mr Hi   --Actor 20 Mr Hi   --Actor 22 Mr Hi   --Actor 32 Actor 2 --Actor 3  Actor 2 --Actor 4 \n## [19] Actor 2 --Actor 8  Actor 2 --Actor 14 Actor 2 --Actor 18 Actor 2 --Actor 20 Actor 2 --Actor 22 Actor 2 --Actor 31\n## [25] Actor 3 --Actor 4  Actor 3 --Actor 8  Actor 3 --Actor 9  Actor 3 --Actor 10 Actor 3 --Actor 14 Actor 3 --Actor 28\n## [31] Actor 3 --Actor 29 Actor 3 --Actor 33 Actor 4 --Actor 8  Actor 4 --Actor 13 Actor 4 --Actor 14 Actor 5 --Actor 7 \n## [37] Actor 5 --Actor 11 Actor 6 --Actor 7  Actor 6 --Actor 11 Actor 6 --Actor 17 Actor 7 --Actor 17 Actor 9 --Actor 31\n## [43] Actor 9 --Actor 33 Actor 9 --John A   Actor 10--John A   Actor 14--John A   Actor 15--Actor 33 Actor 15--John A  \n## + ... omitted several edges"},{"path":"viz-graphs.html","id":"native-plotting-igraph","chapter":"3 Visualizing Graphs","heading":"3.1.1 Native plotting in igraph","text":"igraph package allows simple plotting graphs using plot() function. function works instantly igraph object, using default values various arguments. starting point, use default values except layout graph. set layout plot initially random layout, randomly allocate vertices different positions. Figure 3.2 shows default plot karate network.\nFigure 3.2: Basic default plot karate network\nThinking ahead: previous code chunk fixes positioning vertices karate graph. setting random seed, can ensure random numbers generated time plot repeatable reproducible. random_layout() function calculates random x y coordinates vertices, use plot() function, assigns coordinates plot. learn layouts later chapter, use technique lot. like, try playing around layouts now. couple examples layout_with_sugiyama() layout_with_dh().Looking Figure 3.2, note labeling vertices somewhat obtrusive unhelpful clarity graph. common problem default graph plotting, large number vertices plot can turn messy cloud overlapping labels.Vertex labels can adjusted via properties vertices. common properties adjusted follows:label: text labellabel.family: font family used (default ‘serif’)label.font: font style, 1 plain (default), 2 bold, 3 italic, 4 bold italic 5 symbol fontlabel.cex: size label textlabel.color: color label textlabel.dist: distance label fron vertex - 0 centered vertex (default), 1 beside vertexlabel.degree: angle label display relative center vertex, radians. default -pi/4Let’s try change vertex labels display Mr Hi John . Let’s also change size, color font family labels. output can seen Figure 3.3\nFigure 3.3: Adjusting label appearance changing vertex properties\nNow cleaned label situation, may wish change appearance vertices. commonly used vertex properties allow :size: size vertexcolor: fill color vertexframe.color: border color vertexshape: shape vertex - multiple shape options supported including circle, square, rectangle noneWe may wish use different vertex shapes colors actors compared Mr Hi John . done, results Figure 3.4.\nFigure 3.4: Adjusting vertex appearance changing vertex properties\nsimilar way, edges can changed adding editing edge properties. common edge properties used change edges igraph plot:color: color edgewidth: width edgearrow.size: size arrow directed edgearrow.width: width arrow directed edgearrow.mode: Whether edges direct forward (>), backward (<) (<>)lty: Line type edges, numerous options including solid, dashed, dotted, dotdash blankcurved: Specifies amount curvature apply edge, zero (default) straight edge, negative numbers bending clockwise positive bending anti-clockwiseNote edges, like vertices, can also label label property various label settings like label.cex label.family. Let’s adjust karate graph blue dashed edges, result 3.5.\nFigure 3.5: Adjusting edge appearance changing edge properties\nPlaying around: Usually, getting graph looking way want take trial error playing around properties. Try adjusting karate graph using properties listed.","code":"\n# set seed for reproducibility\nset.seed(123)\n\n# create random layout\nl <- layout_randomly(karate)\n\n# plot with random layout\nplot(karate, layout = l)\n# only store a label if Mr Hi or John A\nV(karate)$label <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          V(karate)$name,\n                          \"\")\n\n# change label font color, size and font family \n# (selected font family needs to be installed on system)\nV(karate)$label.color <- \"black\"\nV(karate)$label.cex <- 0.5\nV(karate)$label.family <- \"Lucinda Console\"\n\nplot(karate, layout = l)\n# different colors and shapes for Mr Hi and and John A\nV(karate)$color <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"lightblue\", \n                          \"pink\")\n\nV(karate)$shape <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"square\", \n                          \"circle\")\n\n\nplot(karate, layout = l)\n# change color and linetype of all edges\nE(karate)$color <- \"blue\"\nE(karate)$lty <- \"dashed\"\n\nplot(karate, layout = l)"},{"path":"viz-graphs.html","id":"layouts","chapter":"3 Visualizing Graphs","heading":"3.1.2 Graph layouts","text":"layout graph determines precise position vertices 2-dimensional plane 3-dimensional space. Layouts algorithms calculate vertex positions based properties graph. Different layouts work different purposes, example visually identify communities graph, just make graph look pleasant. Section 3.1.1, used random layout karate graph. Now let’s look common alternative layouts. Layouts used multiple plotting packages, explore using igraph base plotting capabilities .two ways add layout graph igraph. want keep graph object separate layout, can create layout use argument plot() function, like Figure 3.2. Alternatively, can assign layout graph object making property graph. intend stick permanently chosen layout intend experiment. can use add_layout_() function achieve . example, create karate graph grid layout.can see new graph object layout property. Note running add_layout_() graph already layout property default overwrite previous layout unless set argument overwrite = FALSE.well random layout demonstrated Figure 3.2, common shape layouts include as_star(), as_tree(), in_circle(), on_grid() on_sphere(). example, Figure 3.6 shows circle layout karate network, Figure 3.7 shows sphere layout.\nFigure 3.6: Circle layout karate graph\n\nFigure 3.7: Sphere layout karate graph\nThinking ahead: Notice circle sphere layouts position Mr Hi John close . indication layout algorithms established something common two individuals based properties graph. something cover later chapter, want explore ahead, know , calculate centrality measures vertices karate graph — example degree centrality betweenness centrality.Force-directed graph layouts extremely popular, aesthetically pleasing help visualize communities vertices quite effectively, especially graphs low moderate edge-complexity. algorithms emulate physical models like Hooke’s law attract connected vertices together, time applying repelling forces pairs vertices try keep much space possible . calculation iterative process vertex positions recalculated equilibrium reached8. result usually layout connected vertices closer together edge-length approximately equal.Zachary’s Karate Club study, study connection community, can imagine force-directed layout good choice visualization, find case many network graphs study. several different implementations force directed algorithms available. Perhaps popular Fruchterman-Reingold algorithm. Figure 3.8 shows karate network layout generated Fruchterman-Reingold algorithm, can see clear communities karate club oriented around Mr Hi John ..\nFigure 3.8: Force-directed layout karate graph according Fruchterman-Reingold algorithm\nKamada-Kawai algorithm GEM algorithm also commonly used force-directed algorithms produce similar types community structures Figures 3.9 3.10 respectively.\nFigure 3.9: Force-directed layout karate graph according Kamada-Kawai algorithm\n\nFigure 3.10: Force-directed layout karate graph according GEM algorithm\nwell force-directed shape=oriented layout algorithms, several alternative approaches layout calculation also available. layout_with_dh() uses simulated annealing algorithm developed nice graph drawing, layout_with_mds() generates vertex coordinates multi-dimensional scaling based shortest path distance (look later chapter). layout_with sugiyama() suitable directed graphs minimizes edge crossings introducing bends edges — multigraph visualization Figure 2.4 generated using Sugiyama layout algorithm.Finally, three layout algorithms suited large graphs many thousands even millions edges. One biggest problems visualizing large graphs potential ‘hairballs’ — , clumps connected nodes dense usefully visualized. layout_with_lgl() uses Large Graph Layout algorithm tries identify clusters vertices position clusters positioning individual vertices minimize chance hairballs, still adhering principles force-directed networks. layout_with_drl() layout_with_graphopt() uses efficient force-directed algorithms scale well large graphs.Playing around: Try laying karate graph using various algorithms observe different appearances. interested experimenting larger graph, enough computing power won’t freeze machine, load wikivote edgelist onadata package, download internet9. network represents votes Wikipedia members members made administrators. Create directed graph object, lay using layout_with_graphopt(). help visualization, remove vertex labels, set node size 0.5 set edge arrow size 0.1. plot , see great example hairball, Figure 3.11.\nFigure 3.11: Example hairball generated trying visualize large network Wikipedia votes administrators\nabsence information layout, plot() function igraph choose appropriate layout using logic determined layout_nicely(). graph already layout attribute, use layout. Otherwise, vertices x y attributes, use vertex co-ordinates. Failing , layout_with_fr() used graph fewer 1,000 vertices, layout_with_drl() used graph 1,000 vertices. Thus, plot defaults form force-directed layout unless graph attributes suggest otherwise.","code":"\n# check whether existing karate graph has a layout property\nkarate$layout## NULL\n# assign grid layout as a graph property\nset.seed(123)\nkarate_grid <- igraph::add_layout_(karate, on_grid())\n\n# check a few lines of the 'layout' property\nhead(karate_grid$layout)##      [,1] [,2]\n## [1,]    0    0\n## [2,]    1    0\n## [3,]    2    0\n## [4,]    3    0\n## [5,]    4    0\n## [6,]    5    0\n# circle layout\nset.seed(123)\ncirc <- layout_in_circle(karate)\nplot(karate, layout = circ)\n# sphere layout\nset.seed(123)\nsph <- layout_on_sphere(karate)\nplot(karate, layout = sph)\n# F-R algorithm\nset.seed(123)\nfr <- layout_with_fr(karate)\nplot(karate, layout = fr)\n## K-K algorithm\nset.seed(123)\nkk <- layout_with_kk(karate)\nplot(karate, layout = kk)\n## GEM algorithm\nset.seed(123)\ngem <- layout_with_gem(karate)\nplot(karate, layout = gem)"},{"path":"viz-graphs.html","id":"plotting-with-ggraph","chapter":"3 Visualizing Graphs","heading":"3.1.3 Plotting with ggraph","text":"ggraph package developed enjoy working general ggplot2 package, popular plotting package R. learn ggplot2 foundational package, Wickham (2016) highly recommended. ggplot2, ggraph provides grammar building graph visualizations. native capabilities igraph suffice R static graph visualizations, ggraph considered additional option prefer use . also integrates well ggplot2 allows layers added graph visualization, greater variety node shapes ability layer networks onto geographic maps relative ease — look nice example later section.build elementary graph using ggraph, start igraph object layout, progressively add node edge properties well themes layer required. illustrate, let’s generate relatively basic visualization karate graph using ggraph Figure 3.12. Note customary add edges nodes nodes top layer plot.\nFigure 3.12: Elementary visualization karate graph using ggraph Fruchterman-Reingold algorithm\nparticularly appealing. However, can play properties improve appearance, can move minimal theme remove grey background add title wish, Figure 3.13.\nFigure 3.13: Improved visualization karate graph using node edge properties\nLike ggplot2, want associate property nodes edges property plot, can use aesthetic mappings. example, let’s give Mr Hi John property “leader” graph, ask ggraph color nodes property, Figure 3.14.\nFigure 3.14: karate graph leader property used aesthetic\nexample using ggraph, let’s look dataset collected study workplace interactions France 2015 (G’enois Barrat (2018)). Load workfrance_edgelist workfrance_vertices data sets onadata package download internet10. study, employees company wore wearable devices triangulate location building, edges defined situation two employees sharing spatial location. edgelist contains columns edges, well mins column representing total minutes spent co-located study11. vertex list contains data department employee ID. create basic visualization using ggraph Figure 3.15.\nFigure 3.15: Connection employees workplace measured spatial co-location\nstands, graph tell us much, couple simple adjustments can change . First, can adjust thickness edges reflect total number minutes spent meeting, seems reasonable measure ‘strength’ ‘weight’ connection. Second, can color code nodes department. result Figure 3.16. can now see clusters highly connected employees mostly driven department.\nFigure 3.16: Connection employees workplace edge thickness weighted minutes spent spatially co-located vertices colored department\nThinking ahead: graph just created Figure 3.16 shows detected community segmentation vertices. ’s relatively clear individuals department likely connected. Community segmentation important topic Organizational Network Analysis study later book. ’s always straightforward identify drivers community networks, learn number community detection algorithms segment graph different community groups. example, Figure 3.17 shows results running Louvain community detection algorithm workfrance graph mins edge weights. can see communities detected strongly alignd departments Figure 3.16.\nFigure 3.17: Clusters employees detected Louvain community detection algorithm. Note cluster similarity communities departments previous graph.\nggraph visualizations can work relatively easily graphics layers, allowing superimpose graph onto co-ordinate systems. Let’s look example work. Load londontube_edgelist londontube_vertices data sets onadata package download internet12. vertex set list London Tube Stations id, name geographical co-ordinates longitude latitude.edge list represents connections stations, along name line official linecolor hex code.can easily create igraph object data use ggraph create visualization using linecolor edge color stations, Figure 3.18.\nFigure 3.18: Random graph visualization London Tube network graph edges colored different lines\n’s great can easily, ’s pretty confusing visualization anyone knows London. Circle Line doesn’t look circular, Picadilly Line seems heading southeast instead northeast. west, Metropolitan Picadilly Lines seem swapped places. course, graph using geographical co-ordinates plot vertices.can change expanding edgelist include latitudes longitudes stations edge, can layer map graph. First, let’s create new longitude latitude columns edgelist, check works.looks like worked. Now can use ggmap package R layer map London top base ggraph layer, use various latitude longitude columns make network geographically accurate, Figure 3.1913.\nFigure 3.19: Geographically accurate London Tube Network\nFigure 3.19 looks like everything right place. kind graphical layering can extremely important inherent co-ordinate system lying behind vertices graph none existing layout algorithms can recreate co-ordinate system.","code":"\nlibrary(igraph)\nlibrary(ggraph)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, directed = FALSE)\n\n# set seed for reproducibility\nset.seed(123)\n\n# visualise using ggraph with fr layout\nggraph(karate, layout = \"fr\") +\n  geom_edge_link() +\n  geom_node_point() \nset.seed(123)\nggraph(karate, layout = \"fr\") +\n   geom_edge_link(color = \"grey\", alpha = 0.5) + \n  geom_node_point(color = \"blue\", size = 5) +\n  theme_void() + \n  labs(title = \"Zachary's Karate Club Network\")\nV(karate)$leader <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 0)\n\nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.5) + \n  geom_node_point(aes(color = as.factor(leader)), size = 5, show.legend = FALSE) +\n  theme_void() + \n  labs(title = \"Zachary's Karate Club Network\")\n# get edgelist with mins property\nworkfrance_edgelist <- read.csv(\"https://ona-book.org/data/workfrance_edgelist.csv\")\n\n# get vertex set with dept property\nworkfrance_vertices <- read.csv(\"https://ona-book.org/data/workfrance_vertices.csv\")\n\n# create undirected graph object\nworkfrance <- igraph::graph_from_data_frame(\n  d = workfrance_edgelist,\n  vertices = workfrance_vertices,\n  directed = FALSE\n)\n\n# basic visualization\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n  geom_edge_link(color = \"gray\", alpha = 0.2) +\n  geom_node_point(color = \"blue\", size = 5) +\n  theme_void()\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n  geom_edge_link(color = \"gray\", alpha = 0.2, aes(width = mins), \n                 show.legend = FALSE) +\n  geom_node_point(aes(color = dept), size = 5) +\n  theme_void() +\n  labs(title = \"Spatial co-location of employees in a workplace\")\n# download and view london tube vertex data\nlondontube_vertices <- read.csv(\"https://ona-book.org/data/londontube_vertices.csv\")\nhead(londontube_vertices)##   id         name latitude longitude\n## 1  1   Acton Town  51.5028   -0.2801\n## 2  2      Aldgate  51.5143   -0.0755\n## 3  3 Aldgate East  51.5154   -0.0726\n## 4  4   All Saints  51.5107   -0.0130\n## 5  5     Alperton  51.5407   -0.2997\n## 6  7        Angel  51.5322   -0.1058\n# download and view london tube edge data\nlondontube_edgelist <- read.csv(\"https://ona-book.org/data/londontube_edgelist.csv\")\nhead(londontube_edgelist)##   from  to          line linecolor\n## 1   11 163 Bakerloo Line   #AE6017\n## 2   11 212 Bakerloo Line   #AE6017\n## 3   49  87 Bakerloo Line   #AE6017\n## 4   49 197 Bakerloo Line   #AE6017\n## 5   82 163 Bakerloo Line   #AE6017\n## 6   82 193 Bakerloo Line   #AE6017\n# create a set of distinct line names and lincolors to use\nlines <- londontube_edgelist |> \n  dplyr::distinct(line, linecolor)\n\n# create graph object\ntubegraph <- igraph::graph_from_data_frame(d = londontube_edgelist, \n                                           vertices = londontube_vertices,\n                                           directed = FALSE)\n\n# visualize tube graph using linecolors for edge color\nset.seed(123)\nggraph(tubegraph) +\n  geom_node_point(color = \"black\", size = 1) +\n  geom_edge_link(aes(color = line), width = 1) +\n  scale_edge_color_manual(name = \"Line\",\n                          values = lines$linecolor) +\n  theme_void()\n# we reorganize the edgelist to include longitude and latitude for start and end\nnew_edgelist <- londontube_edgelist |> \n  dplyr::inner_join(londontube_vertices |> \n                      dplyr::select(id, latitude, longitude), \n                    by = c(\"from\" = \"id\")) |> \n  dplyr::rename(lat_from = latitude, lon_from = longitude) |> \n  dplyr::inner_join(londontube_vertices |> \n                      dplyr::select(id, latitude, longitude), \n                    by = c(\"to\" = \"id\")) |> \n  dplyr::rename(lat_to = latitude, lon_to = longitude)\n\n# view\nhead(new_edgelist)##   from  to          line linecolor lat_from lon_from  lat_to  lon_to\n## 1   11 163 Bakerloo Line   #AE6017  51.5226  -0.1571 51.5225 -0.1631\n## 2   11 212 Bakerloo Line   #AE6017  51.5226  -0.1571 51.5234 -0.1466\n## 3   49  87 Bakerloo Line   #AE6017  51.5080  -0.1247 51.5074 -0.1223\n## 4   49 197 Bakerloo Line   #AE6017  51.5080  -0.1247 51.5098 -0.1342\n## 5   82 163 Bakerloo Line   #AE6017  51.5199  -0.1679 51.5225 -0.1631\n## 6   82 193 Bakerloo Line   #AE6017  51.5199  -0.1679 51.5154 -0.1755\n# recreate graph object to capture additional edge data\ntubegraph <- igraph::graph_from_data_frame(d = new_edgelist, \n                                           vertices = londontube_vertices,\n                                           directed = FALSE)\n\n# layer a London map\nlibrary(ggmap)\nlondonmap <- get_map(location = \"London, UK\", source = \"google\")\n\nggmap(londonmap, base_layer = ggraph(tubegraph)) +\n  geom_node_point(aes(x = longitude, y = latitude), color = \"black\", size = 1) +\n  geom_edge_link(aes(x = lon_from, y = lat_from,\n                     xend = lon_to, yend = lat_to,\n                     color = line), width = 1) +\n  scale_edge_color_manual(name = \"Line\",\n                          values = lines$linecolor)"},{"path":"viz-graphs.html","id":"interactive-graph-visualization-in-r","chapter":"3 Visualizing Graphs","heading":"3.1.4 Interactive graph visualization in R","text":"seen earlier many large networks complicated make sense visually using static approaches methods already reviewed igraph ggraph. Nevertheless, interactive visualizations networks can useful interest visual exploration particular vertices small sub-networks, even overall network visually complex. touch upon couple commonly used interactive graph visualization packages , use Javascript libraries behind scenes create interactive visualizations.visNetwork simple effective package uses vis.js API create HTML widgets containing interactive graph visualizations. fairly easily use, main function visNetwork() taking dataframe node information dataframe edge information, well optional arguments. columns dataframes expected certain default column names. Vertices/nodes expected least id column can also contain:label: label vertexgroup: group vertex groupsvalue: used determine size vertextitle: used tooltip mouseoverother columns can included passed specific values/properties visualization, color shape.edge dataframe must contain column, can also contain label, value title customize edges vertices, well properties arrows dashes.Interactive Figure 3.20 simple example visNetwork function work using \\(G_\\mathrm{work}\\) graph Section 2.1.1. Note visLayout() function can used various customizations, including passing random seed variable vis.js ensure result.\nFigure 3.20: Simple visNetwork rendering \\(G_\\mathrm{work}\\) graph\nfact, assuming working igraph objects, easiest way deploy visNetwork use visIgraph() function, takes igraph object restructures behind scenes use vis.js API, even inheriting whatever igraph layout prefer. Let’s recreate karate graph visNetwork, Interactive Figure 3.21.\nFigure 3.21: visNetwork rendering basic karate graph using force-directed layout\nPlaying around: visNetwork package allows take advantage ton features vis.js API, including wide range graph customization, ability make graph editable add selector menu search specific nodes groups nodes. ’s worth experimenting different capabilities. thorough manual can found https://datastorm-open.github.io/visNetwork/. don’t try recreate workfrance graph chapter visNetwork?networkD3 package creates responsive interactive network visualizations using D3 javascript library, beautiful options common network layouts like force-directed chord diagrams.create simple force-directed visualization based edgelist, use simpleNetwork() function. needs simple dataframe default first two columns represent edgelist14. example karate network, result shown Interactive Figure 3.22. Note possible set random seed networkD3.\nFigure 3.22: Simple networkD3 rendering Karate graph\nforceNetwork() function allows greater levels customization visualization. function requires edgelist vertex set specific format. However, can use function igraph_to_networkD3() easily create list containing need igraph object. next example, recreate graph Figure 3.22 put Mr Hi John different group, result shown Interactive Figure 3.23. Note node names appear nodes clicked.\nFigure 3.23: Force-directed networkD3 rendering Karate graph\ntypes D3 network visualizations also available chordNetwork(), sankeyNetwork(), many appropriate data visualization purposes exploration analysis networks. quick example using sankeyNetwork() visualize data flows, load eu_referendum dataset onadata package download internet15. shows statistics voting region area United Kingdom’s 2016 referendum membership European Union. example, calculate Leave Remain votes region visualize using sankeyNetwork(), result shown Interactive Figure 3.24. worth taking look intermediate objects created code can better understand construct Nodes Links dataframes commonly expected networkD3 functions.\nFigure 3.24: Visualization regional vote flows UK’s European Union Referendum 2016 using sankeyNetwork()\nThinking ahead: shown examples section, networkD3 package offers useful, convenient ways non-Javascript programmers make use many great capabilities D3 visualization library. See https://christophergandrud.github.io/networkD3/ examples. However, package’s customization potential limited. can program D3, scope exists create amazing interactive graph visualizations, limitless customization potential. advanced chapters book look example visualize network characters TV show Friends coding natively Javascript.","code":"\nlibrary(visNetwork)\n\nnodes <- data.frame(\nid = 1:4,\nlabel = c(\"David\", \"Zubin\", \"Suraya\", \"Jane\")\n)\n\nedges <- data.frame(\n  from = c(1, 1, 1, 4, 4),\n  to = c(2, 3, 4, 2, 3)\n)\n\nvisNetwork(nodes, edges) |> \n  visLayout(randomSeed = 123)\nlibrary(igraph)\nlibrary(ggraph)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, directed = FALSE)\n\n# different colors and shapes for Mr Hi and and John A\nV(karate)$color <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"lightblue\", \n                          \"pink\")\n\nV(karate)$shape <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"square\", \n                          \"circle\")\n\n# visualize from igraph\nvisNetwork::visIgraph(karate, layout = \"layout_with_fr\") |> \n  visLayout(randomSeed = 123)\nlibrary(networkD3)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n  \n# visualize\nnetworkD3::simpleNetwork(karate_edgelist)\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create igraph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, directed = FALSE)\n\n# give Mr Hi and John A a different group\nV(karate)$group <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 2)\n\n# translate to networkD3 - creates a list with links and nodes dfs\n# links have a source and target column and group if requested \nnetd3_list <- networkD3::igraph_to_networkD3(karate, \n                                             group = V(karate)$group)\n\n# visualize\nnetworkD3::forceNetwork(\n  Links = netd3_list$links,\n  Nodes = netd3_list$nodes,\n  NodeID = \"name\",\n  Source = \"source\",\n  Target = \"target\",\n  Group = \"group\"\n)\nlibrary(dplyr)\nlibrary(networkD3)\nlibrary(tidyr)\n\n# get data\neu_referendum <- read.csv(\"https://ona-book.org/data/eu_referendum.csv\")\n\n# aggregate by region\nresults <- eu_referendum |>  \n  dplyr::group_by(Region) |> \n  dplyr::summarise(Remain = sum(Remain), Leave = sum(Leave)) |> \n  tidyr::pivot_longer( -Region, names_to = \"result\", values_to = \"votes\")\n\n# create unique regions, \"Leave\" and \"Remain\" for nodes dataframe\nregions <- unique(results$Region)\nnodes <- data.frame(node = c(0:13), \n                  name = c(regions, \"Leave\", \"Remain\"))\n\n#create edges/links dataframe\nresults <- results |> \n  dplyr::inner_join(nodes, by = c(\"Region\" = \"name\")) |> \n  dplyr::inner_join(nodes, by = c(\"result\" = \"name\"))\n\nlinks <- results[ , c(\"node.x\", \"node.y\", \"votes\")]\ncolnames(links) <- c(\"source\", \"target\", \"value\")\n\n# visualize using sankeyNetwork\nnetworkD3::sankeyNetwork(\n  Links = links, Nodes = nodes, Source = 'source', Target = 'target', \n  Value = 'value', NodeID = 'name', units = 'votes'\n)"}]
